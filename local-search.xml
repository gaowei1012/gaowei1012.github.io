<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>taro之zustand本地数据持久化</title>
    <link href="/taro%E4%B9%8Bzustand%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <url>/taro%E4%B9%8Bzustand%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">import</span> &#123; getStorageSync, removeStorageSync, setStorageSync &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@tarojs/taro&#x27;</span><br><span class="hljs-keyword">import</span> &#123; persist &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zustand/middleware&#x27;</span><br><span class="hljs-keyword">import</span> &#123; create &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zustand&#x27;</span><br><br><span class="hljs-comment">// 定义 storage 类</span><br><span class="hljs-keyword">const</span> asyncLocalStorage = &#123;<br>  <span class="hljs-attr">getItem</span>: getStorageSync,<br>  <span class="hljs-attr">setItem</span>: setStorageSync,<br>  <span class="hljs-attr">removeItem</span>: removeStorageSync<br>&#125;<br><br><span class="hljs-comment">// 创建实例</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">cretaeCardIdSlice</span> = (<span class="hljs-params">set, _get</span>) =&gt; (&#123;<br>  <span class="hljs-attr">cardId</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-attr">setCard</span>: <span class="hljs-function">(<span class="hljs-params">input</span>) =&gt;</span> <span class="hljs-title function_">set</span>(&#123; <span class="hljs-attr">cardId</span>: input &#125;)<br>&#125;)<br><br><span class="hljs-comment">// 使用 `devtools` 和 `persist` 中间件来创建 store</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCardIdState = <span class="hljs-title function_">create</span>(<br>  <span class="hljs-title function_">persist</span>(<br>    <span class="hljs-function">(<span class="hljs-params">set: <span class="hljs-built_in">any</span>, get: <span class="hljs-built_in">any</span></span>) =&gt;</span> (&#123;<br>      ...<span class="hljs-title function_">cretaeCardIdSlice</span>(set, get)<br>    &#125;),<br>    &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;CARD_ID&#x27;</span>, <span class="hljs-comment">// 存储到 localStorage 中的键</span><br>      <span class="hljs-attr">partialize</span>: <span class="hljs-function">(<span class="hljs-params">state</span>) =&gt;</span> (&#123; <span class="hljs-attr">cardId</span>: state.<span class="hljs-property">cardId</span> &#125;),<br>      <span class="hljs-attr">getStorage</span>: <span class="hljs-function">() =&gt;</span> asyncLocalStorage<br>    &#125;<br>  )<br>)<br></code></pre></td></tr></table></figure><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> <span class="hljs-title function_">setCardId</span> = (<span class="hljs-params">e</span>) =&gt; &#123;<br>    <span class="hljs-comment">// Taro.setStorageSync(&#x27;CARD_ID&#x27;, e.id)</span><br>    <span class="hljs-title function_">setCard</span>(e.<span class="hljs-property">id</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="读取值"><a href="#读取值" class="headerlink" title="读取值"></a>读取值</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">const</span> cardIdState = <span class="hljs-title function_">useCardIdState</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;cardIdState=====&gt;&gt;&gt;&#x27;</span>, cardIdState, cardIdState.<span class="hljs-property">cardId</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>taro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>taro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flutter之RefreshIndicator</title>
    <link href="/flutter%E4%B9%8BRefreshIndicator/"/>
    <url>/flutter%E4%B9%8BRefreshIndicator/</url>
    
    <content type="html"><![CDATA[<h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-comment">// 定义刷新key</span><br><span class="hljs-keyword">final</span> GlobalKey&lt;RefreshIndicatorState&gt; _refreshIndicatorKey = GlobalKey&lt;RefreshIndicatorState&gt;();<br><br><span class="hljs-comment">// 数据源</span><br><span class="hljs-keyword">final</span> <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">String</span>&gt; items = <span class="hljs-built_in">List</span>.generate(<span class="hljs-number">20</span>, (i) =&gt; <span class="hljs-string">&#x27;Item <span class="hljs-subst">$&#123;i + <span class="hljs-number">1</span>&#125;</span>&#x27;</span>);<br><br><span class="hljs-comment">// 模拟请求</span><br>Future&lt;<span class="hljs-keyword">void</span>&gt; _onRefresh() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">await</span> Future.delayed(<span class="hljs-keyword">const</span> <span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">2</span>)); <span class="hljs-comment">// 模拟网络请求</span><br>    <span class="hljs-comment">// 更新数据</span><br>    setState(() &#123;<br>        items.clear();<br>        items<br>            .addAll(<span class="hljs-built_in">List</span>.generate(<span class="hljs-number">20</span>, (i) =&gt; <span class="hljs-string">&#x27;New item <span class="hljs-subst">$&#123;i + items.length + <span class="hljs-number">1</span>&#125;</span>&#x27;</span>));<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">/// <span class="language-markdown">手动刷下</span></span><br><span class="hljs-keyword">void</span> _triggerRefresh() &#123;<br>    WidgetsBinding.instance!.addPostFrameCallback((_) &#123;<br>        _refreshIndicatorKey.currentState!.<span class="hljs-keyword">show</span>();<br>    &#125;);<br>&#125;<br><br><span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    _triggerRefresh()<br>    <span class="hljs-keyword">return</span> CustomerContainer(<br>        width: <span class="hljs-number">355</span>,<br>        height: <span class="hljs-number">485</span>,<br>        children: RefreshIndicator(<br>          <span class="hljs-comment">/// <span class="language-markdown">RefreshIndicator 下拉加载更多</span></span><br>          onRefresh: _onRefresh,<br>          key: _refreshIndicatorKey,<br>          child: ListView.builder(<br>              itemCount: items.length,<br>              itemBuilder: (context, index) &#123;<br>                <span class="hljs-keyword">return</span> ListTile(<br>                  title: Text(items[index]),<br>                );<br>              &#125;),<br>        ));<br>  &#125;<br><br></code></pre></td></tr></table></figure><h2 id="自定用法"><a href="#自定用法" class="headerlink" title="自定用法"></a>自定用法</h2>]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flutter 之 WidgetsBindingObserver 前后台监听</title>
    <link href="/flutter%E4%B9%8BWidgetsBindingObserver%E5%89%8D%E5%90%8E%E5%8F%B0%E7%9B%91/"/>
    <url>/flutter%E4%B9%8BWidgetsBindingObserver%E5%89%8D%E5%90%8E%E5%8F%B0%E7%9B%91/</url>
    
    <content type="html"><![CDATA[<h2 id="WidgetsBindingObserver"><a href="#WidgetsBindingObserver" class="headerlink" title="WidgetsBindingObserver"></a>WidgetsBindingObserver</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">/// <span class="language-markdown">WidgetsBindingObserver 包含了各种控件的生命周期通知</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_HomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">HomePage</span>&gt; <span class="hljs-title">with</span> <span class="hljs-title">WidgetsBindingObserver</span> </span>&#123;<br><br>  <span class="hljs-comment">///<span class="language-markdown">重写 WidgetsBindingObserver 中的 didChangeAppLifecycleState</span></span><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> didChangeAppLifecycleState(AppLifecycleState state) &#123;<br>    <span class="hljs-comment">///<span class="language-markdown">通过state判断App前后台切换</span></span><br>    <span class="hljs-keyword">if</span> (state == AppLifecycleState.resumed) &#123;<br><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Container();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024年的CSS革命</title>
    <link href="/2024%E5%B9%B4%E7%9A%84CSS%E9%9D%A9%E5%91%BD/"/>
    <url>/2024%E5%B9%B4%E7%9A%84CSS%E9%9D%A9%E5%91%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="align-centent-革新"><a href="#align-centent-革新" class="headerlink" title="align-centent 革新"></a><code>align-centent</code> 革新</h2><blockquote><p>以前，居中元素需要使用各种方法，比如 Flexbox 属性、margin 甚至绝对定位。这意味着开发者需要花费大量时间进行调整和尝试，最终结果可能在某些屏幕尺寸或浏览器类型下失效。</p></blockquote><blockquote><p><code>align-content</code> 属性的美妙之处在于它的简洁性。你无需手动将所有元素包裹在容器 div 中，也无需费力地解读复杂的 Flexbox 选项。只需要在你的元素上使用这个属性，它就能根据父容器的显示模式自动进行对齐。</p></blockquote><p>这个新属性对于响应式设计来说是一场革命。它能在任何屏幕尺寸上实现完美的居中对齐，无需额外的媒体查询或布局调整。这意味着“更少的代码，更好的性能，以及更少的样式系统潜在故障点。”</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 使用 Flexbox 的旧方法 */</span><br><span class="hljs-selector-class">.old-center</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;<br>&#125;<br><br><span class="hljs-comment">/* 新方法——更简洁！ */</span><br><span class="hljs-selector-class">.new-center</span> &#123;<br>  <span class="hljs-attribute">align-content</span>: center;<br>  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;<br>&#125;<br><br><span class="hljs-comment">/* 适用于任何内容 */</span><br><span class="hljs-selector-class">.center-text</span> &#123;<br>  <span class="hljs-attribute">align-content</span>: center;<br>&#125;<br><br><span class="hljs-comment">/* 甚至适用于多个元素 */</span><br><span class="hljs-selector-class">.center-group</span> &#123;<br>  <span class="hljs-attribute">align-content</span>: center;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-number">1rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="property-的威力：类型安全的-CSS-变量"><a href="#property-的威力：类型安全的-CSS-变量" class="headerlink" title="@property 的威力：类型安全的 CSS 变量"></a><code>@property</code> 的威力：类型安全的 CSS 变量</h2><p><code>CSS</code> 变量（自定义属性）已经存在一段时间了，但它们有一个局限性：浏览器总是将其值解释为字符串。新的 <code>@property</code> 规则（<code>CSS Houdini</code> 的一部分）解决了这个问题，使得可缩放矢量图形 (SVG) 更加强大。</p><p>在使用普通的 <code>CSS</code> 变量时，动画和过渡可能存在问题或根本无法实现，因为浏览器无法理解变量的类型。例如，我尝试动画化一个基于百分比的渐变，但这行不通，因为对于浏览器来说，它只是一个字符串，而不是一个数字。</p><p><code>@property</code> 规则通过指定变量的类型来消除这个限制。这意味着你的网站将拥有更流畅的界面、更具响应性的功能，以及更少的样式表异常行为。想象一下，为你的 <code>CSS</code> 带来类型安全，就像你在 <code>JavaScript</code> 中使用 <code>TypeScript</code> 一样。</p><p>仅仅是构思一个主题系统，在不同模式之间切换时能够实现颜色混合，就令人兴奋不已。这样，你可以定义浏览器可以原生识别的颜色变量，从而获得必然的平滑过渡，而这在以前要么是不可能的，要么需要调用 <code>JS</code>。</p><p>现在你可以：</p><ul><li>为你的变量定义特定类型（数字、颜色、百分比</li><li>创建更安全、更可预测的代码</li><li>使用类型化值实现流畅动画</li><li>通过更好的浏览器优化来提高性能</li></ul><p>这个特性在处理以下情况时非常有用：</p><ul><li>渐变</li><li>动画</li><li>动态配色方案</li><li>响应式布局</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 旧方法——浏览器将所有内容视为字符串 */</span><br><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--gradient-stop</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attr">--theme-color</span>: <span class="hljs-number">#ff0000</span>;<br>&#125;<br><br><span class="hljs-comment">/* 使用 @property 的新方法 */</span><br><span class="hljs-keyword">@property</span> --gradient-stop &#123;<br>  syntax: <span class="hljs-string">&#x27;&lt;percentage&gt;&#x27;</span>;<br>  inherits: false;<br>  initial-value: <span class="hljs-number">0%</span>;<br>&#125;<br><br><span class="hljs-keyword">@property</span> --theme-color &#123;<br>  syntax: <span class="hljs-string">&#x27;&lt;color&gt;&#x27;</span>;<br>  inherits: true;<br>  initial-value: <span class="hljs-number">#ffffff</span>;<br>&#125;<br><br><span class="hljs-comment">/* 现在你可以为这些属性添加动画了！ */</span><br><span class="hljs-selector-class">.gradient-background</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<br>    <span class="hljs-number">90deg</span>,<br>    blue <span class="hljs-built_in">var</span>(--gradient-stop),<br>    red <span class="hljs-built_in">var</span>(--gradient-stop)<br>  );<br>  <span class="hljs-attribute">transition</span>: --gradient-stop <span class="hljs-number">0.3s</span> ease;<br>&#125;<br><br><span class="hljs-selector-class">.gradient-background</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attr">--gradient-stop</span>: <span class="hljs-number">75%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="starting-style：为隐藏元素打造更好的动画"><a href="#starting-style：为隐藏元素打造更好的动画" class="headerlink" title="@starting-style：为隐藏元素打造更好的动画"></a><code>@starting-style</code>：为隐藏元素打造更好的动画</h2><blockquote><p>之前我们初始化动画  <code>display:none</code> 实现， 曾经是开发者永恒的痛点之一。现在我们可以使用 <code>@starting-type</code> 规则优雅地解决这个问题。</p></blockquote><p>举例子：模态对话框，它从顶部进入屏幕。以前，为了获得流畅的动画，你必须在 <code>JavaScript</code> 或 <code>CSS</code> 中进行大量的复杂操作。元素要么突然出现，要么需要额外的包装元素和状态来进行过渡。</p><p>使用 <code>@starting-style</code>，你可以设置元素加载并准备使用时的样式，以便从隐藏状态过渡平滑无缝。这使得 <code>UI</code> 更精细，但代码更少。浏览器负责处理动画的编程以及页面外观和行为方式的所有问题。</p><p>这个特性在构建适合残疾人士使用的应用程序界面方面尤其有用。这些过渡修复能够被屏幕阅读器和辅助技术理解，从而提高网站的可访问性，同时还能以视觉上更具吸引力的方式呈现它们。它提供以下功能：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 模态对话框示例 */</span><br><span class="hljs-selector-class">.modal</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.3s</span> ease, opacity <span class="hljs-number">0.3s</span> ease;<br>&#125;<br><br><span class="hljs-keyword">@starting-style</span> &#123;<br>  <span class="hljs-selector-class">.modal</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">20px</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* 显示模态框时 */</span><br><span class="hljs-selector-class">.modal</span><span class="hljs-selector-class">.show</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br><br><span class="hljs-comment">/* 下拉菜单示例 */</span><br><span class="hljs-selector-class">.dropdown-menu</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleY</span>(<span class="hljs-number">1</span>);<br>  <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.2s</span> ease;<br>&#125;<br><br><span class="hljs-keyword">@starting-style</span> &#123;<br>  <span class="hljs-selector-class">.dropdown-menu</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleY</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.dropdown-menu</span><span class="hljs-selector-class">.open</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="增强的数学函数：CSS-变得更强大"><a href="#增强的数学函数：CSS-变得更强大" class="headerlink" title="增强的数学函数：CSS 变得更强大"></a>增强的数学函数：<code>CSS</code> 变得更强大</h2><blockquote><p>增加函数功能。</p></blockquote><p>这些函数意味着在普通的 <code>HTML</code> 中，通常可以省略预处理器或 <code>JavaScript</code>，尽管当然在许多情况下预处理器仍然有用。例如，使用原生数学函数可以更容易地管理诸如计算网格列宽度或设计响应式间距系统等任务。有了它，你就可以在 <code>CSS</code> 中进行复杂的数学运算。</p><p><code>round</code> 类型（<code>floor</code>、<code>ceiling</code>、<code>trunk</code>）的存在允许设计以前似乎不可能实现的改进布局精度。在任何情况下，当你处理网格系统或难以用预设的基于像素的宽度管理的内容时，这些函数都能提供你所需的控制，而无需离开你的样式表。新的数学函数证明了这一点：</p><ul><li>round()： 选择不同的入舍策略（向下取整、向上取整、截断）</li><li>rem()：余数运算</li><li>mod()：模运算， 类似于 <code>JavaScript</code></li></ul><p>上面这些函数为以下这些方面提供了新的特性：</p><ul><li>动态布局</li><li>响应式设计计算</li><li>复杂的动画</li><li>网格系统</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 网格列计算 */</span><br><span class="hljs-selector-class">.grid</span> &#123;<br>  <span class="hljs-attr">--columns</span>: <span class="hljs-number">3</span>;<br>  <span class="hljs-attr">--gap</span>: <span class="hljs-number">20px</span>;<br><br>  <span class="hljs-attribute">display</span>: grid;<br>  <span class="hljs-attribute">gap</span>: <span class="hljs-built_in">var</span>(--gap);<br>  <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(<br>    <span class="hljs-built_in">var</span>(--columns),<br>    <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> / <span class="hljs-built_in">var</span>(--columns) - <span class="hljs-built_in">round</span>(<span class="hljs-built_in">var</span>(--gap) * (<span class="hljs-built_in">var</span>(--columns) - <span class="hljs-number">1</span>) / <span class="hljs-built_in">var</span>(--columns)))<br>  );<br>&#125;<br><br><span class="hljs-comment">/* 使用 mod 实现交替样式 */</span><br><span class="hljs-selector-class">.list-item</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-built_in">mod</span>(<span class="hljs-built_in">var</span>(--index), <span class="hljs-number">2</span>) * <span class="hljs-number">1rem</span>;<br>&#125;<br><br><span class="hljs-comment">/* 舍入示例 */</span><br><span class="hljs-selector-class">.element</span> &#123;<br>  <span class="hljs-comment">/* 四舍五入到最接近的整数 */</span><br>  <span class="hljs-attribute">width</span>: <span class="hljs-built_in">round</span>(<span class="hljs-built_in">calc</span>(<span class="hljs-number">100vw</span> / <span class="hljs-number">3</span>));<br><br>  <span class="hljs-comment">/* 向下取整 */</span><br>  <span class="hljs-attribute">height</span>: <span class="hljs-built_in">round</span>(down, <span class="hljs-built_in">calc</span>(<span class="hljs-number">100vh</span> / <span class="hljs-number">4</span>));<br><br>  <span class="hljs-comment">/* 向上取整 */</span><br>  <span class="hljs-attribute">margin</span>: <span class="hljs-built_in">round</span>(up, <span class="hljs-built_in">calc</span>(<span class="hljs-number">2.1rem</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用-light-dark-简化明-暗模式"><a href="#使用-light-dark-简化明-暗模式" class="headerlink" title="使用 light-dark() 简化明&#x2F;暗模式"></a>使用 <code>light-dark()</code> 简化明&#x2F;暗模式</h2><p>管理明暗模式一直是一件比较麻烦的事情。新的 <code>light-dark()</code> 特性极大地简化了这个过程。</p><p>在真正的暗模式概念出现之前，只有两种创建它的方法，第一种是使用两种 <code>CSS</code> 样式，另一种是使用具有媒体查询的 <code>CSS</code> 变量。上述方法导致代码重复，从而导致代码重复和更高的维护成本。<code>HTML5</code> 的新 <code>light-dark()</code> 函数简化了同时设置这两者的过程。</p><p>此特性还增强了浏览器的性能，因为浏览器能够修改主题之间切换的性质。无需加载样式表或等待 <code>JavaScript</code> 更改那些变量，它根本不需要。它是无缝的并且快速发生，从而为用户提供比标准方法更好的体验。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 旧方法 */</span><br><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--bg-color</span>: white;<br>  <span class="hljs-attr">--text-color</span>: black;<br>&#125;<br><br><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">prefers-color-scheme</span>: dark) &#123;<br>  <span class="hljs-selector-pseudo">:root</span> &#123;<br>    <span class="hljs-attr">--bg-color</span>: black;<br>    <span class="hljs-attr">--text-color</span>: white;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* 使用 light-dark() 的新方法 */</span><br><span class="hljs-selector-class">.element</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">light-dark</span>(<span class="hljs-number">#ffffff</span>, <span class="hljs-number">#121212</span>);<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">light-dark</span>(<span class="hljs-number">#121212</span>, <span class="hljs-number">#ffffff</span>);<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">light-dark</span>(<span class="hljs-number">#ddd</span>, <span class="hljs-number">#333</span>);<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">4px</span> <span class="hljs-built_in">light-dark</span>(<span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.1</span>), <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.4</span>));<br>&#125;<br><br><span class="hljs-comment">/* 与 CSS 变量结合使用 */</span><br><span class="hljs-selector-class">.button</span> &#123;<br>  <span class="hljs-attr">--button-bg</span>: <span class="hljs-built_in">light-dark</span>(<span class="hljs-number">#007bff</span>, <span class="hljs-number">#0056b3</span>);<br>  <span class="hljs-attr">--button-text</span>: <span class="hljs-built_in">light-dark</span>(white, <span class="hljs-number">#e1e1e1</span>);<br><br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">var</span>(--button-bg);<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--button-text);<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.5rem</span> <span class="hljs-number">1rem</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用用户伪类增强表单验证"><a href="#使用用户伪类增强表单验证" class="headerlink" title="使用用户伪类增强表单验证"></a>使用用户伪类增强表单验证</h2><p>!()[<a href="https://mmbiz.qpic.cn/sz_mmbiz_jpg/HLN2IKtpicicE6uqDgA0bpTyoibQvsjdeecvBrlmTGgTCDXMK0HNpknLyagPmN4icgXOj2FCM6wicCDLgg35Gvhxovw/640?wx_fmt=jpeg&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1%5D">https://mmbiz.qpic.cn/sz_mmbiz_jpg/HLN2IKtpicicE6uqDgA0bpTyoibQvsjdeecvBrlmTGgTCDXMK0HNpknLyagPmN4icgXOj2FCM6wicCDLgg35Gvhxovw/640?wx_fmt=jpeg&amp;from=appmsg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1]</a></p><p>借助 <code>:user-valid</code> 和 <code>:user-invalid</code> 伪类的引入，表单验证变得更加用户友好。</p><p>登录表单，你需要仅在用户尝试提交表单或离开输入字段时显示错误消息。以前，这只能通过使用 <code>Javascript</code> 事件监听器或复杂的 <code>CSS hacks</code> 来实现。新的伪类自然地实现了这一点，增强了页面的可用性，而无需额外的代码。</p><p>此特性还方便了访问；很容易。以前，表单验证状态对于某些屏幕阅读器来说难以识别，而现在它们更改表单的方式对每个人都更有用。显示错误消息的时间变得更有逻辑，表单未完成的实例减少了。这些新特性：</p><ul><li>仅在用户交互后触发</li><li>防止过早显示错误消息</li><li>改善用户体验</li><li>降低代码复杂度</li></ul><p>这比传统的 <code>:valid</code> 和 <code>:invalid</code> 伪类有了显著的改进，传统的伪类会立即触发，通常会导致糟糕的用户体验。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 基本输入样式 */</span><br><span class="hljs-selector-class">.input-field</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#ccc</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.5rem</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>&#125;<br><br><span class="hljs-comment">/* 旧方法——立即显示 */</span><br><span class="hljs-selector-class">.input-field</span><span class="hljs-selector-pseudo">:invalid</span> &#123;<br>  <span class="hljs-attribute">border-color</span>: red;<br>&#125;<br><br><span class="hljs-comment">/* 新方法——仅在用户交互后显示 */</span><br><span class="hljs-selector-class">.input-field</span><span class="hljs-selector-pseudo">:user-invalid</span> &#123;<br>  <span class="hljs-attribute">border-color</span>: red;<br>  <span class="hljs-attribute">animation</span>: shake <span class="hljs-number">0.3s</span> ease-in-out;<br>&#125;<br><br><span class="hljs-selector-class">.input-field</span>:user-valid &#123;<br>  <span class="hljs-attribute">border-color</span>: green;<br>&#125;<br><br><span class="hljs-comment">/* 错误消息样式 */</span><br><span class="hljs-selector-class">.error-message</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.875rem</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0.25rem</span>;<br>&#125;<br><br><span class="hljs-selector-class">.input-field</span><span class="hljs-selector-pseudo">:user-invalid</span> + <span class="hljs-selector-class">.error-message</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>&#125;<br><br><span class="hljs-comment">/* 成功样式 */</span><br><span class="hljs-selector-class">.success-icon</span> &#123;<br>  <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.input-field</span>:user-valid ~ .success-icon &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> shake &#123;<br>  <span class="hljs-number">0%</span>, <span class="hljs-number">100%</span> &#123; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0</span>); &#125;<br>  <span class="hljs-number">25%</span> &#123; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">5px</span>); &#125;<br>  <span class="hljs-number">75%</span> &#123; <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">5px</span>); &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="interpolate-size：为自动高度实现流畅动画"><a href="#interpolate-size：为自动高度实现流畅动画" class="headerlink" title="interpolate-size：为自动高度实现流畅动画"></a><code>interpolate-size</code>：为自动高度实现流畅动画</h2><p>一个手风琴组件在展开时添加了内容。在此特性之前，动画高度的唯一方法是具有挑战性的，尤其是在处理动态内容时。主要问题在于开发者如何依赖 JavaScript 解决方案，或者使用固定高度动画，当内容较长时，这些动画就会停止工作。</p><p>因此，<code>interpolate-size</code> 属性可以轻松应对这些情况。浏览器会平滑地确定动画的正确路径，从而使过渡无缝，而不管内容的大小如何。即使你没有定义最终高度，它也能正常工作，这使得它更适合用于动态内容区域。现在你可以：</p><ul><li>平滑地动画化 height: auto</li><li>创建流畅的下拉菜单动画</li><li>优雅地处理动态内容变化</li><li>实现更平滑的 UI 过渡</li></ul><p>这个特性特别适用于：</p><ul><li>下拉菜单</li><li>可展开部分</li><li>手风琴组件</li><li>动态内容区域</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 手风琴示例 */</span><br><span class="hljs-selector-class">.accordion</span> &#123;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><br><span class="hljs-selector-class">.accordion-content</span> &#123;<br>  <span class="hljs-attribute">height</span>: auto;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1rem</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f5f5f5</span>;<br>  interpolate-size: allow;<br>  <span class="hljs-attribute">transition</span>: height <span class="hljs-number">0.3s</span> ease;<br>&#125;<br><br><span class="hljs-selector-class">.accordion-content</span><span class="hljs-selector-class">.closed</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">1rem</span>;<br>&#125;<br><br><span class="hljs-comment">/* 下拉菜单示例 */</span><br><span class="hljs-selector-class">.dropdown</span> &#123;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><br><span class="hljs-selector-class">.dropdown-menu</span> &#123;<br>  <span class="hljs-attribute">height</span>: auto;<br>  interpolate-size: allow;<br>  <span class="hljs-attribute">transition</span>: height <span class="hljs-number">0.3s</span> ease;<br>&#125;<br><br><span class="hljs-selector-class">.dropdown-menu</span><span class="hljs-selector-class">.collapsed</span> &#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 卡片展开示例 */</span><br><span class="hljs-selector-class">.card</span> &#123;<br>  interpolate-size: allow;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.3s</span> ease;<br>&#125;<br><br><span class="hljs-selector-class">.card</span><span class="hljs-selector-class">.expanded</span> &#123;<br>  <span class="hljs-attribute">height</span>: auto;<br>  <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">2rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flutter之image_picker上传图片</title>
    <link href="/flutter%E4%B9%8Bimge_pikcer/"/>
    <url>/flutter%E4%B9%8Bimge_pikcer/</url>
    
    <content type="html"><![CDATA[<h2 id="image-picker"><a href="#image-picker" class="headerlink" title="image_picker"></a>image_picker</h2><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">image_picker:</span> <span class="hljs-string">^1.1.2</span><br></code></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><blockquote><p>我们获取到上传的照片后，将其转为<code>base64</code>编码的格式，方便后续使用</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// source： 接收两种模式，相册和拍照</span><br><span class="hljs-keyword">final</span> pickedImage =<br>    <span class="hljs-keyword">await</span> ImagePicker().pickImage(source: ImageSource.gallery);<br><span class="hljs-keyword">if</span> (pickedImage != <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-comment">// 照片路径， path地址</span><br>    File file = File(pickedImage.path);<br>    <span class="hljs-comment">// 将上传的照片改为base64编码</span><br>    Uint8List imageBytes = <span class="hljs-keyword">await</span> file!.readAsBytes();<br>    <span class="hljs-built_in">String</span> base64 = base64Encode(imageBytes);<br>    <span class="hljs-built_in">String</span> base64Image = <span class="hljs-string">&quot;data:image/png;base64;&quot;</span> + base64;<br>    <span class="hljs-keyword">return</span> base64Image;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flutter返回PopScope</title>
    <link href="/flutter%E4%B9%8BPopScope/"/>
    <url>/flutter%E4%B9%8BPopScope/</url>
    
    <content type="html"><![CDATA[<h2 id="PopScope-物理按键，返回退出应用程序"><a href="#PopScope-物理按键，返回退出应用程序" class="headerlink" title="PopScope 物理按键，返回退出应用程序"></a>PopScope 物理按键，返回退出应用程序</h2><blockquote><p>判断是否连续点击返回按键，<code>android</code> 对应的实体返回按钮或者虚拟返回按钮，使用需要将 <code>PopScope</code> 写在页面的最顶层（这点注意📢）。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 连续返回，退出应用程序</span><br>  <span class="hljs-built_in">DateTime?</span> currentBackPressTime;<br>  <span class="hljs-built_in">bool</span> closeOnConfirm() &#123;<br>    <span class="hljs-built_in">DateTime</span> now = <span class="hljs-built_in">DateTime</span>.now();<br>    <span class="hljs-comment">// 物理键，两次间隔大于4秒, 退出请求无效</span><br>    <span class="hljs-keyword">if</span> (currentBackPressTime == <span class="hljs-keyword">null</span> ||<br>        now.difference(currentBackPressTime!) &gt; <span class="hljs-keyword">const</span> <span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">4</span>)) &#123;<br>      currentBackPressTime = now;<br>      ScaffoldMessenger.of(context).showSnackBar(<br>        <span class="hljs-keyword">const</span> SnackBar(<br>          behavior: SnackBarBehavior.floating,<br>          content: Center(child: Text(<span class="hljs-string">&#x27;再次按下以关闭应用程序&#x27;</span>)),<br>          duration: <span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">4</span>),<br>        ),<br>      );<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>    <span class="hljs-comment">// 清除时间戳</span><br>    currentBackPressTime = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 配置 PopScope</span><br><span class="hljs-keyword">return</span> PopScope(<br>        <span class="hljs-comment">// 关闭系统返回</span><br>        canPop: <span class="hljs-keyword">false</span>,<br>        onPopInvoked: (didPop) <span class="hljs-keyword">async</span> &#123;<br>          <span class="hljs-keyword">if</span> (didPop) &#123;<br>            <span class="hljs-keyword">return</span>;<br>          &#125;<br>          <span class="hljs-keyword">if</span> (closeOnConfirm()) &#123;<br>            <span class="hljs-comment">// 退出应用程序，关闭app</span><br>            SystemNavigator.pop();<br>          &#125;<br>        &#125;,<br>        child: Scaffold(<br>          appBar: AppBar(<br>            title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;手机号快捷登录&quot;</span>,<br>                style: TextStyle(<br>                    color: fontColor,<br>                    fontWeight: appBarTitleFontWeight,<br>                    fontSize: textTitleSize)),<br>          ),<br>          body: <span class="hljs-keyword">const</span> Center(<br>            child: Text(<span class="hljs-string">&quot;手机号快捷登录&quot;</span>),<br>          ),<br>        ));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flutter路由之flutro</title>
    <link href="/flutter%E8%B7%AF%E7%94%B1%E4%B9%8Bfluro/"/>
    <url>/flutter%E8%B7%AF%E7%94%B1%E4%B9%8Bfluro/</url>
    
    <content type="html"><![CDATA[<h2 id="flutter路由之flutro"><a href="#flutter路由之flutro" class="headerlink" title="flutter路由之flutro"></a>flutter路由之flutro</h2><blockquote><p>我这里使用的是<code>fluro</code>作为路由框架，下面是配置步骤。</p></blockquote><h4 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 版本为 2.0.5</span><br><span class="hljs-attr">fluro:</span> <span class="hljs-string">^2.0.5</span><br></code></pre></td></tr></table></figure><h4 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h4><blockquote><p>在项目中新建 <code>routes</code> 文件夹，分别下面新建以下文件。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// application.dart</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:fluro/fluro.dart&#x27;</span>;<br><br><span class="hljs-comment">// 创建 fluro 实例，用于处理后续的逻辑</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">late</span> <span class="hljs-keyword">final</span> FluroRouter router;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// routes.dart</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:fluro/fluro.dart&#x27;</span>;<br><br><span class="hljs-comment">// 需要配置的页面</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:test_drive/pages/home.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:test_drive/pages/mine.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:test_drive/pages/listview.dart&#x27;</span>;<br><br><span class="hljs-comment">// 页面实例，可以配置传参</span><br><span class="hljs-keyword">var</span> _homeHandler = Handler(<br>    handlerFunc: (BuildContext? context, <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">String</span>&gt;&gt; params) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">const</span> HomaPage();<br>&#125;);<br><span class="hljs-keyword">var</span> _mineHandler = Handler(<br>    handlerFunc: (BuildContext? context, <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">String</span>&gt;&gt; params) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">const</span> MinePage();<br>&#125;);<br><br><span class="hljs-keyword">var</span> _listviewHandler = Handler(<br>    handlerFunc: (BuildContext? context, <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">String</span>&gt;&gt; params) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">const</span> ListViewPage();<br>&#125;);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Routes</span> </span>&#123;<br><br>  <span class="hljs-comment">// 页面路由地址，后面会使用到（路由跳转）</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> home = <span class="hljs-string">&#x27;/&#x27;</span>;<br>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> mine = <span class="hljs-string">&#x27;/mine&#x27;</span>;<br>  <span class="hljs-keyword">static</span> <span class="hljs-built_in">String</span> listview = <span class="hljs-string">&#x27;/listview&#x27;</span>;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> configureRoutes(FluroRouter router) &#123;<br>    router.notFoundHandler = Handler(<br>        handlerFunc: (BuildContext? context, <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">String</span>&gt;&gt; params) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;);<br><br>    <span class="hljs-comment">// 生成配置实例</span><br>    router.define(home, handler: _homeHandler);<br>    router.define(mine, handler: _mineHandler);<br>    router.define(listview, handler: _listviewHandler);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>上面的配置做好以后，我们再项目入口函数 <code>main.dart</code> 里面，进行如下配置</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// main.dart</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:fluro/fluro.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:test_drive/routes/application.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:test_drive/routes/navigator_util.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:test_drive/routes/routes.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(<span class="hljs-keyword">const</span> MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;MyApp&gt; createState() =&gt; _MyAppState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyAppState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyApp</span>&gt; </span>&#123;<br>  <span class="hljs-comment">// 挂载路由</span><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br>    <span class="hljs-keyword">final</span> router = FluroRouter();<br>    Application.router = router;<br>    Routes.configureRoutes(router);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">final</span> app = MaterialApp(<br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      theme: ThemeData(<br>        primarySwatch: Colors.amber,<br>      ),<br>      onGenerateRoute: Application.router.generator, <span class="hljs-comment">//全局注册</span><br>      navigatorKey: navigatorKey,<br>    );<br>    <span class="hljs-keyword">return</span> app;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>新增 <code>navigator_util.dart</code> 工具类</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:fluro/fluro.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:test_drive/routes/application.dart&#x27;</span>;<br><br><span class="hljs-keyword">final</span> GlobalKey&lt;NavigatorState&gt; navigatorKey = GlobalKey&lt;NavigatorState&gt;();<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NavigatorUtil</span> </span>&#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> push(<br>    <span class="hljs-built_in">String</span> path, &#123;<br>    <span class="hljs-built_in">bool</span> replace = <span class="hljs-keyword">false</span>, <span class="hljs-comment">// 替换当前页面</span><br>    <span class="hljs-built_in">bool</span> clearStack = <span class="hljs-keyword">false</span>, <span class="hljs-comment">// 是否清空路由栈</span><br>    <span class="hljs-built_in">Object?</span> arguments,<br>    TransitionType? transition, <span class="hljs-comment">// 页面进入动效</span><br>  &#125;) &#123;<br>    Application.router.navigateTo(<br>      navigatorKey.currentContext!,<br>      path,<br>      replace: replace,<br>      clearStack: clearStack,<br>      transition: transition ?? TransitionType.native,<br>      routeSettings: RouteSettings(<br>        arguments: arguments,<br>      ),<br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> replase(<span class="hljs-built_in">String</span> path,<br>      &#123;<span class="hljs-built_in">bool</span> replase = <span class="hljs-keyword">true</span>, <span class="hljs-built_in">bool</span> clearStack = <span class="hljs-keyword">false</span>, <span class="hljs-built_in">Object?</span> arguments&#125;) &#123;<br>    Application.router.navigateTo(navigatorKey.currentContext!, path,<br>        replace: replase,<br>        clearStack: clearStack,<br>        transition: TransitionType.native,<br>        routeSettings: RouteSettings(arguments: arguments));<br>  &#125;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> switchTab(<span class="hljs-built_in">String</span> path,<br>      &#123;<span class="hljs-built_in">bool</span> replase = <span class="hljs-keyword">true</span>, <span class="hljs-built_in">bool</span> clearStack = <span class="hljs-keyword">true</span>, <span class="hljs-built_in">Object?</span> arguments&#125;) &#123;<br>    Application.router.navigateTo(navigatorKey.currentContext!, path,<br>        replace: replase,<br>        clearStack: clearStack,<br>        transition: TransitionType.native,<br>        routeSettings: RouteSettings(arguments: arguments));<br>  &#125;<br><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> back(&#123;<span class="hljs-built_in">int</span> count = <span class="hljs-number">1</span>, <span class="hljs-built_in">Object?</span> params&#125;) &#123;<br>    NavigatorState state = Navigator.of(navigatorKey.currentContext!);<br>    <span class="hljs-keyword">while</span> (count-- &gt; <span class="hljs-number">0</span>) &#123;<br>      state = state..pop(params);<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在页面中使用, 示例如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart">ElevatedButton.icon(<br>    onPressed: () &#123;<br>        NavigatorUtil.push(<span class="hljs-string">&quot;/listview&quot;</span>); <span class="hljs-comment">// 需要跳转的页面</span><br>    &#125;,<br>    label: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;列表加载&quot;</span>),<br>    icon: <span class="hljs-keyword">const</span> Icon(Icons.nat_outlined),<br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flutter之SingleChildScrollView</title>
    <link href="/flutter%20SingleChildScrollView/"/>
    <url>/flutter%20SingleChildScrollView/</url>
    
    <content type="html"><![CDATA[<h3 id="SingleChildScrollView"><a href="#SingleChildScrollView" class="headerlink" title="SingleChildScrollView"></a>SingleChildScrollView</h3><blockquote><p>SingleChildScrollView类似于Android中的ScrollView，它只能接收一个子组件，定义如下：</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart">SingleChildScrollView(&#123;<br>  <span class="hljs-keyword">this</span>.scrollDirection = Axis.vertical, <span class="hljs-comment">//滚动方向，默认是垂直方向</span><br>  <span class="hljs-keyword">this</span>.reverse = <span class="hljs-keyword">false</span>, <br>  <span class="hljs-keyword">this</span>.padding, <br>  <span class="hljs-built_in">bool</span> primary, <br>  <span class="hljs-keyword">this</span>.physics, <br>  <span class="hljs-keyword">this</span>.controller,<br>  <span class="hljs-keyword">this</span>.child,<br>&#125;)<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context) &#123;<br>    <span class="hljs-built_in">String</span> str = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br>    <span class="hljs-keyword">return</span> Scrollbar(<br>        child: SingleChildScrollView(<br>      padding: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">16.0</span>),<br>      child: Center(<br>        child: Column(<br>          children: str<br>              .split(<span class="hljs-string">&quot;&quot;</span>)<br>              .map((c) =&gt; Text(<br>                    c,<br>                    textScaleFactor: <span class="hljs-number">2.0</span>,<br>                  ))<br>              .toList(),<br>        ),<br>      ),<br>    ));<br>  &#125;<br></code></pre></td></tr></table></figure><p><img src="https://book.flutterchina.club/assets/img/6-2.a5c8558b.png"></p>]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flutter之ListView</title>
    <link href="/flutter%E4%B9%8BListView/"/>
    <url>/flutter%E4%B9%8BListView/</url>
    
    <content type="html"><![CDATA[<h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><blockquote><p>默认构造函数</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dart">ListView(&#123;<br>  <span class="hljs-comment">//可滚动widget公共参数</span><br>  Axis scrollDirection = Axis.vertical,<br>  <span class="hljs-built_in">bool</span> reverse = <span class="hljs-keyword">false</span>,<br>  ScrollController? controller,<br>  <span class="hljs-built_in">bool?</span> primary,<br>  ScrollPhysics? physics,<br>  EdgeInsetsGeometry? padding,<br>  <br>  <span class="hljs-comment">//ListView各个构造函数的共同参数  </span><br>  <span class="hljs-built_in">double?</span> itemExtent,<br>  Widget? prototypeItem, <span class="hljs-comment">//列表项原型，后面解释</span><br>  <span class="hljs-built_in">bool</span> shrinkWrap = <span class="hljs-keyword">false</span>,<br>  <span class="hljs-built_in">bool</span> addAutomaticKeepAlives = <span class="hljs-keyword">true</span>,<br>  <span class="hljs-built_in">bool</span> addRepaintBoundaries = <span class="hljs-keyword">true</span>,<br>  <span class="hljs-built_in">double?</span> cacheExtent, <span class="hljs-comment">// 预渲染区域长度</span><br>    <br>  <span class="hljs-comment">//子widget列表</span><br>  <span class="hljs-built_in">List</span>&lt;Widget&gt; children = <span class="hljs-keyword">const</span> &lt;Widget&gt;[],<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="ListView-builder"><a href="#ListView-builder" class="headerlink" title="ListView.builder"></a>ListView.builder</h4><blockquote><p>ListView.builder适合列表项比较多或者列表项不确定的情况，下面看一下ListView.builder的核心参数列表:</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart">ListView.builder(<br>  itemCount: <span class="hljs-number">100</span>,<br>  itemExtent: <span class="hljs-number">50.0</span>, <span class="hljs-comment">//强制高度为50.0</span><br>  itemBuilder: (BuildContext context, <span class="hljs-built_in">int</span> index) &#123;<br>    <span class="hljs-keyword">return</span> ListTile(title: Text(<span class="hljs-string">&quot;<span class="hljs-subst">$index</span>&quot;</span>));<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h4 id="ListView-separated"><a href="#ListView-separated" class="headerlink" title="ListView.separated"></a>ListView.separated</h4><blockquote><p>ListView.separated可以在生成的列表项之间添加一个分割组件，它比ListView.builder多了一个separatorBuilder参数，该参数是一个分割组件生成器。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context) &#123;<br>    <span class="hljs-comment">//下划线widget预定义以供复用。</span><br>    Widget divider1 = <span class="hljs-keyword">const</span> Divider(<br>      color: Colors.blue,<br>    );<br>    Widget divider2 = <span class="hljs-keyword">const</span> Divider(color: Colors.green);<br>    <span class="hljs-keyword">return</span> ListView.separated(<br>        itemBuilder: (BuildContext context, <span class="hljs-built_in">int</span> index) &#123;<br>          <span class="hljs-keyword">return</span> ListTile(title: Text(<span class="hljs-string">&quot;<span class="hljs-subst">$index</span>&quot;</span>));<br>        &#125;,<br>        separatorBuilder: (BuildContext context, <span class="hljs-built_in">int</span> index) &#123;<br>          <span class="hljs-keyword">return</span> index % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> ? divider1 : divider2;<br>        &#125;,<br>        itemCount: <span class="hljs-number">100</span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flutter常用布局方式</title>
    <link href="/flutter%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/"/>
    <url>/flutter%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="flutter-常用布局方式"><a href="#flutter-常用布局方式" class="headerlink" title="flutter 常用布局方式"></a>flutter 常用布局方式</h2><h3 id="基于-RenderBox-的盒模型布局"><a href="#基于-RenderBox-的盒模型布局" class="headerlink" title="基于 RenderBox 的盒模型布局"></a>基于 RenderBox 的盒模型布局</h3><blockquote><p>BoxConstraints 是盒模型布局过程中父渲染对象传递给子渲染对象的约束信息，包含最大宽高信息，子组件大小需要在约束的范围内，BoxConstraints 默认的构造函数如下:</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> BoxConstraints(&#123;<br>  <span class="hljs-keyword">this</span>.minWidth = <span class="hljs-number">0.0</span>, <span class="hljs-comment">//最小宽度</span><br>  <span class="hljs-keyword">this</span>.maxWidth = <span class="hljs-built_in">double</span>.infinity, <span class="hljs-comment">//最大宽度</span><br>  <span class="hljs-keyword">this</span>.minHeight = <span class="hljs-number">0.0</span>, <span class="hljs-comment">//最小高度</span><br>  <span class="hljs-keyword">this</span>.maxHeight = <span class="hljs-built_in">double</span>.infinity <span class="hljs-comment">//最大高度</span><br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>SizedBox</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart">SizedBox(<br>  width: <span class="hljs-number">80.0</span>,<br>  height: <span class="hljs-number">80.0</span>,<br>  child: redBox<br>)<br></code></pre></td></tr></table></figure><blockquote><p>实际上SizedBox只是ConstrainedBox的一个定制，上面代码等价于。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">ConstrainedBox(<br>  constraints: BoxConstraints.tightFor(width: <span class="hljs-number">80.0</span>,height: <span class="hljs-number">80.0</span>),<br>  child: redBox, <br>)<br></code></pre></td></tr></table></figure><h3 id="基于-Sliver-RenderSliver-按需加载列表布局"><a href="#基于-Sliver-RenderSliver-按需加载列表布局" class="headerlink" title="基于 Sliver ( RenderSliver ) 按需加载列表布局"></a>基于 Sliver ( RenderSliver ) 按需加载列表布局</h3><p>具体布局过程：</p><ol><li>Scrollable 监听到用户滑动行为后，根据最新的滑动偏移构建 Viewport 。</li><li>Viewport 将当前视口信息和配置信息通过 SliverConstraints 传递给 Sliver。</li><li>Sliver 中对子组件（RenderBox）按需进行构建和布局，然后确认自身的位置、绘制等信息，保存在 geometry 中（一个 SliverGeometry 类型的对象）。</li></ol><p>比如有一个 ListView，大小撑满屏幕，假设它有 100 个列表项（都是RenderBox）且每个列表项高度相同，结构如图6-1所示：</p><p><img src="https://book.flutterchina.club/assets/img/6-1.7d0c763e.png"></p><p>图中白色区域为设备屏幕，也是 Scrollable 、 Viewport 和 Sliver 所占用的空间，三者所占用的空间重合，父子关系为：Sliver 父组件为 Viewport，Viewport的 父组件为 Scrollable 。注意ListView 中只有一个 Sliver，在 Sliver 中实现了子组件（列表项）的按需加载和布局。</p><p>其中顶部和底部灰色的区域为 cacheExtent，它表示预渲染的高度，需要注意这是在可视区域之外，如果 RenderBox 进入这个区域内，即使它还未显示在屏幕上，也是要先进行构建的，预渲染是为了后面进入 Viewport 的时候更丝滑。cacheExtent 的默认值是 250，在构建可滚动列表时我们可以指定这个值，这个值最终会传给 Viewport。</p>]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flutter常用widget</title>
    <link href="/flutter%E5%B8%B8%E7%94%A8widget/"/>
    <url>/flutter%E5%B8%B8%E7%94%A8widget/</url>
    
    <content type="html"><![CDATA[<h3 id="flutter-开发中常用的-Widget-组件"><a href="#flutter-开发中常用的-Widget-组件" class="headerlink" title="flutter 开发中常用的 Widget 组件"></a>flutter 开发中常用的 Widget 组件</h3><h4 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h4><ul><li>width 宽度</li><li>height 高度</li><li>margin 设置外间距</li><li>padding 设置内间距</li><li>alignment 对其方式</li><li>decoration Decoration 对 Container 进行修饰<ul><li>gradient 渐变</li><li>boxShadow 阴影</li></ul></li><li>transform 设置形变</li><li>constraints 设置 Contianer 最大、最小宽高</li><li>color 背景颜色</li><li>child 子组件</li></ul><blockquote><p>注意，这里不能同时设置 <code>Color</code> 和 <code>decoration</code> 中的渐变，否则会报错</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs dart">Container(<br>    <span class="hljs-comment">// 设置宽</span><br>    width: <span class="hljs-number">100</span>,<br>    <span class="hljs-comment">// 设置 外间距</span><br>    margin: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">9</span>),<br>    <span class="hljs-comment">// 设置 内间距</span><br>    padding: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">8</span>),<br>    <span class="hljs-comment">// 设置高</span><br>    height: <span class="hljs-number">100</span>,<br>    <span class="hljs-comment">// 设置对其方式</span><br>    alignment: Alignment.topLeft,<br>    <span class="hljs-comment">// 使用 Decoration 对 Container 进行修饰</span><br>    decoration: <span class="hljs-keyword">const</span> BoxDecoration(<br>        <span class="hljs-comment">// 渐变</span><br>        gradient: RadialGradient(<br>            <span class="hljs-comment">//背景径向渐变</span><br>            colors: [Colors.red, Colors.green],<br>            center: Alignment.topLeft,<br>            radius: <span class="hljs-number">.98</span>,<br>        ),<br>        <span class="hljs-comment">// 阴影</span><br>        boxShadow: [<br>            <span class="hljs-comment">//卡片阴影</span><br>            BoxShadow(<br>                color: Colors.black54,<br>                offset: Offset(<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>),<br>                blurRadius: <span class="hljs-number">4.0</span>,<br>            )<br>        ],<br>    ),<br>    <span class="hljs-comment">//卡片倾斜变换</span><br>    transform: Matrix4.rotationZ(<span class="hljs-number">.2</span>),<br>    <span class="hljs-comment">// 设置 Contianer 最大、最小宽高</span><br>    <span class="hljs-comment">// constraints: const BoxConstraints(maxWidth: 200, maxHeight: 200),</span><br>    <span class="hljs-comment">// Container 背景颜色</span><br>    <span class="hljs-comment">// color: Colors.green,</span><br>    child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;card&quot;</span>),<br>),<br></code></pre></td></tr></table></figure><h4 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h4><ul><li>textDirection 表示水平方向子组件的布局顺序(是从左往右还是从右往左)，默认为系统当前Locale环境的文本方向(如中文、英语都是从左往右，而阿拉伯语是从右往左)</li><li>mainAxisSize 表示Row在主轴(水平)方向占用的空间，默认是MainAxisSize.max</li><li>mainAxisAlignment 表示Row在主轴元素的对其方式</li><li>verticalDirection  表示Row纵轴（垂直）的对齐方向，默认是VerticalDirection.down，表示从上到下。</li><li>crossAxisAlignment 表示子组件在纵轴方向的对齐方式，Row的高度等于子组件中最高的子元素高度，它的取值和MainAxisAlignment一样(包含start、end、 center三个值)，不同的是crossAxisAlignment的参考系是verticalDirection，即verticalDirection值为VerticalDirection.down时crossAxisAlignment.start指顶部对齐，verticalDirection值为VerticalDirection.up时，crossAxisAlignment.start指底部对齐；而crossAxisAlignment.end和crossAxisAlignment.start正好相反；</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dart"> Row(<br>    <span class="hljs-comment">// 表示水平方向子组件的布局顺序(是从左往右还是从右往左)，默认为系统当前Locale环境的文本方向(如中文、英语都是从左往右，而阿拉伯语是从右往左)</span><br>    textDirection: TextDirection.ltr,<br>    <span class="hljs-comment">// 表示Row在主轴(水平)方向占用的空间，默认是MainAxisSize.max</span><br>    mainAxisSize: MainAxisSize.min,<br>    <span class="hljs-comment">// 表示Row在主轴元素的对其方式</span><br>    mainAxisAlignment: MainAxisAlignment.start,<br>    <span class="hljs-comment">// 表示Row纵轴（垂直）的对齐方向，默认是VerticalDirection.down，表示从上到下。</span><br>    verticalDirection: VerticalDirection.up,<br>    <span class="hljs-comment">// 表示子组件在纵轴方向的对齐方式，Row的高度等于子组件中最高的子元素高度，它的取值和MainAxisAlignment一样(包含start、end、 center三个值)，不同的是crossAxisAlignment的参考系是verticalDirection，即verticalDirection值为VerticalDirection.down时crossAxisAlignment.start指顶部对齐，verticalDirection值为VerticalDirection.up时，crossAxisAlignment.start指底部对齐；而crossAxisAlignment.end和crossAxisAlignment.start正好相反；</span><br>    crossAxisAlignment: CrossAxisAlignment.start,<br>    children: [<br>        Padding(<br>            padding: EdgeInsets.all(<span class="hljs-number">10</span>),<br>            child: Text(<span class="hljs-string">&quot;你好&quot;</span>),<br>        ),<br>        Padding(<br>            padding: EdgeInsets.all(<span class="hljs-number">5</span>),<br>            child: Text(<span class="hljs-string">&quot;HELLO&quot;</span>),<br>        )<br>    ],<br>),<br></code></pre></td></tr></table></figure><h4 id="Column"><a href="#Column" class="headerlink" title="Column"></a>Column</h4><ul><li>mainAxisAlignment Column对其方式</li><li>mainAxisSize Column元素占据空间 max, min</li><li>crossAxisAlignment 表示Column子组件在纵轴方向的对齐方式</li><li>verticalDirection 表示Column纵轴（垂直）的对齐方向，默认是VerticalDirection.down，表示从上到下。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart">Column(<br>    <span class="hljs-comment">// Column对其方式</span><br>    mainAxisAlignment: MainAxisAlignment.start,<br>    <span class="hljs-comment">// Column元素占据空间 max, min</span><br>    mainAxisSize: MainAxisSize.max,<br>    <span class="hljs-comment">// 表示Column子组件在纵轴方向的对齐方式</span><br>    crossAxisAlignment: CrossAxisAlignment.start,<br>    <span class="hljs-comment">// 表示Column纵轴（垂直）的对齐方向，默认是VerticalDirection.down，表示从上到下。</span><br>    verticalDirection: VerticalDirection.up,<br>    children: [Text(<span class="hljs-string">&#x27;你好&#x27;</span>), Text(<span class="hljs-string">&quot;世界&quot;</span>)],<br>)<br></code></pre></td></tr></table></figure><h4 id="SafeArea"><a href="#SafeArea" class="headerlink" title="SafeArea"></a>SafeArea</h4><blockquote><p>安全距，适配与齐刘海设备，防止顶部、底部内容区被遮盖</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart">SafeArea(<br>    child: Column(<br>    <span class="hljs-comment">// Column对其方式</span><br>    mainAxisAlignment: MainAxisAlignment.start,<br>    <span class="hljs-comment">// Column元素占据空间 max, min</span><br>    mainAxisSize: MainAxisSize.max,<br>    <span class="hljs-comment">// 表示Column子组件在纵轴方向的对齐方式</span><br>    crossAxisAlignment: CrossAxisAlignment.start,<br>    <span class="hljs-comment">// 表示Column纵轴（垂直）的对齐方向，默认是VerticalDirection.down，表示从上到下。</span><br>    verticalDirection: VerticalDirection.up,<br>    children: [Text(<span class="hljs-string">&#x27;你好&#x27;</span>), Text(<span class="hljs-string">&quot;世界&quot;</span>)],<br>));<br></code></pre></td></tr></table></figure><h4 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h4><blockquote><p><code>Flex</code> 布局，根据使用场景的不同，可以结合 <code>Row</code> 或者 <code>Column</code> 使用；<code>Expanded</code> 只能作为 Flex 的孩子（否则会报错）。</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs dart">Column(<br>    children: [<br>    <span class="hljs-keyword">const</span> Padding(padding: EdgeInsets.fromLTRB(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)),<br>    Flex(<br>        direction: Axis.horizontal,<br>        children: [<br>        Expanded(<br>            flex: <span class="hljs-number">1</span>,<br>            child: Container(<br>                decoration: <span class="hljs-keyword">const</span> BoxDecoration(color: Colors.red),<br>                alignment: Alignment.topLeft,<br>                child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;data1&quot;</span>),<br>            )),<br>        Expanded(<br>            flex: <span class="hljs-number">2</span>,<br>            child: Container(<br>            decoration: <span class="hljs-keyword">const</span> BoxDecoration(color: Colors.blue),<br>            child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;data2&quot;</span>),<br>            ),<br>        ),<br>        Expanded(<br>            flex: <span class="hljs-number">1</span>,<br>            child: Container(<br>            alignment: Alignment.topLeft,<br>            decoration: <span class="hljs-keyword">const</span> BoxDecoration(color: Colors.amberAccent),<br>            child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;data3&quot;</span>),<br>            ),<br>        )<br>        ],<br>    ),<br>    <span class="hljs-keyword">const</span> Padding(padding: EdgeInsets.fromLTRB(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)),<br>    Flex(<br>        direction: Axis.horizontal,<br>        children: [<br>        Expanded(<br>            flex: <span class="hljs-number">1</span>,<br>            child: Container(<br>            decoration: <span class="hljs-keyword">const</span> BoxDecoration(color: Colors.green),<br>            child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;flex 1&quot;</span>),<br>            ),<br>        )<br>        ],<br>    )<br>    ],<br>)<br></code></pre></td></tr></table></figure><h4 id="Wrap"><a href="#Wrap" class="headerlink" title="Wrap"></a>Wrap</h4><blockquote><p><code>Wrap</code>的作用在于，当子使用<code>Row</code>在进行横向或者使用<code>Column</code>进行纵向排列时，子节点过宽。会导致长度溢出，这时候使用<code>Wrap</code>很好的解决了此问题。  </p></blockquote><ul><li>spacing 主轴方向子widget的间距</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs dart">Wrap(<br>    direction: Axis.horizontal,<br>    alignment: WrapAlignment.center,<br>    <span class="hljs-comment">// 主轴方向子widget的间距</span><br>    spacing: <span class="hljs-number">20</span>,<br>    children: [<br>    Container(<br>        alignment: Alignment.topLeft,<br>        color: Colors.red,<br>        width: <span class="hljs-number">80</span>,<br>        height: <span class="hljs-number">80</span>,<br>        child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;data1&quot;</span>),<br>    ),<br>    Container(<br>        alignment: Alignment.topLeft,<br>        width: <span class="hljs-number">80</span>,<br>        height: <span class="hljs-number">80</span>,<br>        color: Colors.amberAccent,<br>        child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;data2&quot;</span>),<br>    ),<br>    Container(<br>        alignment: Alignment.topLeft,<br>        width: <span class="hljs-number">80</span>,<br>        height: <span class="hljs-number">80</span>,<br>        color: Colors.black38,<br>        child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;data3&quot;</span>),<br>    ),<br>    Container(<br>        alignment: Alignment.topLeft,<br>        width: <span class="hljs-number">80</span>,<br>        height: <span class="hljs-number">80</span>,<br>        color: Colors.blueGrey,<br>        child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;data4&quot;</span>),<br>    )<br>    ],<br>)<br></code></pre></td></tr></table></figure><h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h4><ul><li><p>ConstrainedBox</p><ul><li>constraints 铺满整个屏幕</li></ul></li><li><p>Stack</p><ul><li>alignment 此参数决定如何去对齐没有定位（没有使用Positioned）或部分定位的子组件。所谓部分定位，在这里特指没有在某一个轴上定位：left、right为横轴，top、bottom为纵轴，只要包含某个轴上的一个定位属性就算在该轴上有定位。</li><li>fit 此参数用于确定没有定位的子组件如何去适应Stack的大小。StackFit.loose表示使用子组件的大小，StackFit.expand表示扩伸到Stack的大小。</li><li>textDirection 和Row、Wrap的textDirection功能一样，都用于确定alignment对齐的参考系，即：textDirection的值为TextDirection.ltr，则alignment的start代表左，end代表右，即从左往右的顺序；textDirection的值为TextDirection.rtl，则alignment的start代表右，end代表左，即从右往左的顺序。</li></ul></li><li><p>Positioned</p><ul><li>left、top 、right、 bottom分别代表离Stack左、上、右、底四边的距离。width和height用于指定需要定位元素的宽度和高度。注意，Positioned的width、height 和其他地方的意义稍微有点区别，此处用于配合left、top 、right、 bottom来定位组件，举个例子，在水平方向时，你只能指定left、right、width三个属性中的两个，如指定left和width后，right会自动算出(left+width)，如果同时指定三个属性则会报错，垂直方向同理。</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dart">ConstrainedBox(<br>    <span class="hljs-comment">// 铺满整个屏幕</span><br>    constraints: <span class="hljs-keyword">const</span> BoxConstraints.expand(),<br>    <span class="hljs-comment">// 使用层级布局，实现元素叠放效果</span><br>    child: Stack(<br>        alignment: Alignment.center,<br>    children: [<br>        Container(<br>            alignment: Alignment.topLeft,<br>                child: Text(<span class="hljs-string">&quot;Hello world&quot;</span>, style: TextStyle(color: Colors.white)),<br>                color: Colors.red,<br>            ),<br>            <span class="hljs-comment">// 左定位</span><br>            <span class="hljs-keyword">const</span> Positioned(<br>                left: <span class="hljs-number">18.0</span>,<br>                child: Text(<span class="hljs-string">&quot;I am Jack&quot;</span>),<br>            ),<br>            <span class="hljs-comment">// 左上定位</span><br>            <span class="hljs-keyword">const</span> Positioned(<br>                top: <span class="hljs-number">18.0</span>,<br>                left: <span class="hljs-number">20.0</span>,<br>                child: Text(<br>                    <span class="hljs-string">&quot;Your friend&quot;</span>,<br>                    style: TextStyle(color: Colors.blueGrey),<br>                ),<br>            )<br>        ],<br>    ),<br>)<br></code></pre></td></tr></table></figure><h4 id="Align"><a href="#Align" class="headerlink" title="Align"></a>Align</h4><ul><li>alignment 对其方式，可以使用具体值Alignment(1,1)，也可以使用内容方式，比如 Alignment.topRight</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart">Align(<br>    <span class="hljs-comment">// 对其方式，可以使用具体值Alignment(1,1)，也可以使用内容方式，比如 Alignment.topRight</span><br>    alignment: Alignment.topRight,<br>    child: FlutterLogo(),<br>)<br></code></pre></td></tr></table></figure><ul><li>FractionalOffset <ul><li>FractionalOffset 继承自 Alignment，它和 Alignment唯一的区别就是坐标原点不同！- FractionalOffset 的坐标原点为矩形的左侧顶点，这和布局系统的一致，所以理解起来会比较容易。</li><li>FractionalOffset(.2, 0.2) 具体数值</li><li>FractionalOffset的坐标转换公式为：</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs base">实际偏移 = (FractionalOffse.x * (parentWidth - childWidth), FractionalOffse.y * (parentHeight - childHeight))<br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart">Align(<br>    <span class="hljs-comment">// alignment: FractionalOffset.topLeft,</span><br>    alignment: FractionalOffset(<span class="hljs-number">.2</span>, <span class="hljs-number">0.2</span>)<br>    child: FlutterLogo(),<br>)<br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart">Container(<br>    width: <span class="hljs-number">90</span>,<br>    height: <span class="hljs-number">90</span>,<br>    decoration: <span class="hljs-keyword">const</span> BoxDecoration(<br>        color: Colors.limeAccent,<br>    ),<br>    child: <span class="hljs-keyword">const</span> Align(<br>        <span class="hljs-comment">// 对其方式，可以使用具体值Alignment(1,1)，也可以使用内容方式，比如 Alignment.topRight</span><br>        alignment: Alignment.topRight,<br>        child: FlutterLogo(),<br>    ),<br>)<br></code></pre></td></tr></table></figure><h4 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h4><ul><li>ElevatedButton 普通按钮，ElevatedButton.icon 带icon的普通按钮</li><li>OutlinedButton 空心按钮，OutlinedButton.icon 带icon的空心按钮</li><li>TextButton 文本按钮, TextButton.icon 带icon的文本按钮</li><li>IconButton 普通的icon按钮</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart">Column(<br>    mainAxisAlignment: MainAxisAlignment.start,<br>    children: [<br>        ElevatedButton.icon(<br>            onPressed: () &#123;&#125;,<br>            label: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;tips&quot;</span>),<br>            icon: <span class="hljs-keyword">const</span> Icon(Icons.push_pin),<br>        ),<br>        OutlinedButton.icon(<br>            onPressed: () &#123;&#125;,<br>            label: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;发送&quot;</span>),<br>            icon: <span class="hljs-keyword">const</span> Icon(Icons.construction),<br>        ),<br>        TextButton.icon(<br>            onPressed: () &#123;&#125;,<br>            label: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;发送&quot;</span>),<br>            icon: <span class="hljs-keyword">const</span> Icon(Icons.search_off_outlined),<br>        ),<br>        IconButton(onPressed: () &#123;&#125;, icon: <span class="hljs-keyword">const</span> Icon(Icons.stadium))<br>    ],<br>)<br></code></pre></td></tr></table></figure><h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><ul><li>Image.network 使用网络图片</li><li>IMage.asset 使用本地图片<ul><li>width、height：用于设置图片的宽、高，当不指定宽高时，图片会根据当前父容器的限制，尽可能的显示其原始大小，如果只设置width、height的其中一个，那么另一个属性默认会按比例缩放，但可以通过下面介绍的fit属性来指定适应规则</li><li>fit: 该属性用于在图片的显示空间和图片本身大小不同时指定图片的适应模式。适应模式是在BoxFit中定义，它是一个枚举类型，有如下值</li><li>fill: 会拉伸填充满显示空间，图片本身长宽比会发生变化，图片会变形。</li><li>cover: 会按图片的长宽比放大后居中填满显示空间，图片不会变形，超出显示空间部分会被剪裁。</li><li>contain: 这是图片的默认适应规则，图片会在保证图片本身长宽比不变的情况下缩放以适应当前显示空间，图片不会变形。</li><li>fitWidth: 图片的宽度会缩放到显示空间的宽度，高度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。</li><li>fitHeight: 图片的高度会缩放到显示空间的高度，宽度会按比例缩放，然后居中显示，图片不会变形，超出显示空间部分会被剪裁。</li><li>none: 图片没有适应策略，会在显示空间内显示图片，如果图片比显示空间大，则显示空间只会显示图片中间部分。</li></ul></li></ul><blockquote><p>注意：使用本地图片时候，需要现在 <code>pubspec.yaml</code>中配置， 如下所示：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs base">assets:<br>    - images/avatar.png<br></code></pre></td></tr></table></figure><p>本地图片</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart">Image(<br>    image: AssetImage(<span class="hljs-string">&quot;images/avatar.png&quot;</span>),<br>    width: <span class="hljs-number">100.0</span>,<br>    color: Colors.blue,<br>    colorBlendMode: BlendMode.difference,<br>);<br></code></pre></td></tr></table></figure><p>网络图片</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart">Image.network(<br>    <span class="hljs-string">&quot;https://avatars2.githubusercontent.com/u/20411648?s=460&amp;v=4&quot;</span>,<br>    width: <span class="hljs-number">100.0</span>,<br>    fit: BoxFit.contain,<br>    color: Colors.red,<br>    colorBlendMode: BlendMode.difference,<br>)<br></code></pre></td></tr></table></figure><h4 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h4><ul><li>onChanged 切换时状态改变的回调函数</li><li>value 定义改变状态的数值</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">bool</span> _switchSelected = <span class="hljs-keyword">true</span>;<br>Switch(<br>    onChanged: (event) &#123;<br>        setState(() &#123;<br>        _switchSelected = event;<br>        &#125;);<br>    &#125;,<br>    value: _switchSelected,<br>)<br></code></pre></td></tr></table></figure><h4 id="Checkbox"><a href="#Checkbox" class="headerlink" title="Checkbox"></a>Checkbox</h4><ul><li>onChanged 切换时状态改变的回调函数</li><li>value 定义改变状态的数值</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">bool</span> _checkboxSelected = <span class="hljs-keyword">true</span>;<br>Checkbox(<br>    onChanged: (event) &#123;<br>        setState(() &#123;<br>        _checkboxSelected = event!;<br>        &#125;);<br>    &#125;,<br>    value: _checkboxSelected,<br>)<br></code></pre></td></tr></table></figure><h4 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h4><ul><li><p>controller：编辑框的控制器，通过它可以设置&#x2F;获取编辑框的内容、选择编辑内容、监听编辑文本改变事件。大多数情况下我们都需要显式提供一个controller来与文本框交互。如果没有提供controller，则TextField内部会自动创建一个。</p></li><li><p>focusNode：用于控制TextField是否占有当前键盘的输入焦点。它是我们和键盘交互的一个句柄（handle）。</p></li><li><p>InputDecoration：用于控制TextField的外观显示，如提示文本、背景颜色、边框等。</p></li><li><p>keyboardType: 用户设置该输入框默认的键盘输入类型</p><ul><li>text:  文本输入键盘</li><li>multiline: 多行文本，需要和 maxLines 配合使用（设为null或者大于1）</li><li>number: 数字，弹出数字键盘</li><li>phone: 优化后的电话号码输入键盘；会弹出数字键盘并显示“*#”</li><li>datetime: 优化后的日期输入键盘；Android上会显示“：-”</li><li>emailAddress: 优化后的电子邮件地址；会显示“@.”</li><li>url: 优化后的url输入键盘；会显示 “&#x2F;.”</li></ul></li><li><p>textInputAction：键盘动作按钮图标（搜索），它是一个枚举值，有多个可选值，全部的取值列表读者可以查看API文档，下面是当值为TextInputAction.search时，原生Android系统下键盘样式（搜索）。</p></li><li><p>style：设置样式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">style: <span class="hljs-keyword">const</span> TextStyle(fontSize: <span class="hljs-number">16.0</span>, fontWeight: FontWeight.w500, color: Colors.amber)<br></code></pre></td></tr></table></figure></li><li><p>textAlign：文本对其方式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">textAlign: TextAlign.left,<br></code></pre></td></tr></table></figure></li><li><p>autofocus： 自动获取焦点</p></li><li><p>obscureText：设置为<code>true</code>输入时输入值以<code>.</code>显示，密码框可以用这个实现</p></li><li><p>maxLines：输入值最长行数，默认<code>null</code>即不限制输入换行</p></li><li><p>maxLength：最长输入字符长度</p></li><li><p>toolbarOptions：引用官方的原话如下： ( ‘toolbarOptions’ is deprecated and shouldn’t be used. Use <code>contextMenuBuilder</code> instead. This feature was deprecated after v3.3.0-0.5.pre.<br>Try replacing the use of the deprecated member with the replacement. ) 改用 <code>contextMenuBuilder</code> 返回一个 <code>Widget</code> 实例，例如下面写法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 使用 contextMenuBuilder 代替 toolbarOptions</span><br>contextMenuBuilder:<br>    (BuildContext context, EditableTextState editableTextState) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;data&quot;</span>);<br>&#125;,<br></code></pre></td></tr></table></figure></li><li><p>onChanged：输入时会结构的回调，会监听用户输入；还可以使用 <code>controller</code> 实例获取输入的值。</p></li><li><p>inputFormatters：对输入的值进行校验，参考如下代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart">inputFormatters: [<br>    <span class="hljs-comment">// 限制输入类型</span><br>    FilteringTextInputFormatter.allow(<span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&#x27;[a-zA-Z]&#x27;</span>)),<br>    <span class="hljs-comment">// 限制输入长度</span><br>    LengthLimitingTextInputFormatter(<span class="hljs-number">8</span>)<br>],<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-comment">// 定义 TextField Controller 为接收 TextField 实例产生的值</span><br><span class="hljs-keyword">final</span> TextEditingController _textUsernameController = TextEditingController();<br><span class="hljs-keyword">final</span> TextEditingController _textPasswordController = TextEditingController();<br><br>TextField(<br>    <span class="hljs-comment">// 自动获取焦点</span><br>    autofocus: <span class="hljs-keyword">true</span>,<br>    <span class="hljs-comment">// 用于获取用户输入值</span><br>    controller: _textUsernameController,<br>    <span class="hljs-comment">// 定义输入输入类型</span><br>    keyboardType: TextInputType.emailAddress,<br>    <span class="hljs-comment">// 定义键盘确认按钮</span><br>    textInputAction: TextInputAction.next,<br>    <span class="hljs-comment">// textFiled 样式</span><br>    style: <span class="hljs-keyword">const</span> TextStyle(<br>        fontSize: <span class="hljs-number">16.0</span>, fontWeight: FontWeight.w500, color: Colors.amber),<br>    <span class="hljs-comment">// textFiled 文本对其方式</span><br>    textAlign: TextAlign.left,<br>    <span class="hljs-comment">// 最多可以输入几行，默认 Null  多行</span><br>    maxLines: <span class="hljs-number">1</span>,<br>    <span class="hljs-comment">// 限制输入长度数</span><br>    maxLength: <span class="hljs-number">80</span>,<br>    <span class="hljs-comment">// contextMenuBuilder:</span><br>    <span class="hljs-comment">//     (BuildContext context, EditableTextState editableTextState) &#123;</span><br>    <span class="hljs-comment">//   return const Text(&quot;data-----&quot;);</span><br>    <span class="hljs-comment">// &#125;,</span><br>    <span class="hljs-comment">// 获取用户输入值，同理可以使用 controller</span><br>    onChanged: (value) &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;onChangeValue <span class="hljs-subst">$&#123;value&#125;</span>&quot;</span>);<br>    &#125;,<br>    <span class="hljs-comment">// TextFiled 输入值校验</span><br>    inputFormatters: [<br>        FilteringTextInputFormatter.allow(<span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&#x27;[a-zA-Z]&#x27;</span>)),<br>        LengthLimitingTextInputFormatter(<span class="hljs-number">8</span>)<br>    ],<br>    <span class="hljs-comment">// TextFiled 输入框外观定义</span><br>    decoration: <span class="hljs-keyword">const</span> InputDecoration(<br>        labelText: <span class="hljs-string">&quot;用户名&quot;</span>,<br>        hintText: <span class="hljs-string">&quot;用户名或邮箱&quot;</span>,<br>        prefixIcon: Icon(Icons.person)),<br>),<br>TextField(<br>    obscureText: <span class="hljs-keyword">true</span>,<br>    controller: _textPasswordController,<br>    decoration: <span class="hljs-keyword">const</span> InputDecoration(<br>        labelText: <span class="hljs-string">&quot;密码&quot;</span>, hintText: <span class="hljs-string">&quot;请输入密码&quot;</span>, prefixIcon: Icon(Icons.lock)),<br>)<br><br><span class="hljs-comment">// 输入框值输出</span><br>ElevatedButton.icon(<br>    onPressed: () &#123;<br>        <span class="hljs-comment">// 输出</span><br>        <span class="hljs-built_in">print</span>(_textUsernameController.text);<br>    &#125;,<br>    label: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;获取数据&quot;</span>),<br>    icon: <span class="hljs-keyword">const</span> Icon(Icons.generating_tokens),<br>)<br></code></pre></td></tr></table></figure><h4 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h4><ul><li>key 使用<code>formKey</code> 获取输入框的值</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 定义 _formKey 实例</span><br>GlobalKey _formKey = GlobalKey&lt;FormState&gt;();<br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs dart">Column(<br>    children: [<br>    Form(<br>        key: _formKey,<br>        autovalidateMode: AutovalidateMode.onUserInteraction,<br>        child: Column(<br>            children: [<br>            TextFormField(<br>                autofocus: <span class="hljs-keyword">true</span>,<br>                keyboardType: TextInputType.text,<br>                textAlign: TextAlign.left,<br>                maxLines: <span class="hljs-number">1</span>,<br>                decoration: <span class="hljs-keyword">const</span> InputDecoration(<br>                    labelText: <span class="hljs-string">&quot;用户名&quot;</span>,<br>                    hintText: <span class="hljs-string">&quot;请输入用户名&quot;</span>,<br>                    prefixIcon: Icon(Icons.person_3_outlined)),<br>                validator: (v) &#123;<br>                <span class="hljs-comment">// 校验</span><br>                <span class="hljs-keyword">return</span> v!.trim().isNotEmpty ? <span class="hljs-keyword">null</span> : <span class="hljs-string">&#x27;用户名不能为空&#x27;</span>;<br>                &#125;,<br>            ),<br>            TextFormField(<br>                obscureText: <span class="hljs-keyword">true</span>,<br>                keyboardType: TextInputType.text,<br>                textAlign: TextAlign.left,<br>                maxLines: <span class="hljs-number">1</span>,<br>                decoration: <span class="hljs-keyword">const</span> InputDecoration(<br>                    labelText: <span class="hljs-string">&quot;用户密码&quot;</span>,<br>                    hintText: <span class="hljs-string">&quot;请输入密码&quot;</span>,<br>                    prefixIcon: Icon(Icons.lock_outline)),<br>                validator: (v) &#123;<br>                <span class="hljs-comment">// 校验</span><br>                <span class="hljs-keyword">return</span> v!.trim().isNotEmpty ? <span class="hljs-keyword">null</span> : <span class="hljs-string">&#x27;密码不能为空&#x27;</span>;<br>                &#125;,<br>            ),<br>            Padding(<br>                padding: <span class="hljs-keyword">const</span> EdgeInsets.only(top: <span class="hljs-number">20.0</span>),<br>                child: Row(<br>                children: [<br>                    Expanded(<br>                        child: ElevatedButton(<br>                            onPressed: () &#123;<br>                            <span class="hljs-keyword">var</span> _formState =<br>                                _formKey.currentState <span class="hljs-keyword">as</span> FormState;<br>                            <span class="hljs-comment">// 校验数据</span><br>                            <span class="hljs-keyword">if</span> (_formState.validate()) &#123;<br>                                _formState.save();<br>                            &#125;<br>                            &#125;,<br>                            child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;提交数据&quot;</span>)))<br>                ],<br>                ),<br>            )<br>            ],<br>        ))<br>    ],<br>)<br></code></pre></td></tr></table></figure><h4 id="容器类"><a href="#容器类" class="headerlink" title="容器类"></a>容器类</h4><h5 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h5><ul><li>EdgeInsets<ul><li>fromLTRB(double left, double top, double right, double bottom)：分别指定四个方向的填充。</li><li>all(double value) : 所有方向均使用相同数值的填充。</li><li>only({left, top, right ,bottom })：可以设置具体某个方向的填充(可以同时指定多个方向)。</li><li>symmetric({ vertical, horizontal })：用于设置对称方向的填充，vertical指top和bottom，horizontal指left和right</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dart">Padding(<br>    padding: <span class="hljs-keyword">const</span> EdgeInsets.only(top: <span class="hljs-number">20</span>),<br>    child: Container(<br>        <span class="hljs-comment">// 盒子外观样式</span><br>        decoration: BoxDecoration(<br>            <span class="hljs-comment">// 盒子圆角</span><br>            borderRadius: BorderRadius.circular(<span class="hljs-number">3.0</span>),<br>            <span class="hljs-comment">// 盒子渐变</span><br>            gradient:<br>                LinearGradient(colors: [Colors.red, Colors.orange.shade700]),<br>            <span class="hljs-comment">// 盒子背景阴影</span><br>            boxShadow: <span class="hljs-keyword">const</span> [<br>                BoxShadow(<br>                    color: Colors.black54,<br>                    offset: Offset(<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>),<br>                    blurRadius: <span class="hljs-number">4.0</span>)<br>            ]),<br>        child: <span class="hljs-keyword">const</span> Padding(<br>            padding: EdgeInsets.symmetric(horizontal: <span class="hljs-number">80</span>, vertical: <span class="hljs-number">18</span>),<br>            child: Text(<br>            <span class="hljs-string">&quot;我是按钮&quot;</span>,<br>            style: TextStyle(<br>                fontSize: <span class="hljs-number">20</span>, fontWeight: FontWeight.w800, color: Colors.white),<br>            ),<br>        ),<br>    ),<br>)<br></code></pre></td></tr></table></figure><h5 id="BoxDecoration"><a href="#BoxDecoration" class="headerlink" title="BoxDecoration"></a>BoxDecoration</h5><ul><li>borderRadius：容器的圆角值</li><li>gradient：渐变</li><li>boxShadow：阴影</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs dart">Padding(<br>    padding: <span class="hljs-keyword">const</span> EdgeInsets.only(top: <span class="hljs-number">20</span>),<br>    child: Container(<br>        <span class="hljs-comment">// 盒子外观样式</span><br>        decoration: BoxDecoration(<br>            <span class="hljs-comment">// 盒子圆角</span><br>            borderRadius: BorderRadius.circular(<span class="hljs-number">3.0</span>),<br>            <span class="hljs-comment">// 盒子渐变</span><br>            gradient:<br>                LinearGradient(colors: [Colors.red, Colors.orange.shade700]),<br>            <span class="hljs-comment">// 盒子背景阴影</span><br>            boxShadow: <span class="hljs-keyword">const</span> [<br>                BoxShadow(<br>                    color: Colors.black54,<br>                    offset: Offset(<span class="hljs-number">2.0</span>, <span class="hljs-number">2.0</span>),<br>                    blurRadius: <span class="hljs-number">4.0</span>)<br>            ]),<br>        child: <span class="hljs-keyword">const</span> Padding(<br>            padding: EdgeInsets.symmetric(horizontal: <span class="hljs-number">80</span>, vertical: <span class="hljs-number">18</span>),<br>            child: Text(<br>            <span class="hljs-string">&quot;我是按钮&quot;</span>,<br>            style: TextStyle(<br>                fontSize: <span class="hljs-number">20</span>, fontWeight: FontWeight.w800, color: Colors.white),<br>            ),<br>        ),<br>    ),<br>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flutter主题更换设计</title>
    <link href="/flutter%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2%E8%AE%BE%E8%AE%A1/"/>
    <url>/flutter%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="包安装"><a href="#包安装" class="headerlink" title="包安装"></a>包安装</h2><blockquote><p>这里我使用的是 <code>adaptive_theme: ^3.6.0</code>, 详细的可以参考<a href="https://pub.dev/packages/adaptive_theme">这里</a></p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li>文件配置</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> AdaptiveTheme(<br>        <span class="hljs-comment">// 亮色：主题颜色配置</span><br>        light: ThemeData(<br>            useMaterial3: <span class="hljs-keyword">true</span>,<br>            brightness: Brightness.light,<br>            primaryColor: Colors.blue,<br>            scaffoldBackgroundColor: Colors.white),<br>        <span class="hljs-comment">// 暗色：主题配置    </span><br>        dark: ThemeData(<br>            useMaterial3: <span class="hljs-keyword">true</span>,<br>            brightness: Brightness.dark,<br>            primaryColor: Colors.black,<br>            scaffoldBackgroundColor: Colors.black),<br>        <span class="hljs-comment">// 读取切换主题配置</span><br>        initial: savedThemeMode ?? AdaptiveThemeMode.light,<br>        <span class="hljs-comment">// 显示主题调试按钮</span><br>        debugShowFloatingThemeButton: <span class="hljs-keyword">true</span>,<br>        builder: (theme, darkTheme) =&gt; MaterialApp(<br>              theme: theme,<br>              darkTheme: darkTheme,<br>              initialRoute: <span class="hljs-string">&#x27;/&#x27;</span>,<br>              home: <span class="hljs-keyword">const</span> Home(),<br>              debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>              routes: &#123;<br>                <span class="hljs-string">&quot;/test_page&quot;</span>: (BuildContext context) =&gt; <span class="hljs-keyword">const</span> TestPage()<br>              &#125;,<br>            ));<br>  &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>变化监听</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() <span class="hljs-keyword">async</span> &#123;<br>  WidgetsFlutterBinding.ensureInitialized();<br>  <span class="hljs-keyword">final</span> savedThemeMode = <span class="hljs-keyword">await</span> AdaptiveTheme.getThemeMode();<br>  runApp(MyApp(savedThemeMode: savedThemeMode));<br>&#125;<br><br><span class="hljs-comment">// 注入到 `MyApp` 组件</span><br><span class="hljs-keyword">final</span> AdaptiveThemeMode? savedThemeMode;<br><span class="hljs-keyword">const</span> MyApp(&#123;<span class="hljs-keyword">super</span>.key, <span class="hljs-keyword">this</span>.savedThemeMode&#125;);<br></code></pre></td></tr></table></figure><h3 id="设置过渡效果"><a href="#设置过渡效果" class="headerlink" title="设置过渡效果"></a>设置过渡效果</h3><blockquote><p>这里我在 <code>index_page.dart</code> 文件</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dart">AnimatedTheme(<br>    <span class="hljs-comment">// 主题数据</span><br>    data: Theme.of(context),<br>    <span class="hljs-comment">// 过渡时间</span><br>    duration: <span class="hljs-keyword">const</span> <span class="hljs-built_in">Duration</span>(milliseconds: <span class="hljs-number">200</span>),<br>    <span class="hljs-comment">// 过渡动画</span><br>    curve: Curves.easeOut,<br>    child: Scaffold(<br>        appBar: AppBar(<br>        title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;首页&quot;</span>),<br>        actions: [<br>            IconButton(icon: <span class="hljs-keyword">const</span> Icon(Icons.share), onPressed: () &#123;&#125;)<br>        ],<br>        ),<br>        body: pagelist[_currentIndex],<br>        bottomNavigationBar: BottomNavigationBar(<br>        items: <span class="hljs-keyword">const</span> [<br>            BottomNavigationBarItem(icon: Icon(Icons.abc), label: <span class="hljs-string">&quot;首页&quot;</span>),<br>            BottomNavigationBarItem(icon: Icon(Icons.abc_sharp), label: <span class="hljs-string">&quot;我的&quot;</span>)<br>        ],<br>        currentIndex: _currentIndex,<br>        onTap: (index) &#123;<br>            setState(() &#123;<br>            _currentIndex = index;<br>            &#125;);<br>        &#125;,<br>        fixedColor: Colors.blue,<br>        ),<br>    ));<br></code></pre></td></tr></table></figure><h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><ol><li>自由切换</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart">ElevatedButton(<br>    child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;切换主题&quot;</span>),<br>    onPressed: () &#123;<br>        <span class="hljs-comment">// 切换主题</span><br>        AdaptiveTheme.of(context).toggleThemeMode();<br>    &#125;,<br>),<br></code></pre></td></tr></table></figure><ol start="2"><li>设置深色</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart">ElevatedButton(<br>    child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;切换主题&quot;</span>),<br>    onPressed: () &#123;<br>        <span class="hljs-comment">// 切换主题, 设置深色</span><br>        AdaptiveTheme.of(context).setDark();<br>    &#125;,<br>),<br></code></pre></td></tr></table></figure><ol start="2"><li>设置浅色</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart">ElevatedButton(<br>    child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;切换主题&quot;</span>),<br>    onPressed: () &#123;<br>        <span class="hljs-comment">// 切换主题, 设置浅色</span><br>        AdaptiveTheme.of(context).setLight();<br>    &#125;,<br>),<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flutter封装Dio使用</title>
    <link href="/flutter%E5%B0%81%E8%A3%85Dio%E4%BD%BF%E7%94%A8/"/>
    <url>/flutter%E5%B0%81%E8%A3%85Dio%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="封装-DioHttpUtil-类"><a href="#封装-DioHttpUtil-类" class="headerlink" title="封装 DioHttpUtil 类"></a>封装 DioHttpUtil 类</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// ignore_for_file: constant_identifier_names</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:dio/dio.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/foundation.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:pretty_dio_logger/pretty_dio_logger.dart&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">String</span> APPLICATION_JSON = <span class="hljs-string">&quot;application/json&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">String</span> CONTENT_TYPE = <span class="hljs-string">&quot;content-type&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">String</span> ACCEPT = <span class="hljs-string">&quot;accept&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">String</span> AUTHORIZATION = <span class="hljs-string">&quot;authorization&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">String</span> DEFAULT_LANGUAGE = <span class="hljs-string">&quot;en&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">String</span> TOKEN = <span class="hljs-string">&quot;Bearer token&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">String</span> BASE_URL = <span class="hljs-string">&quot;https://wpapi.ducafecat.tech&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DioHttpUtil</span> </span>&#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DioHttpUtil _instance = DioHttpUtil._internal();<br><br>  <span class="hljs-keyword">factory</span> DioHttpUtil() =&gt; _instance;<br><br>  <span class="hljs-keyword">late</span> Dio _dio;<br><br>  <span class="hljs-comment">// 单例模式</span><br>  DioHttpUtil._internal() &#123;<br>    <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; headers = &#123;<br>      CONTENT_TYPE: APPLICATION_JSON,<br>      ACCEPT: APPLICATION_JSON,<br>      AUTHORIZATION: TOKEN,<br>      DEFAULT_LANGUAGE: DEFAULT_LANGUAGE<br>    &#125;;<br><br>    <span class="hljs-comment">// 初始值</span><br>    <span class="hljs-keyword">var</span> options = BaseOptions(<br>      baseUrl: BASE_URL,<br>      headers: headers,<br>      connectTimeout: <span class="hljs-keyword">const</span> <span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">5</span>), <span class="hljs-comment">// 5秒</span><br>      receiveTimeout: <span class="hljs-keyword">const</span> <span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">3</span>), <span class="hljs-comment">// 3秒</span><br>      responseType: ResponseType.json,<br>    );<br><br>    <span class="hljs-comment">// 初始_dio</span><br>    _dio = Dio(options);<br><br>    <span class="hljs-comment">// 拦截器 - 日志打印</span><br>    <span class="hljs-keyword">if</span> (!kReleaseMode) &#123;<br>      _dio.interceptors.add(PrettyDioLogger(<br>        requestHeader: <span class="hljs-keyword">true</span>,<br>        requestBody: <span class="hljs-keyword">true</span>,<br>        responseHeader: <span class="hljs-keyword">true</span>,<br>      ));<br>    &#125;<br><br>    <span class="hljs-comment">// 拦截器</span><br>    _dio.interceptors.add(RequestInterceptorHandler());<br>  &#125;<br><br>  <span class="hljs-comment">/// <span class="language-markdown">GET 请求方法</span></span><br>  Future&lt;Response&gt; <span class="hljs-keyword">get</span>(<span class="hljs-built_in">String</span> url,<br>      &#123;<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt;? params,<br>      Options? options,<br>      CancelToken? cancelToken&#125;) <span class="hljs-keyword">async</span> &#123;<br>    Options requestOptions = options ?? Options();<br>    Response response = <span class="hljs-keyword">await</span> _dio.<span class="hljs-keyword">get</span>(url,<br>        queryParameters: params,<br>        options: requestOptions,<br>        cancelToken: cancelToken);<br><br>    <span class="hljs-keyword">return</span> response;<br>  &#125;<br><br>  <span class="hljs-comment">/// <span class="language-markdown">post 请求方法</span></span><br>  Future&lt;Response&gt; post(<span class="hljs-built_in">String</span> url, <span class="hljs-built_in">dynamic</span> data, Options? options,<br>      CancelToken? cancelToken) <span class="hljs-keyword">async</span> &#123;<br>    Options requestOptions = options ?? Options();<br>    Response response = <span class="hljs-keyword">await</span> _dio.post(url,<br>        data: data ?? &#123;&#125;, options: requestOptions, cancelToken: cancelToken);<br>    <span class="hljs-keyword">return</span> response;<br>  &#125;<br><br>  <span class="hljs-comment">/// <span class="language-markdown">put 请求方法</span></span><br>  Future&lt;Response&gt; put(<span class="hljs-built_in">String</span> url, <span class="hljs-built_in">dynamic</span> data, Options? options,<br>      CancelToken? cancelToken) <span class="hljs-keyword">async</span> &#123;<br>    Options reqeustOptions = options ?? Options();<br>    Response response = <span class="hljs-keyword">await</span> _dio.put(url,<br>        data: data ?? &#123;&#125;, options: reqeustOptions, cancelToken: cancelToken);<br>    <span class="hljs-keyword">return</span> response;<br>  &#125;<br><br>  <span class="hljs-comment">/// <span class="language-markdown">delete 请求方法</span></span><br>  Future&lt;Response&gt; delete(<span class="hljs-built_in">String</span> url, Options? options, <span class="hljs-built_in">dynamic</span> data,<br>      CancelToken? cancelToken) <span class="hljs-keyword">async</span> &#123;<br>    Options reqeustOptions = options ?? Options();<br>    Response response = <span class="hljs-keyword">await</span> _dio.delete(<br>      url,<br>      data: data ?? &#123;&#125;,<br>      options: reqeustOptions,<br>      cancelToken: cancelToken,<br>    );<br>    <span class="hljs-keyword">return</span> response;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// dio 拦截器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RequestInterceptorHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Interceptor</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> onResponse(Response response, ResponseInterceptorHandler handler) &#123;<br>    <span class="hljs-keyword">return</span> handler.next(response);<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> next(RequestOptions options) &#123;&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="生成-models"><a href="#生成-models" class="headerlink" title="生成 models"></a>生成 models</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>运行 <code>flutter packages pub run json_model</code>, 生成对应的<code>models</code></p><h3 id="编写api类"><a href="#编写api类" class="headerlink" title="编写api类"></a>编写api类</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:test_drive/models/product.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:test_drive/utils/http.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListApi</span> </span>&#123;<br>  <span class="hljs-comment">// 请求列表数据</span><br>  <span class="hljs-keyword">static</span> Future&lt;<span class="hljs-built_in">List</span>&lt;Product&gt;&gt; list(&#123;<span class="hljs-built_in">int?</span> page, <span class="hljs-built_in">int?</span> prePage&#125;) <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">var</span> res = <span class="hljs-keyword">await</span> DioHttpUtil().<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;/products&quot;</span>, params: &#123;<br>      <span class="hljs-string">&#x27;page&#x27;</span>: page ?? <span class="hljs-number">0</span>,<br>      <span class="hljs-string">&#x27;pre_page&#x27;</span>: prePage ?? <span class="hljs-number">20</span>,<br>    &#125;);<br><br>    <span class="hljs-built_in">List</span>&lt;Product&gt; items = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> res.data) &#123;<br>      <span class="hljs-comment">// 转义成josn格式，并且存入List</span><br>      items.add(Product.fromJson(item));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> items;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-comment">// 定义接收数据list</span><br> <span class="hljs-built_in">List</span>&lt;Product&gt; _products = [];<br><br> <span class="hljs-meta">@override</span><br> <span class="hljs-keyword">void</span> initState() &#123;<br>   <span class="hljs-comment">// 发起数据请求</span><br>   featchData();<br>   <span class="hljs-keyword">super</span>.initState();<br> &#125;<br><br> <span class="hljs-comment">// 获取列表</span><br> <span class="hljs-keyword">void</span> featchData() <span class="hljs-keyword">async</span> &#123;<br>   <span class="hljs-keyword">try</span> &#123;<br>     <span class="hljs-keyword">final</span> resposne = <span class="hljs-keyword">await</span> ListApi.list();<br>     setState(() &#123;<br>       <span class="hljs-keyword">if</span> (mounted) &#123;<br>         _products = resposne;<br>       &#125;<br>     &#125;);<br>   &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>     <span class="hljs-built_in">print</span>(err.toString());<br>   &#125;<br> &#125;<br><br> <span class="hljs-comment">// 渲染列表</span><br> ListView.builder(<br>   itemCount: _products.length,<br>   itemBuilder: (context, index) &#123;<br>       <span class="hljs-keyword">return</span> ListTile(<br>       title: Text(_products[index].name ?? <span class="hljs-string">&quot;&quot;</span>),<br>       subtitle: Text(_products[index].description ?? <span class="hljs-string">&quot;&quot;</span>),<br>           );<br>       &#125;,<br>   ),<br><br></code></pre></td></tr></table></figure><h3 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h3><p><img src="/source/_posts/image-2.png" alt="预览"></p>]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu20.04安装Nginx</title>
    <link href="/Ubuntu20.04%E5%AE%89%E8%A3%85Nginx/"/>
    <url>/Ubuntu20.04%E5%AE%89%E8%A3%85Nginx/</url>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更新apt-get源</span><br>sudo apt-get update<br><span class="hljs-comment"># 安装</span><br>sudo apt-get install nginx<br><span class="hljs-comment"># 安装后将自动开启nginx服务，打开浏览器输入ip即可查看初始页面</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看安装版本</span><br>nginx -v<br><span class="hljs-comment"># 输出:nginx version: nginx/1.18.0 (Ubuntu)</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># systemctl命令</span><br><span class="hljs-comment"># 查看状态</span><br>sudo systemctl status nginx<br><span class="hljs-comment"># 启动</span><br>sudo systemctl start nginx<br><span class="hljs-comment"># 停止</span><br>sudo systemctl stop nginx<br><span class="hljs-comment"># 重启</span><br>sudo systemctl restart nginx<br></code></pre></td></tr></table></figure><blockquote><p>📢：对nginx配置文件修改之后，都要重启nginx服务，加载修改后的配置文件</p></blockquote><h3 id="查看文件结构"><a href="#查看文件结构" class="headerlink" title="查看文件结构"></a>查看文件结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看文件结构</span><br>tree /etc/nginx<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs bash">ubuntu@VM-16-2-ubuntu:~$ tree /etc/nginx<br>/etc/nginx<br>├── conf.d<br>├── fastcgi.conf<br>├── fastcgi_params<br>├── koi-utf<br>├── koi-win<br>├── mime.types<br>├── modules-available<br>├── modules-enabled<br>│   ├── 50-mod-http-image-filter.conf -&gt; /usr/share/nginx/modules-available/mod-http-image-filter.conf<br>│   ├── 50-mod-http-xslt-filter.conf -&gt; /usr/share/nginx/modules-available/mod-http-xslt-filter.conf<br>│   ├── 50-mod-mail.conf -&gt; /usr/share/nginx/modules-available/mod-mail.conf<br>│   └── 50-mod-stream.conf -&gt; /usr/share/nginx/modules-available/mod-stream.conf<br>├── nginx.conf<br>├── proxy_params<br>├── scgi_params<br>├── sites-available<br>│   └── default<br>├── sites-enabled<br>│   └── default -&gt; /etc/nginx/sites-available/default<br>├── snippets<br>│   ├── fastcgi-php.conf<br>│   └── snakeoil.conf<br>├── uwsgi_params<br>└── win-utf<br><br>6 directories, 18 files<br></code></pre></td></tr></table></figure><h4 id="配置文件内容"><a href="#配置文件内容" class="headerlink" title="配置文件内容"></a>配置文件内容</h4><blockquote><p>nginx.conf （为了方便看，我删掉了初始内容中所有带注释的代码）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">user www-data;<br>worker_processes auto;<br>pid /run/nginx.pid;<br>include /etc/nginx/modules-enabled/*.conf;<br><br>events &#123;<br>worker_connections 768;<br>&#125;<br><br>http &#123;<br><br>sendfile on;<br>tcp_nopush on;<br>tcp_nodelay on;<br>keepalive_timeout 65;<br>types_hash_max_size 2048;<br><br>include /etc/nginx/mime.types;<br>default_type application/octet-stream;<br><br>ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; <span class="hljs-comment"># Dropping SSLv3, ref: POODLE</span><br>ssl_prefer_server_ciphers on;<br><br>access_log /var/log/nginx/access.log;<br>error_log /var/log/nginx/error.log;<br><br>gzip on;<br><br>include /etc/nginx/conf.d/*.conf;<br>include /etc/nginx/sites-enabled/*;<br>&#125;<br></code></pre></td></tr></table></figure><p>要注意的是，在<code>/var/www/html</code>目录中，文件的名字不是<code>index.html</code>，原名为<code>index.nginx.debian.html</code>，改成前者即可。</p><p>通过三处修改，完成从<code>sites-enable</code>到<code>conf.d</code>的迁移</p><ul><li>在<code>nginx.conf</code>中注释掉<code>include /etc/nginx/sites-enabled/*</code>;</li><li>在<code>conf.d</code>目录下新建<code>static.conf</code>，添加如上文件内容</li><li>修改<code>/var/www/html</code>目录中的文件名为<code>index.html</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 检查配置文件是否有误</span><br>nginx -t<br><span class="hljs-comment"># nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="hljs-comment"># nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><br><span class="hljs-comment"># 重启服务</span><br>sudo systemctl restart nginx<br></code></pre></td></tr></table></figure><h3 id="配置静态服务器"><a href="#配置静态服务器" class="headerlink" title="配置静态服务器"></a>配置静态服务器</h3><blockquote><p>将文件上传到<code>/var/www/html</code>,如果有多个文件，可以新建多个文件，并在 <code>nginx.conf</code> 中配置，并重启服务。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen       80;<br>    server_name  localhost;<br><br>    charset utf-8; <span class="hljs-comment"># 防止中文显示出现乱码</span><br><br>    <span class="hljs-comment"># 根据自己需要配置日志文件，可以单独配置，也可以全部放在/var/log/nginx的日志中</span><br>    <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>    location / &#123;<br>        root   /var/www/html; <span class="hljs-comment"># 你的静态资源路径</span><br>        index  index.html index.htm;<span class="hljs-comment"># 访问的文件为html, htm</span><br>    &#125;<br>    <br>    location /markdown &#123;<br>        <span class="hljs-built_in">alias</span>   /var/www/html/markdown; <span class="hljs-comment"># 你的静态资源路径</span><br>        index  index.html index.htm;<span class="hljs-comment"># 访问的文件为html, htm</span><br>    &#125;<br>    <br>    <span class="hljs-comment"># 后续如果有其他配置，模仿markdown的配置添加即可</span><br>    <span class="hljs-comment"># location /example &#123;</span><br>    <span class="hljs-comment">#     alias   /var/www/html/example; # 你的静态资源路径</span><br>    <span class="hljs-comment">#     index  index.html index.htm;# 访问的文件为html, htm</span><br>    <span class="hljs-comment"># &#125;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="配置端口转发"><a href="#配置端口转发" class="headerlink" title="配置端口转发"></a>配置端口转发</h3><blockquote><p>配置服务器上的端口转发，需要在服务器安全组开启对应端口。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen       80;<br>    server_name  localhost;<br> <br>    charset utf-8; <span class="hljs-comment"># 防止中文显示出现乱码</span><br><br><span class="hljs-comment"># 添加头部信息</span><br>    proxy_set_header  Cookie <span class="hljs-variable">$http_cookie</span>;<br>    proxy_set_header  X-Forwarded-Host <span class="hljs-variable">$Host</span>;<br>    proxy_set_header  proxy_set_Server  <span class="hljs-variable">$Host</span>;<br>    proxy_set_header  X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><br>    <span class="hljs-comment"># 访问IP/eat，则会自动访问对应地址IP:8822</span><br>    location /eat/ &#123;<br>        proxy_pass http://localhost:8822/;<br>    &#125;<br>    <br>    <span class="hljs-comment"># 后续如果有其他配置，模仿eat的配置添加即可</span><br>    <span class="hljs-comment"># 访问IP/example，则会自动访问对应地址IP:port</span><br>    <span class="hljs-comment"># location /example/ &#123;</span><br>    <span class="hljs-comment">#     proxy_pass http://localhost:port/;</span><br>    <span class="hljs-comment"># &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h3><blockquote><p>将购买好的域名配置到服务器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen       80;<br>    server_name  demo.southyang.cn;<br> <br>    charset utf-8; <span class="hljs-comment"># 防止中文显示出现乱码</span><br><br><span class="hljs-comment"># 添加头部信息</span><br>    proxy_set_header  Cookie <span class="hljs-variable">$http_cookie</span>;<br>    proxy_set_header  X-Forwarded-Host <span class="hljs-variable">$Host</span>;<br>    proxy_set_header  proxy_set_Server  <span class="hljs-variable">$Host</span>;<br>    proxy_set_header  X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><br>    <span class="hljs-comment"># 访问demo.southyang.cn/eat，则会自动访问对应地址IP:8822</span><br>    location /eat/ &#123;<br>        proxy_pass http://localhost:8822/;<br>    &#125;<br>    <br>    <span class="hljs-comment"># 后续如果有其他配置，模仿eat的配置添加即可</span><br>    <span class="hljs-comment"># 访问IP/example，则会自动访问对应地址IP:port</span><br>    <span class="hljs-comment"># location /example/ &#123;</span><br>    <span class="hljs-comment">#     proxy_pass http://localhost:port/;</span><br>    <span class="hljs-comment"># &#125;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h3><blockquote><p>为网站配置<code>https</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">server &#123;<br>    listen 80;<br>    server_name demo.southyang.cn;<br>    <span class="hljs-comment"># 跳转https</span><br>    <span class="hljs-built_in">return</span> 301 https://$host<span class="hljs-variable">$request_uri</span>;<br>&#125;<br><br>server &#123;<br>    listen 443   ssl http2;<br>    server_name  demo.southyang.cn;<br> <br>    charset utf-8; <span class="hljs-comment"># 防止中文显示出现乱码</span><br><br><span class="hljs-comment"># 添加头部信息</span><br>    proxy_set_header  Cookie <span class="hljs-variable">$http_cookie</span>;<br>    proxy_set_header  X-Forwarded-Host <span class="hljs-variable">$Host</span>;<br>    proxy_set_header  proxy_set_Server  <span class="hljs-variable">$Host</span>;<br>    proxy_set_header  X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    <br>    <span class="hljs-comment"># 配置证书</span><br>    ssl_certificate 证书密钥地址<br>    ssl_certificate_key 证书公钥地址<br>    ssl_verify_client off;<br>    proxy_ssl_verify off;<br><br>    <span class="hljs-comment"># 访问demo.southyang.cn/eat，则会自动访问对应地址IP:8822</span><br>    location /eat/ &#123;<br>        proxy_pass http://localhost:8822/;<br>        proxy_redirect off;<br>    &#125;<br>    <br>    <span class="hljs-comment"># 后续如果有其他配置，模仿eat的配置添加即可</span><br>    <span class="hljs-comment"># 访问IP/example，则会自动访问对应地址IP:port</span><br>    <span class="hljs-comment"># location /example/ &#123;</span><br>    <span class="hljs-comment">#     proxy_pass http://localhost:port/;</span><br>    <span class="hljs-comment"># &#125;</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>liunx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rn Android 编译报错 react-native-http-cache</title>
    <link href="/Rn%20Android%20%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99%20react-native-http-cache/"/>
    <url>/Rn%20Android%20%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99%20react-native-http-cache/</url>
    
    <content type="html"><![CDATA[<h3 id="Android编译运行报错"><a href="#Android编译运行报错" class="headerlink" title="Android编译运行报错"></a>Android编译运行报错</h3><blockquote><p>Your project may be using a version of the Android Gradle plug-in that does not contain the method</p></blockquote><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/RN_HTTP_CATCH.png"></p><blockquote><p>更改为 implementation 再次编译即可</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ReactNative</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ReactNative</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReactNative 使用 Apple 登录</title>
    <link href="/reactnative%E4%BD%BF%E7%94%A8apple%E7%99%BB%E5%BD%95/"/>
    <url>/reactnative%E4%BD%BF%E7%94%A8apple%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p><code>ReactNative</code> 苹果账号第三方登录，下面我们将对于在<code>RN</code>中配置使用<code>Apple</code>登录的配置和使用说明。</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>安装三方模块</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i @invertase/react-native-apple-authentication <br></code></pre></td></tr></table></figure><ul><li>在<code>Xcode</code>中添加<code>Sign Apple</code>如下图所示</li></ul><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240515-074223.png"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p>在业务逻辑中我们自定义登录模块</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// apple 账号登录</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleAppleLogin</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> appleAuthRequestResponse = <span class="hljs-keyword">await</span> appleAuth.<span class="hljs-title function_">performRequest</span>(&#123;<br>        <span class="hljs-attr">requestedOperation</span>: appleAuth.<span class="hljs-property">Operation</span>.<span class="hljs-property">LOGIN</span>,<br>        <span class="hljs-attr">requestedScopes</span>: [appleAuth.<span class="hljs-property">Scope</span>.<span class="hljs-property">EMAIL</span>, appleAuth.<span class="hljs-property">Scope</span>.<span class="hljs-property">FULL_NAME</span>]<br>      &#125;)<br><br>      <span class="hljs-keyword">if</span> (!appleAuthRequestResponse.<span class="hljs-property">identityToken</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;Apple Sign-In failed - no identify token returned&#x27;</span><br>      &#125;<br><br>      <span class="hljs-keyword">const</span> &#123; identityToken, nonce, email, user, fullName &#125; = appleAuthRequestResponse<br>      <span class="hljs-comment">// const credentialState = await appleAuth.getCredentialStateForUser(appleAuthRequestResponse.user)</span><br>      <span class="hljs-comment">// 001224.63aea5c8ff124f63b83741ae928b2c9f.0007</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;appleAuthRequestResponse&#x27;</span>, appleAuthRequestResponse)<br><br>      <span class="hljs-title class_">Alert</span>.<span class="hljs-title function_">alert</span>(nonce, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(identityToken))<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;&#125;<br>  &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ReactNative</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ReactNative</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gitlab create tag</title>
    <link href="/gitlab%20create%20tag/"/>
    <url>/gitlab%20create%20tag/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240506-074853@2x.png"></p><blockquote><p>在项目里面创建 tag git tag -a v1.0.8 -m “Update Release 1.0.8” ，新建一个tag并且名称当前tag版本为1.0.8</p></blockquote><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/1111.png"></p>]]></content>
    
    
    <categories>
      
      <category>gitlab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gitlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Image OCR</title>
    <link href="/Python%20Image%20OCR/"/>
    <url>/Python%20Image%20OCR/</url>
    
    <content type="html"><![CDATA[<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li>参考文章: <a href="https://github.com/PaddlePaddle/PaddleOCR">https://github.com/PaddlePaddle/PaddleOCR</a></li><li>参考文章: <a href="https://blog.csdn.net/weixin_41258131/article/details/133163718?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-133163718-blog-114925433.235%5Ev39%5Epc_relevant_anti_t3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-133163718-blog-114925433.235%5Ev39%5Epc_relevant_anti_t3&utm_relevant_index=5">https://blog.csdn.net/weixin_41258131/article/details/133163718?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-133163718-blog-114925433.235%5Ev39%5Epc_relevant_anti_t3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-133163718-blog-114925433.235%5Ev39%5Epc_relevant_anti_t3&amp;utm_relevant_index=5</a></li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> paddleocr <span class="hljs-keyword">import</span> PaddleOCR, draw_ocr<br><br><span class="hljs-comment"># Paddleocr目前支持的多语言语种可以通过修改lang参数进行切换</span><br><span class="hljs-comment"># 例如`ch`, `en`, `fr`, `german`, `korean`, `japan`</span><br>ocr = PaddleOCR(use_angle_cls=<span class="hljs-literal">True</span>, lang=<span class="hljs-string">&quot;ch&quot;</span>)  <span class="hljs-comment"># need to run only once to download and load model into memory</span><br>img_path = <span class="hljs-string">&#x27;./images/images_19.png&#x27;</span><br>result = ocr.ocr(img_path, cls=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(result)):<br>    res = result[idx]<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> res:<br>        <span class="hljs-built_in">print</span>(line)<br><br><span class="hljs-comment"># 显示结果</span><br><span class="hljs-comment"># 如果本地没有simfang.ttf，可以在doc/fonts目录下下载</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>result = result[<span class="hljs-number">0</span>]<br>image = Image.<span class="hljs-built_in">open</span>(img_path).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)<br>boxes = [line[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> result]<br>txts = [line[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> result]<br>scores = [line[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> result]<br>im_show = draw_ocr(image, boxes, txts, scores, font_path=<span class="hljs-string">&#x27;doc/fonts/simfang.ttf&#x27;</span>)<br>im_show = Image.fromarray(im_show)<br>im_show.save(<span class="hljs-string">&#x27;result.jpg&#x27;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Pdf 转 Image</title>
    <link href="/Python%20Pdf%20%E8%BD%AC%20Image/"/>
    <url>/Python%20Pdf%20%E8%BD%AC%20Image/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">import</span> fitz  <span class="hljs-comment">#pip install PyMuPDF</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pyMuPDF_fitz</span>(<span class="hljs-params">pdfPath, imagePath</span>):<br>    startTime_pdf2img = datetime.datetime.now()  <span class="hljs-comment"># 开始时间</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;imagePath=&quot;</span> + imagePath)<br>    pdfDoc = fitz.<span class="hljs-built_in">open</span>(pdfPath)<br>    <span class="hljs-keyword">for</span> pg <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(pdfDoc.page_count):<br>        page = pdfDoc[pg]<br>        rotate = <span class="hljs-built_in">int</span>(<span class="hljs-number">0</span>)<br>        <span class="hljs-comment"># 每个尺寸的缩放系数为1.3，这将为我们生成分辨率提高2.6的图像。</span><br>        <span class="hljs-comment"># 此处若是不做设置，默认图片大小为：792X612, dpi=96</span><br>        zoom_x = <span class="hljs-number">1.33333333</span>  <span class="hljs-comment"># (1.33333333--&gt;1056x816)   (2--&gt;1584x1224)</span><br>        zoom_y = <span class="hljs-number">1.33333333</span><br>        mat = fitz.Matrix(zoom_x, zoom_y).prerotate(rotate)<br>        pix = page.get_pixmap(matrix=mat, alpha=<span class="hljs-literal">False</span>)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(imagePath):  <span class="hljs-comment"># 判断存放图片的文件夹是否存在</span><br>            os.makedirs(imagePath)  <span class="hljs-comment"># 若图片文件夹不存在就创建</span><br><br>        pix.save(imagePath + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-string">&#x27;images_%s.png&#x27;</span> % pg)  <span class="hljs-comment"># 将图片写入指定的文件夹内</span><br><br>    endTime_pdf2img = datetime.datetime.now()  <span class="hljs-comment"># 结束时间</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;pdf2img时间=&#x27;</span>, (endTime_pdf2img - startTime_pdf2img).seconds)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 1、PDF地址</span><br>    pdfPath = <span class="hljs-string">&#x27;./pdfs/shegong274.pdf&#x27;</span><br>    <span class="hljs-comment"># 2、需要储存图片的目录</span><br>    imagePath = <span class="hljs-string">&#x27;images&#x27;</span><br>    pyMuPDF_fitz(pdfPath, imagePath)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 使用 request 类库</title>
    <link href="/python%E4%BD%BF%E7%94%A8request%E7%B1%BB%E5%BA%93/"/>
    <url>/python%E4%BD%BF%E7%94%A8request%E7%B1%BB%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Requests类库： <a href="https://requests.readthedocs.io/en/latest/user/quickstart/">https://requests.readthedocs.io/en/latest/user/quickstart/</a></p></blockquote><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/request.png"></p><ul><li>get</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">url = <span class="hljs-string">&#x27;https://httpbin.org/get&#x27;</span><br><br>cookies = <span class="hljs-built_in">dict</span>(do_main=<span class="hljs-string">&quot;cookies&quot;</span>)<br>response = request.get(url,  params=<span class="hljs-string">&quot;?a=10&amp;b=20&quot;</span>, cookies=cookies)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;content&quot;</span>,response.content)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cookies&quot;</span>, response.cookies)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;JSON&quot;</span>, response.json())<br></code></pre></td></tr></table></figure><ul><li>post</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">url = <span class="hljs-string">&#x27;https://httpbin.org/post&#x27;</span><br><br>cookies = <span class="hljs-built_in">dict</span>(do_main=<span class="hljs-string">&quot;cookies&quot;</span>)<br>data = &#123;<span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;value&quot;</span>&#125;<br><br>response = requests.post(url, data=data, cookies=cookies)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;content&quot;</span>,response.content)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cookies&quot;</span>, response.cookies)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;JSON&quot;</span>, response.json())<br><br></code></pre></td></tr></table></figure><ul><li>delete</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">url = <span class="hljs-string">&#x27;https://httpbin.org/delete&#x27;</span><br><br>cookies = <span class="hljs-built_in">dict</span>(do_main=<span class="hljs-string">&quot;cookies&quot;</span>)<br>data = &#123;<span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;value&quot;</span>&#125;<br><br>response = requests.delete(url, data=data, cookies=cookies)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;content&quot;</span>,response.content)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cookies&quot;</span>, response.cookies)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;JSON&quot;</span>, response.json())<br></code></pre></td></tr></table></figure><ul><li>put</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">url = <span class="hljs-string">&#x27;https://httpbin.org/delete&#x27;</span><br><br>cookies = <span class="hljs-built_in">dict</span>(do_main=<span class="hljs-string">&quot;cookies&quot;</span>)<br>data = &#123;<span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;value&quot;</span>&#125;<br><br>response = requests.put(url, data=data, cookies=cookies)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;content&quot;</span>,response.content)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cookies&quot;</span>, response.cookies)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;JSON&quot;</span>, response.json())<br></code></pre></td></tr></table></figure><p>下面我们举例说明</p><blockquote><p>当当网 top500</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">request_dandan</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">try</span>:<br>        response = requests.get(url)<br>        <span class="hljs-built_in">print</span>(response.content)<br>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-keyword">return</span> response.text<br>    <span class="hljs-keyword">except</span> requests.RequestException:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_result</span>(<span class="hljs-params">html</span>):<br>    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;li&gt;.*?list_num.*?(\d+).&lt;/div&gt;.*?&lt;img src=&quot;(.*?)&quot;.*?class=&quot;name&quot;.*?title=&quot;(.*?)&quot;&gt;.*?class=&quot;star&quot;&gt;.*?class=&quot;tuijian&quot;&gt;(.*?)&lt;/span&gt;.*?class=&quot;publisher_info&quot;&gt;.*?target=&quot;_blank&quot;&gt;(.*?)&lt;/a&gt;.*?class=&quot;biaosheng&quot;&gt;.*?&lt;span&gt;(.*?)&lt;/span&gt;&lt;/div&gt;.*?&lt;p&gt;&lt;span\sclass=&quot;price_n&quot;&gt;&amp;yen;(.*?)&lt;/span&gt;.*?&lt;/li&gt;&#x27;</span>,re.S)<br>    items = re.findall(pattern, html)<br><br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br>        write_item_to_file(item)<br>        <span class="hljs-keyword">yield</span> &#123;<br>            <span class="hljs-string">&#x27;range&#x27;</span>: item[<span class="hljs-number">0</span>],<br>            <span class="hljs-string">&#x27;iamge&#x27;</span>: item[<span class="hljs-number">1</span>],<br>            <span class="hljs-string">&#x27;title&#x27;</span>: item[<span class="hljs-number">2</span>],<br>            <span class="hljs-string">&#x27;recommend&#x27;</span>: item[<span class="hljs-number">3</span>],<br>            <span class="hljs-string">&#x27;author&#x27;</span>: item[<span class="hljs-number">4</span>],<br>            <span class="hljs-string">&#x27;times&#x27;</span>: item[<span class="hljs-number">5</span>],<br>            <span class="hljs-string">&#x27;price&#x27;</span>: item[<span class="hljs-number">6</span>]<br>        &#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_item_to_file</span>(<span class="hljs-params">item</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始写入数据 ====&gt; &#x27;</span> + <span class="hljs-built_in">str</span>(item))<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;book.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(json.dumps(item, ensure_ascii=<span class="hljs-literal">False</span>) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        f.close()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">page</span>):<br>    url = <span class="hljs-string">&#x27;http://bang.dangdang.com/books/fivestars/01.00.00.00.00.00-recent30-0-0-1&#x27;</span> + <span class="hljs-built_in">str</span>(page)<br>    html = request_dandan(url)<br><br>    parse_result(html)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">26</span>):<br>        main(i)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>re 模块</title>
    <link href="/re%E6%A8%A1%E5%9D%97/"/>
    <url>/re%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><ul><li>re.match</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>content = <span class="hljs-string">&#x27;Xiaoshuaib has 100 bananas&#x27;</span><br><br>res = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;^Xi.*(\d+)\s.*s$&#x27;</span>, content) <span class="hljs-comment"># 0</span><br><span class="hljs-comment"># res = re.match(&#x27;^Xi.*?(\d+)\s.*s$&#x27;, content) # 100</span><br><br><span class="hljs-comment"># 解决处理对象换行</span><br><span class="hljs-comment"># 使用 re.S 方法</span><br><span class="hljs-comment"># res = re.match(&#x27;^Xi.*(\d+)\s.*s$&#x27;, content, re.S) # 0</span><br><br><span class="hljs-built_in">print</span>(res)<br><br><span class="hljs-comment"># 0 or 100</span><br><br></code></pre></td></tr></table></figure><ul><li>re.search 搜索匹配第一个与之匹配的值返回</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>content = <span class="hljs-string">&quot;&quot;&quot;Xiaoshuaib has 100 </span><br><span class="hljs-string">bananas&quot;&quot;&quot;</span><br>res = re.search(<span class="hljs-string">&#x27;Xi.*?(\d+)\s.*s&#x27;</span>,content,re.S)<br><span class="hljs-built_in">print</span>(res.group(<span class="hljs-number">1</span>))<br><span class="hljs-comment"># 100</span><br><br></code></pre></td></tr></table></figure><ul><li>re.findall 获取哦所有规定的匹配值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>content = <span class="hljs-string">&quot;&quot;&quot;Xiaoshuaib has 100 bananas;</span><br><span class="hljs-string">Xiaoshuaib has 100 bananas;</span><br><span class="hljs-string">Xiaoshuaib has 100 bananas;</span><br><span class="hljs-string">Xiaoshuaib has 100 bananas;&quot;&quot;&quot;</span><br>res = re.findall(<span class="hljs-string">&#x27;Xi.*?(\d+)\s.*?s;&#x27;</span>,content,re.S)<br><span class="hljs-built_in">print</span>(res)<br><br></code></pre></td></tr></table></figure><ul><li>re.sub 替换对应的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>content = <span class="hljs-string">&quot;&quot;&quot;Xiaoshuaib has 100 bananas;</span><br><span class="hljs-string">Xiaoshuaib has 100 bananas;</span><br><span class="hljs-string">Xiaoshuaib has 100 bananas;</span><br><span class="hljs-string">Xiaoshuaib has 100 bananas;&quot;&quot;&quot;</span><br>content = re.sub(<span class="hljs-string">&#x27;\d+&#x27;</span>,<span class="hljs-string">&#x27;250&#x27;</span>,content)<br><span class="hljs-built_in">print</span>(content)<br><br><span class="hljs-comment"># print</span><br><span class="hljs-comment"># Xiaoshuaib has 250 bananas;</span><br><span class="hljs-comment"># Xiaoshuaib has 250 bananas;</span><br><span class="hljs-comment"># Xiaoshuaib has 250 bananas;</span><br><span class="hljs-comment"># Xiaoshuaib has 250 bananas;</span><br></code></pre></td></tr></table></figure><ul><li>re.complie 匹配封装</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>content = <span class="hljs-string">&#x27;Xiaoshuaib has 100 bananas&#x27;</span><br>pattern = re.complie(<span class="hljs-string">&#x27;^Xi.*(\d+)\s.*s$&#x27;</span>)<br><br>res = re.<span class="hljs-keyword">match</span>(pattern, content)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go 学习笔记</title>
    <link href="/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul><li>编辑器<blockquote><p>使用 <code>Golang IDE</code></p></blockquote></li><li>Redis<blockquote><p>推荐使用 AnotherRedisDesktopManager，跨平台，支持 Mac、Windows 和 Linux</p></blockquote></li><li>数据库管理工具<blockquote><p>推荐使用 TablePlus ，跨平台，支持 Mac、Windows 和 Linux。</p></blockquote></li></ul><h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><h3 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h3><ol><li>登录、注册、找回密码、话题模块、分类模块、友情链接</li></ol><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><blockquote><p>这里直接使用<code>golang IDE</code> 创建，默认使用 <code>$GOPATH</code> </p></blockquote><h4 id="gitignore-文件"><a href="#gitignore-文件" class="headerlink" title=".gitignore 文件"></a>.gitignore 文件</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs clean">tmp<br>.env<br>gohub<br>.DS_Store<br>.history<br><br># Golang #<br>######################<br># `go test -c` 生成的二进制文件<br>*.test<br># go coverage 工具<br>*.out<br>*.prof<br>*.cgo1.go<br>*.cgo2.c<br>_cgo_defun.c<br>_cgo_gotypes.go<br>_cgo_export.*<br><br># 编译文件 #<br>###################<br>*.com<br>*.<span class="hljs-keyword">class</span><br>*.dll<br>*.exe<br>*.o<br>*.so<br><br># 压缩包 #<br>############<br># Git 自带压缩,如果这些压缩包里有代码,建议解压后 commit<br>*<span class="hljs-number">.7</span>z<br>*.dmg<br>*.gz<br>*.iso<br>*.jar<br>*.rar<br>*.tar<br>*.zip<br><br># 日志文件和数据库 #<br>######################<br>*.log<br>*.sqlite<br>*.db<br><br># 临时文件 #<br>######################<br>tmp/<br>.tmp/<br><br># 系统生成文件 #<br>######################<br>.DS_Store<br>.DS_Store?<br>.AppleDouble<br>.LSOverride<br>._*<br>.Spotlight-V100<br>.Trashes<br>ehthumbs.db<br>Thumbs.db<br>.TemporaryItems<br>.fseventsd<br>.VolumeIcon.icns<br>.com.apple.timemachine.donotpresent<br><br># IDE 和编辑器 #<br>######################<br>.idea/<br>/go_build_*<br>out/<br>.vscode/<br>.vscode/settings.json<br>*.sublime*<br>__debug_bin<br>.project<br><br># 前端工具链 #<br>######################<br>.sass-cache<span class="hljs-comment">/*</span><br><span class="hljs-comment">node_modules/</span><br></code></pre></td></tr></table></figure><h4 id="Air-自动重载"><a href="#Air-自动重载" class="headerlink" title="Air 自动重载"></a>Air 自动重载</h4><blockquote><p>安装</p></blockquote><p>使用以下命令来安装 air ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs base">GO111MODULE=on  go install github.com/cosmtrek/air@latest<br></code></pre></td></tr></table></figure><blockquote><p>Windows 下也可以手动安装，进入 <a href="github.com/cosmtrek/air/releases">github.com&#x2F;cosmtrek&#x2F;air&#x2F;releases</a> 下载后放入 Go 安装目录下的 bin 目录，重命名为 air.exe。</p></blockquote><blockquote><p>安装成功</p></blockquote><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">air -v</span><br><br></code></pre></td></tr></table></figure><blockquote><p>添加 <code>.air.toml</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs base"># https://github.com/cosmtrek/air/blob/master/air_example.toml TOML 格式的配置文件<br><br># 工作目录<br># 使用 . 或绝对路径，请注意 `tmp_dir` 目录必须在 `root` 目录下<br>root = &quot;.&quot;<br>tmp_dir = &quot;tmp&quot;<br><br>[build]<br>  # 由`cmd`命令得到的二进制文件名<br>  # Windows平台示例：bin = &quot;./tmp/main.exe&quot;<br>  bin = &quot;./tmp/main&quot;<br>  # 只需要写你平常编译使用的shell命令。你也可以使用 `make`<br>  # Windows平台示例: cmd = &quot;go build -o ./tmp/main.exe .&quot;<br>  cmd = &quot;go build -o ./tmp/main .&quot;<br>  # 如果文件更改过于频繁，则没有必要在每次更改时都触发构建。可以设置触发构建的延迟时间<br>  delay = 1000<br>  # 忽略这些文件扩展名或目录<br>  exclude_dir = [&quot;assets&quot;, &quot;tmp&quot;, &quot;vendor&quot;,&quot;public/uploads&quot;]<br>  # 忽略以下文件<br>  exclude_file = []<br>  # 使用正则表达式进行忽略文件设置<br>  exclude_regex = []<br>  # 忽略未变更的文件<br>  exclude_unchanged = false<br>  # 监控系统链接的目录<br>  follow_symlink = false<br>  # 自定义参数，可以添加额外的编译标识，例如添加 GIN_MODE=release<br>  full_bin = &quot;&quot;<br>  # 监听以下指定目录的文件<br>  include_dir = []<br>  # 监听以下文件扩展名的文件.<br>  include_ext = [&quot;go&quot;, &quot;tpl&quot;, &quot;tmpl&quot;, &quot;html&quot;, &quot;gohtml&quot;, &quot;env&quot;]<br>  # kill 命令延迟<br>  kill_delay = &quot;0s&quot;<br>  # air的日志文件名，该日志文件放置在你的`tmp_dir`中<br>  log = &quot;build-errors.log&quot;<br>  # 在 kill 之前发送系统中断信号，windows 不支持此功能<br>  send_interrupt = false<br>  # error 发生时结束运行<br>  stop_on_error = true<br><br>[color]<br>  # 自定义每个部分显示的颜色。如果找不到颜色，使用原始的应用程序日志。<br>  app = &quot;&quot;<br>  build = &quot;yellow&quot;<br>  main = &quot;magenta&quot;<br>  runner = &quot;green&quot;<br>  watcher = &quot;cyan&quot;<br><br>[log]<br>  # 显示日志时间<br>  time = false<br><br>[misc]<br>  # 退出时删除tmp目录<br>  clean_on_exit = false<br></code></pre></td></tr></table></figure><h4 id="集成-gin"><a href="#集成-gin" class="headerlink" title="集成 gin"></a>集成 gin</h4><blockquote><p>安装 <code>gin</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs base">go get github.com/gin-gonic/gin<br></code></pre></td></tr></table></figure><p>修改 <code>mian.go</code> 文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// main.go  </span><br>    <span class="hljs-keyword">package</span> main<br><br>    <span class="hljs-keyword">import</span> (<br>        <span class="hljs-string">&quot;net/http&quot;</span><br><br>        <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>    )<br><br>    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-comment">// 初始化 Gin 实例</span><br>        r := gin.Default()<br><br>        <span class="hljs-comment">// 注册一个路由</span><br>        r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br><br>            <span class="hljs-comment">// 以 JSON 格式响应</span><br>            c.JSON(http.StatusOK, gin.H&#123;<br>                <span class="hljs-string">&quot;Hello&quot;</span>: <span class="hljs-string">&quot;World!&quot;</span>,<br>            &#125;)<br>        &#125;)<br><br>        <span class="hljs-comment">// 运行服务</span><br>        r.Run()<br>    &#125;<br></code></pre></td></tr></table></figure><p>上面的 gin 初始化的地方，以下两行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">r := gin.New()<br>r.Use(gin.Logger(), gin.Recovery())<br></code></pre></td></tr></table></figure><p>等于我们第一个 Hello World 的一行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">r := gin.Default()<br></code></pre></td></tr></table></figure><p>查看 Default 方法的源码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Default</span><span class="hljs-params">()</span></span> *Engine &#123;<br>    debugPrintWARNINGDefault()<br>    engine := New()<br>    engine.Use(Logger(), Recovery())<br>    <span class="hljs-keyword">return</span> engine<br>&#125;<br></code></pre></td></tr></table></figure><p>Default 返回的是一个 Engine 对象。且默认帮我们注册了两个中间件，Logger 和 Recovery 中间件。这里暂时不深究这两个中间件，后面的课程中我们会根据需要定制自己的中间件。这里将他们写出来，方便后面的修改。</p><p>air 自动重载程序以后，也可以看到我们的端口已经绑定在 8000 端口了：</p><h4 id="自定义-404-Handle"><a href="#自定义-404-Handle" class="headerlink" title="自定义 404 Handle"></a>自定义 404 Handle</h4><p>下面我们来加入 404 处理，利用 Engine 对象的 NoRoute 方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;net/http&quot;</span><br>    <span class="hljs-string">&quot;strings&quot;</span><br><br>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    .<br>    . <br>    .<br><br>    <span class="hljs-comment">// 处理 404 请求</span><br>    r.NoRoute(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        <span class="hljs-comment">// 获取标头信息的 Accept 信息</span><br>        acceptString := c.Request.Header.Get(<span class="hljs-string">&quot;Accept&quot;</span>)<br>        <span class="hljs-keyword">if</span> strings.Contains(acceptString, <span class="hljs-string">&quot;text/html&quot;</span>) &#123;<br>            <span class="hljs-comment">// 如果是 HTML 的话</span><br>            c.String(http.StatusNotFound, <span class="hljs-string">&quot;页面返回 404&quot;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 默认返回 JSON</span><br>            c.JSON(http.StatusNotFound, gin.H&#123;<br>                <span class="hljs-string">&quot;error_code&quot;</span>:    <span class="hljs-number">404</span>,<br>                <span class="hljs-string">&quot;error_message&quot;</span>: <span class="hljs-string">&quot;路由未定义，请确认 url 和请求方法是否正确。&quot;</span>,<br>            &#125;)<br>        &#125;<br>    &#125;)<br><br>    <span class="hljs-comment">// 运行服务</span><br>    r.Run(<span class="hljs-string">&quot;:8000&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>c.Request</code> 是 <code>gin</code> 封装的请求对象，所有用户的请求信息，都可以从这个对象中获取。打开 <code>Postman</code>，访问 <code>http://localhost:8000/no-found</code> ，注意我们已经修改为 <code>8000</code> 端口了，可以看到提示信息了。</p><h4 id="关注项目的错误提示"><a href="#关注项目的错误提示" class="headerlink" title="关注项目的错误提示"></a>关注项目的错误提示</h4><h4 id="初始化路由"><a href="#初始化路由" class="headerlink" title="初始化路由"></a>初始化路由</h4><p>按照目标项目结构来调整代码。</p><ul><li>创建 bootstrap 包</li><li>初始化路由</li><li>注册 api 路由</li></ul><h5 id="创建-bootstrap-包"><a href="#创建-bootstrap-包" class="headerlink" title="创建 bootstrap 包"></a>创建 bootstrap 包</h5><p>bootstrap&#x2F;route.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package bootstrap 处理程序初始化逻辑</span><br><span class="hljs-keyword">package</span> bootstrap<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;gohub/routes&quot;</span><br>    <span class="hljs-string">&quot;net/http&quot;</span><br>    <span class="hljs-string">&quot;strings&quot;</span><br><br>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-comment">// SetupRoute 路由初始化</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SetupRoute</span><span class="hljs-params">(router *gin.Engine)</span></span> &#123;<br><br>    <span class="hljs-comment">// 注册全局中间件</span><br>    registerGlobalMiddleWare(router)<br><br>    <span class="hljs-comment">//  注册 API 路由</span><br>    routes.RegisterAPIRoutes(router)<br><br>    <span class="hljs-comment">//  配置 404 路由</span><br>    setup404Handler(router)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">registerGlobalMiddleWare</span><span class="hljs-params">(router *gin.Engine)</span></span> &#123;<br>    router.Use(<br>        gin.Logger(),<br>        gin.Recovery(),<br>    )<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">setup404Handler</span><span class="hljs-params">(router *gin.Engine)</span></span> &#123;<br>    <span class="hljs-comment">// 处理 404 请求</span><br>    router.NoRoute(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>        <span class="hljs-comment">// 获取标头信息的 Accept 信息</span><br>        acceptString := c.Request.Header.Get(<span class="hljs-string">&quot;Accept&quot;</span>)<br>        <span class="hljs-keyword">if</span> strings.Contains(acceptString, <span class="hljs-string">&quot;text/html&quot;</span>) &#123;<br>            <span class="hljs-comment">// 如果是 HTML 的话</span><br>            c.String(http.StatusNotFound, <span class="hljs-string">&quot;页面返回 404&quot;</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 默认返回 JSON</span><br>            c.JSON(http.StatusNotFound, gin.H&#123;<br>                <span class="hljs-string">&quot;error_code&quot;</span>:    <span class="hljs-number">404</span>,<br>                <span class="hljs-string">&quot;error_message&quot;</span>: <span class="hljs-string">&quot;路由未定义，请确认 url 和请求方法是否正确。&quot;</span>,<br>            &#125;)<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="路由文件-api-go"><a href="#路由文件-api-go" class="headerlink" title="路由文件 api.go"></a>路由文件 api.go</h4><p>我们所有项目 API 路由，都会统一放在 routes&#x2F;api.go 文件中。创建文件：<br>routes&#x2F;api.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package routes 注册路由</span><br><span class="hljs-keyword">package</span> routes<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;net/http&quot;</span><br><br>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-comment">// RegisterAPIRoutes 注册网页相关路由</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">RegisterAPIRoutes</span><span class="hljs-params">(r *gin.Engine)</span></span> &#123;<br><br>    <span class="hljs-comment">// 测试一个 v1 的路由组，我们所有的 v1 版本的路由都将存放到这里</span><br>    v1 := r.Group(<span class="hljs-string">&quot;/v1&quot;</span>)<br>    &#123;<br>        <span class="hljs-comment">// 注册一个路由</span><br>        v1.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>            <span class="hljs-comment">// 以 JSON 格式响应</span><br>            c.JSON(http.StatusOK, gin.H&#123;<br>                <span class="hljs-string">&quot;Hello&quot;</span>: <span class="hljs-string">&quot;World!&quot;</span>,<br>            &#125;)<br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意这里使用 gin 提供的 r.Group 方法，注册了 v1 的路由组，作为我们的 API 版本区分。<br>随着业务的发展，需求的不断变化，API 的迭代是必然的，很可能当前版本正在使用，而我们就得开发甚至上线一个不兼容的新版本，为了让旧用户可以正常使用，为了保证开发的顺利进行，我们需要控制好 API 的版本区分。<br>这里我们实现的是将版本号直接加入 URL 中：</p><blockquote><p>API 版本区分，大部分的商业 API 项目中都会有此要求。在现实生产环境中，多版本共存是很正常的情况。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs base">https://api.gohub.com/v1<br>https://api.gohub.com/v2<br></code></pre></td></tr></table></figure><h4 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h4><p>在 <code>main.go</code> 中调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;gohub/bootstrap&quot;</span><br><br>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-comment">// new 一个 Gin Engine 实例</span><br>    router := gin.New()<br><br>    <span class="hljs-comment">// 初始化路由绑定</span><br>    bootstrap.SetupRoute(router)<br><br>    <span class="hljs-comment">// 运行服务</span><br>    err := router.Run(<span class="hljs-string">&quot;:3000&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-comment">// 错误处理，端口被占用了或者其他错误</span><br>        fmt.Println(err.Error())<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在我们的 Gohub 项目中，我们只会放一些初始化的代码，其他逻辑的代码我们会使用合理的结构，将他们封装到各自所属的文件和包。</p></blockquote><h4 id="bootstrap-目录和-routes-目录"><a href="#bootstrap-目录和-routes-目录" class="headerlink" title="bootstrap 目录和 routes 目录"></a>bootstrap 目录和 routes 目录</h4><p>我们刚刚创建了两个目录，bootstrap 和 routes。</p><p>bootstrap 目录将存放程序初始化的代码，现在是只有 route ，后面我们还会加上 database, redis, config … 。</p><p>routes 目录存放我们所有项目的路由文件，后面如果我们有 Web 前端，或者 Admin 的路由，可以在此目录下添加 web.go 和 admin.go 。</p><h4 id="配置信息的设计"><a href="#配置信息的设计" class="headerlink" title="配置信息的设计"></a>配置信息的设计</h4><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p>目前的 main.go 里：</p><p>err :&#x3D; router.Run(“:3000”)<br>端口是写死在代码中的，我们需要来优化下。像这种程序配置相关的需求，后续还有有很多，例如</p><p>数据库连接信息<br>Redis 连接信息<br>验证码复杂度<br>邮件服务的配置<br>第三方短信的 KEY 和 秘钥</p><h5 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h5><p>我们的配置信息，将分为两个层级：</p><p>env<br>config<br>接下来我们分别讲解。</p><p>.env<br>一般来讲，项目会运行在多个环境下，例如：</p><p>local —— 本地开发环境（我的机器上、其他开发同事的机器上）<br>testing —— 自动化测试环境<br>stage —— 接近线上环境的测试环境，方便其他成员访问和测试（编辑人员、产品经理、项目经理）<br>production —— 线上生产环境<br>不同的环境下，我们将使用不同的配置。例如 local 环境里，发送短信使用的是测试账号，production 环境下，我们将使用验证了公司信息的发信账号。</p><p>.env 文件里，一般会存放敏感信息，所以不会将其添加到代码版本库中。</p><p>那怎么知道 .env 里有哪些配置项呢？</p><p>我们会添加一个 .env.example 文件，配置项放到这里面做占位符，敏感的信息留空，且将此文件提交到版本库中。部署到新项目中时，参考此文件创建一个 .env 文件，对其进行配置即可。</p><p>config<br>config 是将配置信息存放于 config 目录下，按照单独的逻辑区分单独的配置文件，例如数据库连接信息存放于 config&#x2F;database.go 文件下。</p><p>config 里加载 .env 里的配置项，且可设置缺省值。</p><p>既然有 .env 文件，为何还要 config 呢？</p><p>config 可以提高配置方案灵活度。在 config 里，我们可以为每个配置项设置默认值。也可以做一些简单的数学运算，或者调用 Go 函数进行默认值的处理。我们甚至可以为配置项设置一个回调函数。</p><p>config 文件是要加入代码版本控制器中的，这些代码是固定的。如果要修改一个 config 配置项，就修改其对应的 .env 文件中的配置项即可。</p><p>多个 .env 文件<br>单独的 .env 的设计，是满足一台机器一套环境变量的需求。多个 .env 文件是满足一台机器上运行多套环境变量的需求。</p><p>开发时，除了 local 环境变量，很多时候还需要 testing 测试相关的环境变量，testing 的配置有别于 local 。例如测试时，一般需要使用不同的数据库，这样才能不污染我们的开发数据库。</p><p>我们可以利用程序参数，在命令行运行主程序时，传参 –env&#x3D;testing 的参数，程序接收到这个参数后会读取 .env.testing 文件，而不是 .env 文件。</p><p>–env 的参数不需要限制值，取到以后直接读取对应的文件即可。以下是几个例子：</p><p>–env&#x3D;testing 读取 .env.testing 文件，用以在测试环境使用不同的数据库<br>–env&#x3D;production 读取 .env.production 文件，用以在本地环境中调试线上的第三方服务配置信息（短信、邮件）</p><h5 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h5><p>配置是项目的最基础模块，所以在一开始设计好灵活性，非常重要。</p><p>当然，.env + config 方案不是我们自己发明轮子，很多优秀的开源项目和框架，都有类似的方案。</p><p>本课程将借鉴 PHP 的 Laravel 框架配置信息方案，笔者使用此框架做过几十个商业项目，这个方案在实践中能满足多人开发、以及各种复杂的业务需求。</p><h4 id="配置方案的实现"><a href="#配置方案的实现" class="headerlink" title="配置方案的实现"></a>配置方案的实现</h4><p>config 包是我们自定的包，对 Viper 第三方库的封装。封装以下逻辑：</p><pre><code class="hljs">初始化读取配置文件设置配置项读取配置项</code></pre><p>config 包以外的其他项目代码，将对内部使用依赖包 Viper 无感知。</p><p>这样做的好处是后续以为某些特殊需求，Viper 无法满足需求，或者 Viper 不再维护有更加优秀的第三方包需要替换。除了我们的 config 包，项目中的其他代码我们都不需要动。</p><blockquote><p>安装依赖</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs base">go get github.com/spf13/cast<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs base">go get github.com/spf13/viper<br></code></pre></td></tr></table></figure><h5 id="config-包"><a href="#config-包" class="headerlink" title="config 包"></a>config 包</h5><blockquote><p>pkg&#x2F;config&#x2F;config.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package config 负责配置信息</span><br><span class="hljs-keyword">package</span> config<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;gohub/pkg/helpers&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br><br>    <span class="hljs-string">&quot;github.com/spf13/cast&quot;</span><br>    viperlib <span class="hljs-string">&quot;github.com/spf13/viper&quot;</span> <span class="hljs-comment">// 自定义包名，避免与内置 viper 实例冲突</span><br>)<br><br><span class="hljs-comment">// viper 库实例</span><br><span class="hljs-keyword">var</span> viper *viperlib.Viper<br><br><span class="hljs-comment">// ConfigFunc 动态加载配置信息</span><br><span class="hljs-keyword">type</span> ConfigFunc <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;<br><br><span class="hljs-comment">// ConfigFuncs 先加载到此数组，loadConfig 再动态生成配置信息</span><br><span class="hljs-keyword">var</span> ConfigFuncs <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]ConfigFunc<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-comment">// 1. 初始化 Viper 库</span><br>    viper = viperlib.New()<br>    <span class="hljs-comment">// 2. 配置类型，支持 &quot;json&quot;, &quot;toml&quot;, &quot;yaml&quot;, &quot;yml&quot;, &quot;properties&quot;,</span><br>    <span class="hljs-comment">//             &quot;props&quot;, &quot;prop&quot;, &quot;env&quot;, &quot;dotenv&quot;</span><br>    viper.SetConfigType(<span class="hljs-string">&quot;env&quot;</span>)<br>    <span class="hljs-comment">// 3. 环境变量配置文件查找的路径，相对于 main.go</span><br>    viper.AddConfigPath(<span class="hljs-string">&quot;.&quot;</span>)<br>    <span class="hljs-comment">// 4. 设置环境变量前缀，用以区分 Go 的系统环境变量</span><br>    viper.SetEnvPrefix(<span class="hljs-string">&quot;appenv&quot;</span>)<br>    <span class="hljs-comment">// 5. 读取环境变量（支持 flags）</span><br>    viper.AutomaticEnv()<br><br>    ConfigFuncs = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]ConfigFunc)<br>&#125;<br><br><span class="hljs-comment">// InitConfig 初始化配置信息，完成对环境变量以及 config 信息的加载</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitConfig</span><span class="hljs-params">(env <span class="hljs-type">string</span>)</span></span> &#123;<br>    <span class="hljs-comment">// 1. 加载环境变量</span><br>    loadEnv(env)<br>    <span class="hljs-comment">// 2. 注册配置信息</span><br>    loadConfig()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">loadConfig</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">for</span> name, fn := <span class="hljs-keyword">range</span> ConfigFuncs &#123;<br>        viper.Set(name, fn())<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">loadEnv</span><span class="hljs-params">(envSuffix <span class="hljs-type">string</span>)</span></span> &#123;<br><br>    <span class="hljs-comment">// 默认加载 .env 文件，如果有传参 --env=name 的话，加载 .env.name 文件</span><br>    envPath := <span class="hljs-string">&quot;.env&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(envSuffix) &gt; <span class="hljs-number">0</span> &#123;<br>        filepath := <span class="hljs-string">&quot;.env.&quot;</span> + envSuffix<br>        <span class="hljs-keyword">if</span> _, err := os.Stat(filepath); err == <span class="hljs-literal">nil</span> &#123;<br>            <span class="hljs-comment">// 如 .env.testing 或 .env.stage</span><br>            envPath = filepath<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 加载 env</span><br>    viper.SetConfigName(envPath)<br>    <span class="hljs-keyword">if</span> err := viper.ReadInConfig(); err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-built_in">panic</span>(err)<br>    &#125;<br><br>    <span class="hljs-comment">// 监控 .env 文件，变更时重新加载</span><br>    viper.WatchConfig()<br>&#125;<br><br><span class="hljs-comment">// Env 读取环境变量，支持默认值</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Env</span><span class="hljs-params">(envName <span class="hljs-type">string</span>, defaultValue ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(defaultValue) &gt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> internalGet(envName, defaultValue[<span class="hljs-number">0</span>])<br>    &#125;<br>    <span class="hljs-keyword">return</span> internalGet(envName)<br>&#125;<br><br><span class="hljs-comment">// Add 新增配置项</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Add</span><span class="hljs-params">(name <span class="hljs-type">string</span>, configFn ConfigFunc)</span></span> &#123;<br>    ConfigFuncs[name] = configFn<br>&#125;<br><br><span class="hljs-comment">// Get 获取配置项</span><br><span class="hljs-comment">// 第一个参数 path 允许使用点式获取，如：app.name</span><br><span class="hljs-comment">// 第二个参数允许传参默认值</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Get</span><span class="hljs-params">(path <span class="hljs-type">string</span>, defaultValue ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> GetString(path, defaultValue...)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">internalGet</span><span class="hljs-params">(path <span class="hljs-type">string</span>, defaultValue ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br>    <span class="hljs-comment">// config 或者环境变量不存在的情况</span><br>    <span class="hljs-keyword">if</span> !viper.IsSet(path) || helpers.Empty(viper.Get(path)) &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(defaultValue) &gt; <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span> defaultValue[<span class="hljs-number">0</span>]<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> viper.Get(path)<br>&#125;<br><br><span class="hljs-comment">// GetString 获取 String 类型的配置信息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetString</span><span class="hljs-params">(path <span class="hljs-type">string</span>, defaultValue ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> cast.ToString(internalGet(path, defaultValue...))<br>&#125;<br><br><span class="hljs-comment">// GetInt 获取 Int 类型的配置信息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetInt</span><span class="hljs-params">(path <span class="hljs-type">string</span>, defaultValue ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">int</span> &#123;<br>    <span class="hljs-keyword">return</span> cast.ToInt(internalGet(path, defaultValue...))<br>&#125;<br><br><span class="hljs-comment">// GetFloat64 获取 float64 类型的配置信息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetFloat64</span><span class="hljs-params">(path <span class="hljs-type">string</span>, defaultValue ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">float64</span> &#123;<br>    <span class="hljs-keyword">return</span> cast.ToFloat64(internalGet(path, defaultValue...))<br>&#125;<br><br><span class="hljs-comment">// GetInt64 获取 Int64 类型的配置信息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetInt64</span><span class="hljs-params">(path <span class="hljs-type">string</span>, defaultValue ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">int64</span> &#123;<br>    <span class="hljs-keyword">return</span> cast.ToInt64(internalGet(path, defaultValue...))<br>&#125;<br><br><span class="hljs-comment">// GetUint 获取 Uint 类型的配置信息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetUint</span><span class="hljs-params">(path <span class="hljs-type">string</span>, defaultValue ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">uint</span> &#123;<br>    <span class="hljs-keyword">return</span> cast.ToUint(internalGet(path, defaultValue...))<br>&#125;<br><br><span class="hljs-comment">// GetBool 获取 Bool 类型的配置信息</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetBool</span><span class="hljs-params">(path <span class="hljs-type">string</span>, defaultValue ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">return</span> cast.ToBool(internalGet(path, defaultValue...))<br>&#125;<br><br><span class="hljs-comment">// GetStringMapString 获取结构数据</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetStringMapString</span><span class="hljs-params">(path <span class="hljs-type">string</span>)</span></span> <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span> &#123;<br>    <span class="hljs-keyword">return</span> viper.GetStringMapString(path)<br>&#125;<br></code></pre></td></tr></table></figure><p>上面有一个 helpers.Empty() 方法未定义，现在定义此方法：</p><blockquote><p>pkg&#x2F;helpers&#x2F;helpers.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package helpers 存放辅助方法</span><br><span class="hljs-keyword">package</span> helpers<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;reflect&quot;</span><br><br><span class="hljs-comment">// Empty 类似于 PHP 的 empty() 函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Empty</span><span class="hljs-params">(val <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">if</span> val == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    v := reflect.ValueOf(val)<br>    <span class="hljs-keyword">switch</span> v.Kind() &#123;<br>    <span class="hljs-keyword">case</span> reflect.String, reflect.Array:<br>        <span class="hljs-keyword">return</span> v.Len() == <span class="hljs-number">0</span><br>    <span class="hljs-keyword">case</span> reflect.Map, reflect.Slice:<br>        <span class="hljs-keyword">return</span> v.Len() == <span class="hljs-number">0</span> || v.IsNil()<br>    <span class="hljs-keyword">case</span> reflect.Bool:<br>        <span class="hljs-keyword">return</span> !v.Bool()<br>    <span class="hljs-keyword">case</span> reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:<br>        <span class="hljs-keyword">return</span> v.Int() == <span class="hljs-number">0</span><br>    <span class="hljs-keyword">case</span> reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:<br>        <span class="hljs-keyword">return</span> v.Uint() == <span class="hljs-number">0</span><br>    <span class="hljs-keyword">case</span> reflect.Float32, reflect.Float64:<br>        <span class="hljs-keyword">return</span> v.Float() == <span class="hljs-number">0</span><br>    <span class="hljs-keyword">case</span> reflect.Interface, reflect.Ptr:<br>        <span class="hljs-keyword">return</span> v.IsNil()<br>    &#125;<br>    <span class="hljs-keyword">return</span> reflect.DeepEqual(val, reflect.Zero(v.Type()).Interface())<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="创建配置信息"><a href="#创建配置信息" class="headerlink" title="创建配置信息"></a>创建配置信息</h5><blockquote><p>config&#x2F;app.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package config 站点配置信息</span><br><span class="hljs-keyword">package</span> config<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;gohub/pkg/config&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>    config.Add(<span class="hljs-string">&quot;app&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125; &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<br><br>            <span class="hljs-comment">// 应用名称</span><br>            <span class="hljs-string">&quot;name&quot;</span>: config.Env(<span class="hljs-string">&quot;APP_NAME&quot;</span>, <span class="hljs-string">&quot;Gohub&quot;</span>),<br><br>            <span class="hljs-comment">// 当前环境，用以区分多环境，一般为 local, stage, production, test</span><br>            <span class="hljs-string">&quot;env&quot;</span>: config.Env(<span class="hljs-string">&quot;APP_ENV&quot;</span>, <span class="hljs-string">&quot;production&quot;</span>),<br><br>            <span class="hljs-comment">// 是否进入调试模式</span><br>            <span class="hljs-string">&quot;debug&quot;</span>: config.Env(<span class="hljs-string">&quot;APP_DEBUG&quot;</span>, <span class="hljs-literal">false</span>),<br><br>            <span class="hljs-comment">// 应用服务端口</span><br>            <span class="hljs-string">&quot;port&quot;</span>: config.Env(<span class="hljs-string">&quot;APP_PORT&quot;</span>, <span class="hljs-string">&quot;3000&quot;</span>),<br><br>            <span class="hljs-comment">// 加密会话、JWT 加密</span><br>            <span class="hljs-string">&quot;key&quot;</span>: config.Env(<span class="hljs-string">&quot;APP_KEY&quot;</span>, <span class="hljs-string">&quot;33446a9dcf9ea060a0a6532b166da32f304af0de&quot;</span>),<br><br>            <span class="hljs-comment">// 用以生成链接</span><br>            <span class="hljs-string">&quot;url&quot;</span>: config.Env(<span class="hljs-string">&quot;APP_URL&quot;</span>, <span class="hljs-string">&quot;http://localhost:3000&quot;</span>),<br><br>            <span class="hljs-comment">// 设置时区，JWT 里会使用，日志记录里也会使用到</span><br>            <span class="hljs-string">&quot;timezone&quot;</span>: config.Env(<span class="hljs-string">&quot;TIMEZONE&quot;</span>, <span class="hljs-string">&quot;Asia/Shanghai&quot;</span>),<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>config&#x2F;config.go</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Package config 存放程序所有的配置信息</span><br><span class="hljs-keyword">package</span> config<br><br><span class="hljs-comment">// Initialize 触发加载 config 包的所有 init 函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Initialize</span><span class="hljs-params">()</span></span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="env-文件"><a href="#env-文件" class="headerlink" title=".env 文件"></a>.env 文件</h5><blockquote><p>.env</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs base">APP_ENV=local<br>APP_KEY=zBqYyQrPNaIUsnRhsGtHLivjqiMjBVLS<br>APP_DEBUG=true<br>APP_URL=http://localhost:3000<br>APP_LOG_LEVEL=debug<br>APP_PORT=3000<br></code></pre></td></tr></table></figure><h5 id="配置初始化"><a href="#配置初始化" class="headerlink" title="配置初始化"></a>配置初始化</h5><blockquote><p>修改 <code>main.go</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;flag&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;gohub/bootstrap&quot;</span><br>    btsConfig <span class="hljs-string">&quot;gohub/config&quot;</span><br>    <span class="hljs-string">&quot;gohub/pkg/config&quot;</span><br><br>    <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 加载 config 目录下的配置信息</span><br>    btsConfig.Initialize()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><br>    <span class="hljs-comment">// 配置初始化，依赖命令行 --env 参数</span><br>    <span class="hljs-keyword">var</span> env <span class="hljs-type">string</span><br>    flag.StringVar(&amp;env, <span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;加载 .env 文件，如 --env=testing 加载的是 .env.testing 文件&quot;</span>)<br>    flag.Parse()<br>    config.InitConfig(env)<br><br>    <span class="hljs-comment">// new 一个 Gin Engine 实例</span><br>    router := gin.New()<br><br>    <span class="hljs-comment">// 初始化路由绑定</span><br>    bootstrap.SetupRoute(router)<br><br>    <span class="hljs-comment">// 运行服务</span><br>    err := router.Run(<span class="hljs-string">&quot;:&quot;</span> + config.Get(<span class="hljs-string">&quot;app.port&quot;</span>))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-comment">// 错误处理，端口被占用了或者其他错误</span><br>        fmt.Println(err.Error())<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="init-方法"><a href="#init-方法" class="headerlink" title="init 方法"></a>init 方法</h4><p>init 函数有以下逻辑：</p><p>如果一个包定义了 init 函数，Go 运行时会负责在该包初始化时调用它的 init 函数；<br>init 不能被显式调用 ，否则会在编译期间报错；<br>多个包的情况，在初始化该包时，Go 运行时会按照一定的次序逐一顺序地调用该包的 init 函数；<br>每个 init 函数在整个 Go 程序生命周期内仅会被执行一次；<br>一般来说，先被传递给 Go 编译器的源文件中的 init 函数先被执行（main.go 作为起点）；<br>同一个源文件中的多个 init 函数按声明顺序依次执行。<br>关于 init 的加载顺序，这张图给了一个很好的说明：</p><p><img src="https://cdn.learnku.com/uploads/images/202007/13/1/hVMYyqi6EU.png!large" alt="image"></p><h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h3 id="手机或邮箱是否已注册"><a href="#手机或邮箱是否已注册" class="headerlink" title="手机或邮箱是否已注册"></a>手机或邮箱是否已注册</h3><h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><h1 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h1>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云配置子账号，并生成访问控制权限</title>
    <link href="/%E9%98%BF%E9%87%8C%E4%BA%91%E9%85%8D%E7%BD%AE%E5%AD%90%E8%B4%A6%E5%8F%B7%EF%BC%8C%E5%B9%B6%E7%94%9F%E6%88%90%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%9D%83%E9%99%90/"/>
    <url>/%E9%98%BF%E9%87%8C%E4%BA%91%E9%85%8D%E7%BD%AE%E5%AD%90%E8%B4%A6%E5%8F%B7%EF%BC%8C%E5%B9%B6%E7%94%9F%E6%88%90%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<h3 id="新建子账号"><a href="#新建子账号" class="headerlink" title="新建子账号"></a>新建子账号</h3><p>点击右上角的我的， 选择访问控制</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240428-110511@2x.png"></p><p>在身份管理&gt;用户&gt;创建用户，创建一个新用户</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240428-114907@2x.png"></p><p>创建用户，用户名称根据自己的需要设置，访问方式，可以根据自己的需求设置。</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240428-115037@2x.png"></p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240428-115228@2x.png"></p><p>我们需要给新创建的用户设置相应的权限，比如 <code>OSS</code> 管理权限，如下所示</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240428-133704@2x.png"></p><p>创建好用户之后， 我们可以使用子账号登录。</p><h3 id="登录子账号"><a href="#登录子账号" class="headerlink" title="登录子账号"></a>登录子账号</h3><p>我们打开阿里云官网， 选择 <code>RAM</code> 方式登录</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240428-115550@2x.png"></p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240428-115619@2x.png"></p><p>注意，第一次登录，需要修改密码后、重新登录</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240428-115802@2x.png"></p><h3 id="设置Bucket"><a href="#设置Bucket" class="headerlink" title="设置Bucket"></a>设置Bucket</h3><p>根据自己的需求，创建一个 <code>bucket</code> </p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240428-120129@2x.png"></p><p>创建成功， </p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240428-134137@2x.png"></p><h3 id="设置-Bucket-CORS-跨域访问"><a href="#设置-Bucket-CORS-跨域访问" class="headerlink" title="设置 Bucket CORS 跨域访问"></a>设置 <code>Bucket</code> <code>CORS</code> 跨域访问</h3><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240428-134452@2x.png"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p><code>CloudDrop</code> 详细配置可见<a href="https://dev.dgdream.online/2024/04/26/OSS%E4%B8%8A%E4%BC%A0%E5%88%A9%E5%99%A8CloudDorp/">这里</a></p></blockquote><p>把刚刚我们获取的<code>APIM密钥</code>填在<a href="https://github.com/gaowei1012/CloudDrop/releases/tag/v1.0.9">CloudDrop</a>中，如下所示:</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240428-134248@2x.png"></p>]]></content>
    
    
    <categories>
      
      <category>阿里云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腾讯云配置子账号，并生成访问控制权限</title>
    <link href="/%E8%85%BE%E8%AE%AF%E4%BA%91%E9%85%8D%E7%BD%AE%E5%AD%90%E8%B4%A6%E5%8F%B7/"/>
    <url>/%E8%85%BE%E8%AE%AF%E4%BA%91%E9%85%8D%E7%BD%AE%E5%AD%90%E8%B4%A6%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h3 id="新建子账号"><a href="#新建子账号" class="headerlink" title="新建子账号"></a>新建子账号</h3><p>我们首先需要登录腾讯云的<a href="https://cloud.tencent.com/login?s_url=https://cloud.tencent.com/?fromSource=gwzcw.7468276.7468276.7468276&utm_medium=cpc&utm_id=gwzcw.7468276.7468276.7468276">主账号</a>,</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-164637@2x.png"></p><p>点击右上角我的，选择访问控制</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-164857@2x.png"></p><p>点击用户，创建用户</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-165011@2x.png"></p><p>点击创建用户，选择快速创建用户如</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-165055@2x.png"></p><p>填写创建用户信息，</p><blockquote><p>根据自己的需求，给定账号的权限。这里我们需要对 <code>COS</code> <code>bucket</code> 做管理，我们需要给读写权限。</p></blockquote><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-165158@2x.png"></p><p>给定下面的权限，读写、</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-165355@2x.png"></p><p>创建用户成功</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-165752@2x.png"></p><h3 id="保存-SecretId与SecretKey"><a href="#保存-SecretId与SecretKey" class="headerlink" title="保存 SecretId与SecretKey"></a>保存 SecretId与SecretKey</h3><p>保存好我们主账号生成的账号信息，我们现在登录子账号生成 <code>SecretId</code> 和 <code>SecretKey</code> </p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-170101@2x.png"></p><p>这里需要注意📢，第一次登录子账号时，需要修改初始密码</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-170300@2x.png"></p><h3 id="创建访问密码"><a href="#创建访问密码" class="headerlink" title="创建访问密码"></a>创建访问密码</h3><p>我们再个人中心&gt;访问控制，点击进入，找到API密钥管理，创建一条新密钥</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-171228@2x.png"></p><h3 id="创建桶-Bucket"><a href="#创建桶-Bucket" class="headerlink" title="创建桶 Bucket"></a>创建桶 Bucket</h3><p>填写基本信息</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-170604@2x.png"></p><p>设置 <code>Bucket</code> <code>CORS</code> 跨域访问</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-170658@2x.png"></p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-170914@2x.png"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p><code>CloudDrop</code> 详细配置可见<a href="https://dev.dgdream.online/2024/04/26/OSS%E4%B8%8A%E4%BC%A0%E5%88%A9%E5%99%A8CloudDorp/">这里</a></p></blockquote><p>把刚刚我们获取的<code>APIM密钥</code>填在<a href="https://github.com/gaowei1012/CloudDrop/releases/tag/v1.0.9">CloudDrop</a>中，如下所示:</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-171559@2x.png"></p>]]></content>
    
    
    <categories>
      
      <category>腾讯云</category>
      
    </categories>
    
    
    <tags>
      
      <tag>腾讯云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OSS上传文件利器CloudDrop</title>
    <link href="/OSS%E4%B8%8A%E4%BC%A0%E5%88%A9%E5%99%A8CloudDrop/"/>
    <url>/OSS%E4%B8%8A%E4%BC%A0%E5%88%A9%E5%99%A8CloudDrop/</url>
    
    <content type="html"><![CDATA[<blockquote><p>分享一个实用工具，目前适配了 <code>mac</code> 全系列平台，支持 <code>腾讯云COS</code>、<code>阿里云OSS</code>主要功能有以下几点</p></blockquote><h3 id="实现背景"><a href="#实现背景" class="headerlink" title="实现背景"></a>实现背景</h3><blockquote><p>为了减少每次上传文件到 <code>bucket</code> 中的繁琐，需要登录账号，切换不同账号浪费时间、减少管理成本。</p></blockquote><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>支持自定义配置 <code>COS</code> 和 <code>OSS</code></li><li>支持多账户管理</li><li>支持在 <code>bucket</code> 中创建自定义文件夹</li><li>支持上传文件，修改上传文件名称</li><li>支持自动复制上传地址</li><li>支持自动复制 <code>markdown</code> 格式文件（图片，文件）</li><li>支持图片、文件、视频预览</li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><p>现在支持了腾讯云 <code>COS</code> 和 阿里云 <code>OSS</code>, 选中新建配置，填写我们在腾讯云或者阿里云官网拿到的私钥，主要：这里需要保管好自己的秘钥不被泄露（本软件不收集任何用户信息）：</p><!-- ![](https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-155023@2x.png) --><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240505-223532@2x.png"></p><!-- ![](https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-155221@2x.png) --><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240505-223915@2x.png"></p><!-- ![](https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-155252@2x.png) --><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240505-223959@2x.png"></p><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><blockquote><p>在上传文件前，我们需要选择好配置的 <code>bucket</code> 配置</p></blockquote><!-- ![](https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-155523@2x.png) --><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240505-224302@2x.png"></p><!-- ![](https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-155404@2x.png) --><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240505-224335@2x.png"></p><h4 id="预览上传"><a href="#预览上传" class="headerlink" title="预览上传"></a>预览上传</h4><blockquote><p>这里可以选择你需要看的文件，比如照片文件，点击进去查看，可以看到当前管理<code>bucket</code>下的所有文件</p></blockquote><!-- ![](https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-155625@2x.png) --><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240505-224434@2x.png"></p><!-- ![](https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-155804@2x.png) --><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240505-224403@2x.png"></p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><blockquote><p>我们在设置中可以开启具体的功能</p></blockquote><ul><li>开启上传后自动复制<code>URL</code>，上传一个文件后会自动复制当前上传文件的<code>URL</code>地址</li></ul><!-- ![](https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-155843@2x.png) --><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240505-224513@2x.png"></p><p>— 开启上传前重命名, 在上传前会提示我们修改当前文件名称</p><!-- ![](https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-160129@2x.png) --><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240505-224550@2x.png"></p><ul><li>开启自动复制<code>md</code>图片预览链接, 开启后会成功一个这样的链接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">![](https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240426-160129@2x.png) # 预览图片<br></code></pre></td></tr></table></figure><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>下载<a href="https://github.com/gaowei1012/CloudDrop/releases/tag/v1.0.9">地址</a></p><p>欢迎大家反馈问题！</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sentry私有化部署</title>
    <link href="/Sentry%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <url>/Sentry%E7%A7%81%E6%9C%89%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我这里用于测试，所有购买了一台腾讯云云服务器，按量付费。具体配置参数如下:</p></blockquote><blockquote><p>也可以本地安装，本地测试使用 mac 电脑，配置好点的，不然会卡死电脑。</p></blockquote><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/2.png"></p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/3.png"></p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>我选用的 <code>Centos7 x64</code> ，配置：</p><ul><li>4核 8GB 10Mbps</li><li>SSD云盘 20G</li><li>Sentry 9.1</li></ul><h3 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h3><blockquote><p>Sentry搭建方式有两种：1.通过 <code>Docker</code>；2.通过<code>Python</code></p></blockquote><h5 id="1-安装管理repository及扩展包的工具"><a href="#1-安装管理repository及扩展包的工具" class="headerlink" title="1. 安装管理repository及扩展包的工具"></a>1. 安装管理repository及扩展包的工具</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils<br></code></pre></td></tr></table></figure><h5 id="2-添加-yum-源"><a href="#2-添加-yum-源" class="headerlink" title="2. 添加 yum 源"></a>2. 添加 yum 源</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h5 id="3-安装并启动-Dcoker"><a href="#3-安装并启动-Dcoker" class="headerlink" title="3. 安装并启动 Dcoker"></a>3. 安装并启动 <code>Dcoker</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y docker-ce<br>systemctl start docker<br></code></pre></td></tr></table></figure><h5 id="4-安装-pip，-用于安装-docker-compose"><a href="#4-安装-pip，-用于安装-docker-compose" class="headerlink" title="4. 安装 pip， 用于安装 docker-compose"></a>4. 安装 <code>pip</code>， 用于安装 <code>docker-compose</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install epel-release<br>yum install -y python-pip<br></code></pre></td></tr></table></figure><h5 id="5-安装-dcoker-compose"><a href="#5-安装-dcoker-compose" class="headerlink" title="5. 安装 dcoker-compose"></a>5. 安装 <code>dcoker-compose</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install docker-compose<br></code></pre></td></tr></table></figure><h5 id="6-安装-git"><a href="#6-安装-git" class="headerlink" title="6. 安装 git"></a>6. 安装 <code>git</code></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install git<br></code></pre></td></tr></table></figure><h4 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/getsentry/onpremise</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载最新的</span><br>git clone https://github.com/getsentry/self-hosted.git<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行一键安装命令，等待跑代码完毕即可</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">中间按照提示设置账号密码即可</span><br>cd self-hosted &amp;&amp; ./install.sh<br></code></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>启动 <code>Docker</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker compose up -d<br></code></pre></td></tr></table></figure><blockquote><p>访问 0.0.0.0:9000 , ip:9000</p></blockquote><blockquote><p>等待结束， 这个过程中会让你设置登录邮箱和密码，对应设置上即可。等待安装完成。</p></blockquote><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/4.png"></p><h4 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h4><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/6.png"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>项目&gt;选择创建项目，这里可以根据场景选择你需要的项目。<br><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/5.png"></p><p>查看项目监控</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/7.png"></p>]]></content>
    
    
    <categories>
      
      <category>前端监控</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端监控</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js 实现 new Object</title>
    <link href="/js%20%E5%AE%9E%E7%8E%B0%20nwe%20Object/"/>
    <url>/js%20%E5%AE%9E%E7%8E%B0%20nwe%20Object/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这里只贴上代码</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 创建一个空对象</span><br>  <span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()<br>  <span class="hljs-comment">// 获取对象的构造函数</span><br>  <span class="hljs-keyword">let</span> <span class="hljs-title class_">Con</span> = [].<span class="hljs-property">shift</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>)<br>  <span class="hljs-comment">// 链接到原型链</span><br>  obg.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Con</span>.<span class="hljs-property">propotype</span><br>  <span class="hljs-comment">// 绑定this, 执行构造函数</span><br>  <span class="hljs-keyword">let</span> result = <span class="hljs-title class_">Con</span>.<span class="hljs-property">apply</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>)<br>  <span class="hljs-comment">// 确保new出来的是个对象</span><br>  <span class="hljs-keyword">typeof</span> result === <span class="hljs-string">&#x27;object&#x27;</span> ? result : obj<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js 实现 instanceof</title>
    <link href="/js%20%E5%AE%9E%E7%8E%B0%20instanceof/"/>
    <url>/js%20%E5%AE%9E%E7%8E%B0%20instanceof/</url>
    
    <content type="html"><![CDATA[<blockquote><p><code>instanceof</code> 实现原理， 只要右边表达式的 <code>prototype</code> 在左边的原型之上。因此 <code>instanceof</code> 在查找过程中会遍历左边的变量的原型链，直至找到右边变量的 <code>prototype</code> 为止，如果找到 返回 <code>true</code>, 如果查找失败则返回 <code>false</code>。</p></blockquote><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">instanceof</span>(<span class="hljs-params">left, right</span>) &#123;<br>  <span class="hljs-comment">// 取右边表达式的原型 prototype</span><br>  <span class="hljs-keyword">let</span> rightPrototype = right.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br>  <span class="hljs-comment">// 取左边表达式的 原型链 __proto__</span><br>  left = left.<span class="hljs-property">__proto__</span><br><br>  <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">if</span> (left === <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (rightPrototype === left) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>    left = left.<span class="hljs-property">__proto__</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们来举一个例子<code>🌰</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-title class_">Object</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>; <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Function</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>; <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Function</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>; <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Foo</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Foo</span>; <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Foo</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>; <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Foo</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="原型图解："><a href="#原型图解：" class="headerlink" title="原型图解："></a>原型图解：</h4><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/1.png"></p>]]></content>
    
    
    <categories>
      
      <category>javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go基础入门</title>
    <link href="/goland%E8%85%BE%E8%AE%AF%E4%BA%91%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/"/>
    <url>/goland%E8%85%BE%E8%AE%AF%E4%BA%91%E5%8F%91%E9%80%81%E7%9F%AD%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="腾讯云短信发送"><a href="#腾讯云短信发送" class="headerlink" title="腾讯云短信发送"></a>腾讯云短信发送</h3>]]></content>
    
    
    <categories>
      
      <category>goland</category>
      
    </categories>
    
    
    <tags>
      
      <tag>goland</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo配置Google Search</title>
    <link href="/hexo%E9%85%8D%E7%BD%AEGoogle%20Search/"/>
    <url>/hexo%E9%85%8D%E7%BD%AEGoogle%20Search/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在写文章的时候，我们想让我们的网站排名靠前，并且搜索某个关键字可以找到我们当前的文章，这里我们需要使用“搜索引擎优化”<code>SEO</code>，下面我们以<code>Google Search</code>为例，来为我们的网站配置。</p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>打开<a href="https://search.google.com/search-console/about">Google Search</a>,我们选择如下图:</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/11-rc-upload-1712740006002-27.png"></p><p>填写我们配置好的域名，如下图:</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/12-rc-upload-1712740006002-29.png"></p><p>将下载的文件<code>copy</code>到我们的博客<code>source</code>文件夹中，这里需要📢一点，在将文任何<code>.html</code>的文件放在<code>source</code>中在我们将博客发表时<code>.html</code>文件会被编译成一个标准的<code>html</code>文件对象，这里我们需要再 <code>_config.yml</code>中找到<code>skip_render</code>将需要忽略编译的文件都放在这个下面；这样文件不会被编译。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">skip_render:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;test.html&quot;</span><br></code></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>接着我们进入到 <code>Google Search</code> 中点击验证即可</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/13-rc-upload-1712740006002-31.png"></p><h3 id="添加站点地图"><a href="#添加站点地图" class="headerlink" title="添加站点地图"></a>添加站点地图</h3><p>在控制面板中配置站点地图，如下图所示：<br><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/14-rc-upload-1712740006002-33.png"></p><p>等待一天后来查看收录的效果即可。</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo配置自定义域名</title>
    <link href="/hexo%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/"/>
    <url>/hexo%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<blockquote><p>我们通常在配置好 <code>Hexo</code> 博客后，会发现我们的域名不是怎么好看，例如我之前申请的一个博客 <code>https://gaowei1012.github.io</code>，确实是又长有难记忆。还好 <code>Hexo</code> 可以提供我们自定义域名 <code>https://dev.dgdream.online</code>，下面我们来介绍如何配置与使用。</p></blockquote><h3 id="域名申请"><a href="#域名申请" class="headerlink" title="域名申请"></a>域名申请</h3><p>我们首先在网上申请一个自己喜欢的域名，例如我在<code>腾讯云</code>申请的域名，如下图所示：<br><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/1-rc-upload-1712740006002-15.png"></p><p>申请好的域名，我们来到域名管理控制台。选择我们刚刚购买的域名（这里的域名需要先备案，否则在中国会有问题），小伙伴记住啦！</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/2-rc-upload-1712740006002-17.png"></p><h3 id="添加解析"><a href="#添加解析" class="headerlink" title="添加解析"></a>添加解析</h3><p>添加一份解析域名解析记录。<br><img src="https://upload-go.oss-cn-hangzhou.aliyuncs.com/undefined/3-rc-upload-1712748824162-13.png"></p><p>添加解析完成后，我们需要等待些时间，等待解析生效。</p><h3 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h3><blockquote><p>我这里使用的是<code>github</code>搭建的<code>hexo</code>博客，这里需要注意，如果你是使用<code>gitee</code>需要先完成实名认证。在进行下面的配置。</p></blockquote><p>在<code>github</code>项目中找到这个项目，在设置中找到<code>page</code>配置，如下图所示：</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/4-rc-upload-1712740006002-19.png"></p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/5-rc-upload-1712740006002-21.png"></p><blockquote><p>在项目中新建 <code>CNAME</code> 文件， 里面添加我们刚刚在<code>github</code>配置的域名。</p></blockquote><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/6-rc-upload-1712740006002-23.png"></p><p>还需要再我们项目中<code>_config.yml</code> 文件中修改，修改项目的 <code>url</code>地址为我们再 <code>github</code>中设置的地址，如下图：<br><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/7-rc-upload-1712740006002-25.png"></p><p>至此，我们的自定义域名配置完成。</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS 一维数组，转对应二维数组</title>
    <link href="/js%20%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%EF%BC%8C%E8%BD%AC%E5%AF%B9%E5%BA%94%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    <url>/js%20%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%EF%BC%8C%E8%BD%AC%E5%AF%B9%E5%BA%94%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在一些业务中，经常我们会处理这样一些数据，如下显示</p></blockquote><p>数据源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = [<br>      &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;parentId&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;createTime&quot;</span>: <span class="hljs-string">&quot;2020-02-02T06:50:36.000+00:00&quot;</span>,<br>        <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;商品&quot;</span>,<br>        <span class="hljs-string">&quot;level&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;sort&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;pms&quot;</span>,<br>        <span class="hljs-string">&quot;icon&quot;</span>: <span class="hljs-string">&quot;product&quot;</span>,<br>        <span class="hljs-string">&quot;hidden&quot;</span>: <span class="hljs-number">0</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-string">&quot;parentId&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;createTime&quot;</span>: <span class="hljs-string">&quot;2020-02-02T06:51:50.000+00:00&quot;</span>,<br>        <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;商品列表&quot;</span>,<br>        <span class="hljs-string">&quot;level&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;sort&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;product&quot;</span>,<br>        <span class="hljs-string">&quot;icon&quot;</span>: <span class="hljs-string">&quot;product-list&quot;</span>,<br>        <span class="hljs-string">&quot;hidden&quot;</span>: <span class="hljs-number">0</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-string">&quot;parentId&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;createTime&quot;</span>: <span class="hljs-string">&quot;2020-02-02T06:52:44.000+00:00&quot;</span>,<br>        <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;添加商品&quot;</span>,<br>        <span class="hljs-string">&quot;level&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;sort&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;addProduct&quot;</span>,<br>        <span class="hljs-string">&quot;icon&quot;</span>: <span class="hljs-string">&quot;product-add&quot;</span>,<br>        <span class="hljs-string">&quot;hidden&quot;</span>: <span class="hljs-number">0</span><br>      &#125;<br>    ]<br></code></pre></td></tr></table></figure><p>逻辑处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">toTree</span> = (<span class="hljs-params">data, config</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; id = <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-attr">parentId</span>: pId = <span class="hljs-string">&#x27;parentId&#x27;</span> &#125; = config || &#123;&#125;<br>  <span class="hljs-keyword">const</span> ids = data.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> _[id])<br>  <span class="hljs-keyword">const</span> result = []<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">waitChecked</span>: any = []<br>  data.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> (ids.<span class="hljs-title function_">includes</span>(_[pId]) ? waitChecked : result).<span class="hljs-title function_">push</span>(_))<br>  <span class="hljs-keyword">const</span> <span class="hljs-attr">flatData</span>: any = [...result]<br><br>  <span class="hljs-keyword">while</span> (waitChecked.<span class="hljs-property">length</span>) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">flatIds</span>: any = flatData.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> _[id])<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">node</span>: any = waitChecked.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> flatIds.<span class="hljs-title function_">includes</span>(_[pId]))<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">parNode</span>: any = flatData.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">_</span>) =&gt;</span> _[id] === node[pId])<br>    waitChecked.<span class="hljs-title function_">splice</span>(waitChecked.<span class="hljs-title function_">indexOf</span>(node), <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> (parNode.<span class="hljs-property">children</span>) &#123;<br>      parNode.<span class="hljs-property">children</span>.<span class="hljs-title function_">push</span>(node)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      parNode.<span class="hljs-property">children</span> = [node]<br>    &#125;<br>    flatData.<span class="hljs-title function_">push</span>(node)<br>  &#125;<br>  <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><p>业务使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> result = <span class="hljs-title function_">toTree</span>(data, <span class="hljs-literal">null</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;result&#x27;</span>, result)<br></code></pre></td></tr></table></figure><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WechatIMG75372-rc-upload-1712740006002-12.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>前端面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nextjs postgres 配置使用</title>
    <link href="/nextjs%20postgres%20%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/"/>
    <url>/nextjs%20postgres%20%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>接上篇 <a href="https://www.yuque.com/zhinian-armcn/frontend/erltq630n4gczldb?singleDoc#">nextjs postgres</a>, 这篇文章来讲解怎么在 <code>nextjs</code> 项目中使用 <code>postgres</code> 数据库。<br>我们来到 <a href="https://vercel.com/zhinians-projects">vercel</a> 官网，登录找到我们创建配置的 <code>progress</code> 项目，我们点击项目-&gt;进入详情，点击 <code>storage</code> 查看我们生成好的配置。</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/1-rc-upload-1712392283791-29.png"></p><p>这里我们选择 <code>.env.local</code> 选项，如下图所示：</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/2-rc-upload-1712392283791-31.png"></p><p>点击 <code>Show secret</code> 查看生成的配置文件，复制生成好的文件，到我们项目。在项目的根目录新建一个 <code>.env</code> 文件，把我们在 <code>vercel</code> 中复制的文件粘贴在这里即可。</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/3-rc-upload-1712392283791-33.png"></p><p>新建配置脚本，该脚本会读取本地配置 <code>.env</code> 文件，并且会找到我们写好的 <code>seed.js</code> 读取里面的内容，并创建数据库配置，建表。</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/4-rc-upload-1712392283791-35.png"></p><p>在 <code>scprits/seed.js</code> 目录下创建 <code>seed.js</code> 文件，添加如下内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// seed.js</span><br><span class="hljs-keyword">const</span> &#123; db &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vercel/postgres&#x27;</span>);<br><span class="hljs-keyword">const</span> &#123;<br>  invoices,<br>  customers,<br>  revenue,<br>  users,<br>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../app/lib/placeholder-data.js&#x27;</span>);<br><span class="hljs-keyword">const</span> bcrypt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;bcrypt&#x27;</span>);<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">seedUsers</span>(<span class="hljs-params">client</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">await</span> client.<span class="hljs-property">sql</span><span class="hljs-string">`CREATE EXTENSION IF NOT EXISTS &quot;uuid-ossp&quot;`</span>;<br>    <span class="hljs-comment">// Create the &quot;users&quot; table if it doesn&#x27;t exist</span><br>    <span class="hljs-keyword">const</span> createTable = <span class="hljs-keyword">await</span> client.<span class="hljs-property">sql</span><span class="hljs-string">`</span><br><span class="hljs-string">      CREATE TABLE IF NOT EXISTS users (</span><br><span class="hljs-string">        id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,</span><br><span class="hljs-string">        name VARCHAR(255) NOT NULL,</span><br><span class="hljs-string">        email TEXT NOT NULL UNIQUE,</span><br><span class="hljs-string">        password TEXT NOT NULL</span><br><span class="hljs-string">      );</span><br><span class="hljs-string">    `</span>;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Created &quot;users&quot; table`</span>);<br><br>    <span class="hljs-comment">// Insert data into the &quot;users&quot; table</span><br>    <span class="hljs-keyword">const</span> insertedUsers = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(<br>      users.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">async</span> (user) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> hashedPassword = <span class="hljs-keyword">await</span> bcrypt.<span class="hljs-title function_">hash</span>(user.<span class="hljs-property">password</span>, <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">return</span> client.<span class="hljs-property">sql</span><span class="hljs-string">`</span><br><span class="hljs-string">        INSERT INTO users (id, name, email, password)</span><br><span class="hljs-string">        VALUES (<span class="hljs-subst">$&#123;user.id&#125;</span>, <span class="hljs-subst">$&#123;user.name&#125;</span>, <span class="hljs-subst">$&#123;user.email&#125;</span>, <span class="hljs-subst">$&#123;hashedPassword&#125;</span>)</span><br><span class="hljs-string">        ON CONFLICT (id) DO NOTHING;</span><br><span class="hljs-string">      `</span>;<br>      &#125;),<br>    );<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Seeded <span class="hljs-subst">$&#123;insertedUsers.length&#125;</span> users`</span>);<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      createTable,<br>      <span class="hljs-attr">users</span>: insertedUsers,<br>    &#125;;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error seeding users:&#x27;</span>, error);<br>    <span class="hljs-keyword">throw</span> error;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">seedInvoices</span>(<span class="hljs-params">client</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">await</span> client.<span class="hljs-property">sql</span><span class="hljs-string">`CREATE EXTENSION IF NOT EXISTS &quot;uuid-ossp&quot;`</span>;<br><br>    <span class="hljs-comment">// Create the &quot;invoices&quot; table if it doesn&#x27;t exist</span><br>    <span class="hljs-keyword">const</span> createTable = <span class="hljs-keyword">await</span> client.<span class="hljs-property">sql</span><span class="hljs-string">`</span><br><span class="hljs-string">    CREATE TABLE IF NOT EXISTS invoices (</span><br><span class="hljs-string">    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,</span><br><span class="hljs-string">    customer_id UUID NOT NULL,</span><br><span class="hljs-string">    amount INT NOT NULL,</span><br><span class="hljs-string">    status VARCHAR(255) NOT NULL,</span><br><span class="hljs-string">    date DATE NOT NULL</span><br><span class="hljs-string">  );</span><br><span class="hljs-string">`</span>;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Created &quot;invoices&quot; table`</span>);<br><br>    <span class="hljs-comment">// Insert data into the &quot;invoices&quot; table</span><br>    <span class="hljs-keyword">const</span> insertedInvoices = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(<br>      invoices.<span class="hljs-title function_">map</span>(<br>        <span class="hljs-function">(<span class="hljs-params">invoice</span>) =&gt;</span> client.<span class="hljs-property">sql</span><span class="hljs-string">`</span><br><span class="hljs-string">        INSERT INTO invoices (customer_id, amount, status, date)</span><br><span class="hljs-string">        VALUES (<span class="hljs-subst">$&#123;invoice.customer_id&#125;</span>, <span class="hljs-subst">$&#123;invoice.amount&#125;</span>, <span class="hljs-subst">$&#123;invoice.status&#125;</span>, <span class="hljs-subst">$&#123;invoice.date&#125;</span>)</span><br><span class="hljs-string">        ON CONFLICT (id) DO NOTHING;</span><br><span class="hljs-string">      `</span>,<br>      ),<br>    );<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Seeded <span class="hljs-subst">$&#123;insertedInvoices.length&#125;</span> invoices`</span>);<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      createTable,<br>      <span class="hljs-attr">invoices</span>: insertedInvoices,<br>    &#125;;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error seeding invoices:&#x27;</span>, error);<br>    <span class="hljs-keyword">throw</span> error;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">seedCustomers</span>(<span class="hljs-params">client</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">await</span> client.<span class="hljs-property">sql</span><span class="hljs-string">`CREATE EXTENSION IF NOT EXISTS &quot;uuid-ossp&quot;`</span>;<br><br>    <span class="hljs-comment">// Create the &quot;customers&quot; table if it doesn&#x27;t exist</span><br>    <span class="hljs-keyword">const</span> createTable = <span class="hljs-keyword">await</span> client.<span class="hljs-property">sql</span><span class="hljs-string">`</span><br><span class="hljs-string">      CREATE TABLE IF NOT EXISTS customers (</span><br><span class="hljs-string">        id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,</span><br><span class="hljs-string">        name VARCHAR(255) NOT NULL,</span><br><span class="hljs-string">        email VARCHAR(255) NOT NULL,</span><br><span class="hljs-string">        image_url VARCHAR(255) NOT NULL</span><br><span class="hljs-string">      );</span><br><span class="hljs-string">    `</span>;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Created &quot;customers&quot; table`</span>);<br><br>    <span class="hljs-comment">// Insert data into the &quot;customers&quot; table</span><br>    <span class="hljs-keyword">const</span> insertedCustomers = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(<br>      customers.<span class="hljs-title function_">map</span>(<br>        <span class="hljs-function">(<span class="hljs-params">customer</span>) =&gt;</span> client.<span class="hljs-property">sql</span><span class="hljs-string">`</span><br><span class="hljs-string">        INSERT INTO customers (id, name, email, image_url)</span><br><span class="hljs-string">        VALUES (<span class="hljs-subst">$&#123;customer.id&#125;</span>, <span class="hljs-subst">$&#123;customer.name&#125;</span>, <span class="hljs-subst">$&#123;customer.email&#125;</span>, <span class="hljs-subst">$&#123;customer.image_url&#125;</span>)</span><br><span class="hljs-string">        ON CONFLICT (id) DO NOTHING;</span><br><span class="hljs-string">      `</span>,<br>      ),<br>    );<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Seeded <span class="hljs-subst">$&#123;insertedCustomers.length&#125;</span> customers`</span>);<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      createTable,<br>      <span class="hljs-attr">customers</span>: insertedCustomers,<br>    &#125;;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error seeding customers:&#x27;</span>, error);<br>    <span class="hljs-keyword">throw</span> error;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">seedRevenue</span>(<span class="hljs-params">client</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// Create the &quot;revenue&quot; table if it doesn&#x27;t exist</span><br>    <span class="hljs-keyword">const</span> createTable = <span class="hljs-keyword">await</span> client.<span class="hljs-property">sql</span><span class="hljs-string">`</span><br><span class="hljs-string">      CREATE TABLE IF NOT EXISTS revenue (</span><br><span class="hljs-string">        month VARCHAR(4) NOT NULL UNIQUE,</span><br><span class="hljs-string">        revenue INT NOT NULL</span><br><span class="hljs-string">      );</span><br><span class="hljs-string">    `</span>;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Created &quot;revenue&quot; table`</span>);<br><br>    <span class="hljs-comment">// Insert data into the &quot;revenue&quot; table</span><br>    <span class="hljs-keyword">const</span> insertedRevenue = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(<br>      revenue.<span class="hljs-title function_">map</span>(<br>        <span class="hljs-function">(<span class="hljs-params">rev</span>) =&gt;</span> client.<span class="hljs-property">sql</span><span class="hljs-string">`</span><br><span class="hljs-string">        INSERT INTO revenue (month, revenue)</span><br><span class="hljs-string">        VALUES (<span class="hljs-subst">$&#123;rev.month&#125;</span>, <span class="hljs-subst">$&#123;rev.revenue&#125;</span>)</span><br><span class="hljs-string">        ON CONFLICT (month) DO NOTHING;</span><br><span class="hljs-string">      `</span>,<br>      ),<br>    );<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Seeded <span class="hljs-subst">$&#123;insertedRevenue.length&#125;</span> revenue`</span>);<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      createTable,<br>      <span class="hljs-attr">revenue</span>: insertedRevenue,<br>    &#125;;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error seeding revenue:&#x27;</span>, error);<br>    <span class="hljs-keyword">throw</span> error;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> client = <span class="hljs-keyword">await</span> db.<span class="hljs-title function_">connect</span>();<br><br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">seedUsers</span>(client);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">seedCustomers</span>(client);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">seedInvoices</span>(client);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">seedRevenue</span>(client);<br><br>  <span class="hljs-keyword">await</span> client.<span class="hljs-title function_">end</span>();<br>&#125;<br><br><span class="hljs-title function_">main</span>().<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<br>    <span class="hljs-string">&#x27;An error occurred while attempting to seed the database:&#x27;</span>,<br>    err,<br>  );<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>在项目中 <code>src/ui/lib/placeholder-data.js</code> 创建 <code>placeholder-data.js</code> 文件，复制如下内容到你的项目。下面这些内容会对应插在相应的表里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// placeholder-data.js</span><br><span class="hljs-comment">// This file contains placeholder data that you&#x27;ll be replacing with real data in the Data Fetching chapter:</span><br><span class="hljs-comment">// https://nextjs.org/learn/dashboard-app/fetching-data</span><br><span class="hljs-keyword">const</span> users = [<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;410544b2-4001-4271-9855-fec4b6a6442a&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User&#x27;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;user@nextmail.com&#x27;</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123456&#x27;</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> customers = [<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;3958dc9e-712f-4377-85e9-fec4b6a6442a&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Delba de Oliveira&#x27;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;delba@oliveira.com&#x27;</span>,<br>    <span class="hljs-attr">image_url</span>: <span class="hljs-string">&#x27;/customers/delba-de-oliveira.png&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;3958dc9e-742f-4377-85e9-fec4b6a6442a&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Lee Robinson&#x27;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;lee@robinson.com&#x27;</span>,<br>    <span class="hljs-attr">image_url</span>: <span class="hljs-string">&#x27;/customers/lee-robinson.png&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;3958dc9e-737f-4377-85e9-fec4b6a6442a&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Hector Simpson&#x27;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;hector@simpson.com&#x27;</span>,<br>    <span class="hljs-attr">image_url</span>: <span class="hljs-string">&#x27;/customers/hector-simpson.png&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;50ca3e18-62cd-11ee-8c99-0242ac120002&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Steven Tey&#x27;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;steven@tey.com&#x27;</span>,<br>    <span class="hljs-attr">image_url</span>: <span class="hljs-string">&#x27;/customers/steven-tey.png&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;3958dc9e-787f-4377-85e9-fec4b6a6442a&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Steph Dietz&#x27;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;steph@dietz.com&#x27;</span>,<br>    <span class="hljs-attr">image_url</span>: <span class="hljs-string">&#x27;/customers/steph-dietz.png&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;76d65c26-f784-44a2-ac19-586678f7c2f2&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Michael Novotny&#x27;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;michael@novotny.com&#x27;</span>,<br>    <span class="hljs-attr">image_url</span>: <span class="hljs-string">&#x27;/customers/michael-novotny.png&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;d6e15727-9fe1-4961-8c5b-ea44a9bd81aa&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Evil Rabbit&#x27;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;evil@rabbit.com&#x27;</span>,<br>    <span class="hljs-attr">image_url</span>: <span class="hljs-string">&#x27;/customers/evil-rabbit.png&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;126eed9c-c90c-4ef6-a4a8-fcf7408d3c66&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Emil Kowalski&#x27;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;emil@kowalski.com&#x27;</span>,<br>    <span class="hljs-attr">image_url</span>: <span class="hljs-string">&#x27;/customers/emil-kowalski.png&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;CC27C14A-0ACF-4F4A-A6C9-D45682C144B9&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Amy Burns&#x27;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;amy@burns.com&#x27;</span>,<br>    <span class="hljs-attr">image_url</span>: <span class="hljs-string">&#x27;/customers/amy-burns.png&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;13D07535-C59E-4157-A011-F8D2EF4E0CBB&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Balazs Orban&#x27;</span>,<br>    <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;balazs@orban.com&#x27;</span>,<br>    <span class="hljs-attr">image_url</span>: <span class="hljs-string">&#x27;/customers/balazs-orban.png&#x27;</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> invoices = [<br>  &#123;<br>    <span class="hljs-attr">customer_id</span>: customers[<span class="hljs-number">0</span>].<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">amount</span>: <span class="hljs-number">15795</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;pending&#x27;</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2022-12-06&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">customer_id</span>: customers[<span class="hljs-number">1</span>].<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">amount</span>: <span class="hljs-number">20348</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;pending&#x27;</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2022-11-14&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">customer_id</span>: customers[<span class="hljs-number">4</span>].<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">amount</span>: <span class="hljs-number">3040</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;paid&#x27;</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2022-10-29&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">customer_id</span>: customers[<span class="hljs-number">3</span>].<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">amount</span>: <span class="hljs-number">44800</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;paid&#x27;</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2023-09-10&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">customer_id</span>: customers[<span class="hljs-number">5</span>].<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">amount</span>: <span class="hljs-number">34577</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;pending&#x27;</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2023-08-05&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">customer_id</span>: customers[<span class="hljs-number">7</span>].<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">amount</span>: <span class="hljs-number">54246</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;pending&#x27;</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2023-07-16&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">customer_id</span>: customers[<span class="hljs-number">6</span>].<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">amount</span>: <span class="hljs-number">666</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;pending&#x27;</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2023-06-27&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">customer_id</span>: customers[<span class="hljs-number">3</span>].<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">amount</span>: <span class="hljs-number">32545</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;paid&#x27;</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2023-06-09&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">customer_id</span>: customers[<span class="hljs-number">4</span>].<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">amount</span>: <span class="hljs-number">1250</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;paid&#x27;</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2023-06-17&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">customer_id</span>: customers[<span class="hljs-number">5</span>].<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">amount</span>: <span class="hljs-number">8546</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;paid&#x27;</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2023-06-07&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">customer_id</span>: customers[<span class="hljs-number">1</span>].<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">amount</span>: <span class="hljs-number">500</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;paid&#x27;</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2023-08-19&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">customer_id</span>: customers[<span class="hljs-number">5</span>].<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">amount</span>: <span class="hljs-number">8945</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;paid&#x27;</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2023-06-03&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">customer_id</span>: customers[<span class="hljs-number">2</span>].<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">amount</span>: <span class="hljs-number">8945</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;paid&#x27;</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2023-06-18&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">customer_id</span>: customers[<span class="hljs-number">0</span>].<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">amount</span>: <span class="hljs-number">8945</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;paid&#x27;</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2023-10-04&#x27;</span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">customer_id</span>: customers[<span class="hljs-number">2</span>].<span class="hljs-property">id</span>,<br>    <span class="hljs-attr">amount</span>: <span class="hljs-number">1000</span>,<br>    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;paid&#x27;</span>,<br>    <span class="hljs-attr">date</span>: <span class="hljs-string">&#x27;2022-06-05&#x27;</span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">const</span> revenue = [<br>  &#123; <span class="hljs-attr">month</span>: <span class="hljs-string">&#x27;Jan&#x27;</span>, <span class="hljs-attr">revenue</span>: <span class="hljs-number">2000</span> &#125;,<br>  &#123; <span class="hljs-attr">month</span>: <span class="hljs-string">&#x27;Feb&#x27;</span>, <span class="hljs-attr">revenue</span>: <span class="hljs-number">1800</span> &#125;,<br>  &#123; <span class="hljs-attr">month</span>: <span class="hljs-string">&#x27;Mar&#x27;</span>, <span class="hljs-attr">revenue</span>: <span class="hljs-number">2200</span> &#125;,<br>  &#123; <span class="hljs-attr">month</span>: <span class="hljs-string">&#x27;Apr&#x27;</span>, <span class="hljs-attr">revenue</span>: <span class="hljs-number">2500</span> &#125;,<br>  &#123; <span class="hljs-attr">month</span>: <span class="hljs-string">&#x27;May&#x27;</span>, <span class="hljs-attr">revenue</span>: <span class="hljs-number">2300</span> &#125;,<br>  &#123; <span class="hljs-attr">month</span>: <span class="hljs-string">&#x27;Jun&#x27;</span>, <span class="hljs-attr">revenue</span>: <span class="hljs-number">3200</span> &#125;,<br>  &#123; <span class="hljs-attr">month</span>: <span class="hljs-string">&#x27;Jul&#x27;</span>, <span class="hljs-attr">revenue</span>: <span class="hljs-number">3500</span> &#125;,<br>  &#123; <span class="hljs-attr">month</span>: <span class="hljs-string">&#x27;Aug&#x27;</span>, <span class="hljs-attr">revenue</span>: <span class="hljs-number">3700</span> &#125;,<br>  &#123; <span class="hljs-attr">month</span>: <span class="hljs-string">&#x27;Sep&#x27;</span>, <span class="hljs-attr">revenue</span>: <span class="hljs-number">2500</span> &#125;,<br>  &#123; <span class="hljs-attr">month</span>: <span class="hljs-string">&#x27;Oct&#x27;</span>, <span class="hljs-attr">revenue</span>: <span class="hljs-number">2800</span> &#125;,<br>  &#123; <span class="hljs-attr">month</span>: <span class="hljs-string">&#x27;Nov&#x27;</span>, <span class="hljs-attr">revenue</span>: <span class="hljs-number">3000</span> &#125;,<br>  &#123; <span class="hljs-attr">month</span>: <span class="hljs-string">&#x27;Dec&#x27;</span>, <span class="hljs-attr">revenue</span>: <span class="hljs-number">4800</span> &#125;,<br>];<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  users,<br>  customers,<br>  invoices,<br>  revenue,<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们现在执行 <code>npm run seed</code> 等待链接数据库，并创建表、并奖对应的数据添加进表里去。</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/6-rc-upload-1712392283791-37.png"></p><p>接下来我们登录 <code>vercel</code> 找到 <code>Storage</code> 就可以看到刚刚插入的表以及数据。</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/5-rc-upload-1712392283791-39.png"></p><p>查询表中的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> invoices.amount, customers.name<br><span class="hljs-keyword">FROM</span> invoices<br><span class="hljs-keyword">JOIN</span> customers <span class="hljs-keyword">ON</span> invoices.customer_id <span class="hljs-operator">=</span> customers.id<br><span class="hljs-keyword">WHERE</span> invoices.amount <span class="hljs-operator">=</span> <span class="hljs-number">666</span>;<br></code></pre></td></tr></table></figure><p>选择 <code>Data -&gt; Query</code> 输入上面的查询条件。<br><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/7-rc-upload-1712392283791-41.png"></p>]]></content>
    
    
    <categories>
      
      <category>nextjs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nextjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nextjs postgres 连接</title>
    <link href="/nextjs%20postgres%20%E8%BF%9E%E6%8E%A5/"/>
    <url>/nextjs%20postgres%20%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p><code>nextjs</code> 连接 <code>postgres</code> 数据库， 我们先去 <a href="https://vercel.com/zhinians-projects">vercel</a> 官网创建一个账号，并绑定到我们的 <code>github</code> 账号，如下图所示：<br><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/8-rc-upload-1712392283791-43.png"></p><p>我们选择 <code>I&#39;m working on personal projects</code> 创建一个个人项目，这里的个人项目在数据储存上已经可以满足我们日常开发测试。<br><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/9-rc-upload-1712392283791-45.png"></p><p>这里有多种账号关联可以选择，我这里选择使用 <code>github</code> 作为测试账号。<br><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/9-rc-upload-1712392283791-47.png"></p><p>注册成功后， 选择登录成功，可以看到如下页面。<br><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/10-rc-upload-1712392283791-49.png"></p><p>这里我们选择  <code>Add New</code>  新建一个 <code>projects</code>。<br>这里会检查到我们刚刚绑定的 <code>github</code> 账号，如下所示：我们需要选择对应一个项目 <code>nextjs-dashboad</code> 项目。<br>点击 <code>import</code> 导入项目。<br><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/11-rc-upload-1712392283791-51.png"></p><p>这里的参数我们使用默认即可。<br><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/12-rc-upload-1712392283791-53.png"></p><p>等待安装完成。<br><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/14-rc-upload-1712392283791-55.png"></p><p>看到如下图，我们项目的配置已经成功。<br><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/13-rc-upload-1712392283791-57.png"></p>]]></content>
    
    
    <categories>
      
      <category>nextjs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nextjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端性能优化-加载流程</title>
    <link href="/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/"/>
    <url>/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;越是交互复杂、用户量大的业务，对性能的要求就越是严格。大多数的前端性能优化，都是从页面的启动和加载流程开始梳理和定位，对于功能复杂的业务来说，这样的梳理尤为重要。</p><h2 id="常见的页面加载流程"><a href="#常见的页面加载流程" class="headerlink" title="常见的页面加载流程"></a>常见的页面加载流程</h2><ol><li>网络请求，服务端返回 HTML内容</li><li>浏览器一边解析 HTML,一边进行页面渲染</li><li>解析到外部资源，会发起HTTP请求获取，加载 JavaScipt代码时会暂停页面渲染</li><li>根据业务代码加载过程，会分别进入页面开始渲染、渲染完成、用户交互等阶段</li><li>页面交互过程中，会根据业务逻辑进行逻辑运算、页面更新</li></ol><h3 id="资源获取"><a href="#资源获取" class="headerlink" title="资源获取"></a>资源获取</h3><h4 id="资源大小"><a href="#资源大小" class="headerlink" title="资源大小"></a>资源大小</h4><blockquote><p>一般来说，前端都会在打包的时候做资源优化，资源类型包括 html、js、css、图片等，优化的方向包括：</p></blockquote><ol><li>合理的对资源进行分包</li></ol><p>&emsp;&emsp;首次渲染时只保留当前页面渲染需要的资源，将可以异步加载、延迟加载的资源拆离。通常我们会在代码编译打包的时候做处理，比如使用 Webpack 将代码拆到不同的 bundle 包中。<br>2. 移除不需要的代码</p><p>&emsp;&emsp;我们项目中常常会引入许多开源代码，同时我们自己也会实现很多的工具方法，但是实际上并不是全部相关的代码都是最终需要执行的代码，所以我们可以在打包的时候移除不需要的代码。现在基本大多数的打包工具都提供了类似的能力，比如 Tree-shaking。</p><p>&emsp;&emsp;除此之外，如果我们的项目较大，使用和依赖了多个不同的仓库。如果在不同的代码仓库里，都依赖了同样的 npm 代码包，那么我们可能会遇到打包时引入多次同样的 npm 包的情况。一般来说，我们在管理依赖包的时候，可以使用peerDependency来进行管理，避免多次安装依赖、以及版本不一致导致的多次打包和安装等情况。</p><ol start="3"><li>资源压缩和合并</li></ol><p>&emsp;&emsp;代码压缩也常常是在打包阶段进行的，包括 JavaScript 和 CSS 等代码，在一些情况下也可以使用图片合并（雪碧图的生成）。通常也是使用的打包工具以及插件自带的压缩能力，开启压缩后的代码可能比较难定位，可以配合 Sorce Mapping 来进行问题定位。</p><p>&emsp;&emsp;除了打包时的压缩，我们在页面加载的时候也可以启用 HTTP 的 gzip 压缩，可以减少资源 HTTP 请求的耗时。</p><h4 id="资源缓存"><a href="#资源缓存" class="headerlink" title="资源缓存"></a>资源缓存</h4><blockquote><p>资源缓存的优化，更多时候跟我们的链路有关</p></blockquote><ul><li>减少 DNS 查询时间，比如使用浏览器DNS缓存、计算机 DNS缓存、服务器DNS缓存</li><li>合理使用 CDN 资源，有效减少网络请求耗时</li><li>对请求资源进行缓存，包括但并不限于使用浏览器缓存，HTTP缓存、后台缓存、比如使用 Server Worker、 PWA 技术</li></ul><blockquote><p>我们观察获取链路，获取出了大小和缓存的角度以外，还可以做更多的优化，比如：</p></blockquote><ul><li>使用 HTTP&#x2F;2、HTTP&#x2F;3， 提升资源请求速度</li><li>对请求进行优化，比如多个请求进行合并，减少通信次数</li><li>对请求进行域名拆分，提升并发请求数</li></ul><h3 id="资源加载"><a href="#资源加载" class="headerlink" title="资源加载"></a>资源加载</h3><h4 id="流程加载拆分"><a href="#流程加载拆分" class="headerlink" title="流程加载拆分"></a>流程加载拆分</h4><blockquote><p>页面加载过程，会分为： 页面可见、页面可交互:</p></blockquote><ol><li>页面可见</li></ol><p>&emsp;&emsp;页面可见可以分为部分可见内容和完全可见内容，对于部分可见内容，一般来说可以做 loading 的展示或者是直接展示，让用户知道页面在加载中，而非无响应。</p><p>&emsp;&emsp;对于完全可见页面，则是用户可视区域的内容完全渲染完毕，除此之外，当前可见范围以外的内容，则是可以抽离出来离屏加载或者是懒加载的方式进行异步加载。</p><ol start="2"><li>页面可交互</li></ol><p>&emsp;&emsp;同样的，页面可交互也可以分为部分可交互以及完全可交互。</p><p>&emsp;&emsp; 一般来说，组件的样式渲染仅需要 HTML 和 CSS 加载完成即可，而组件的功能则可能需要加载具体的功能代码。对于复杂或是依赖资源较多的功能，加载的耗时可能相对较长。在这样的情况下，我们可以选择将该部分的资源做异步加载。<br>在初始的内容加载完毕之后，剩下的资源需要延迟加载。对于页面功能完全可交互，同样依赖于分包资源延迟加载。加载流程的优化，不管是页面可见，还是页面可交互，都离不开延迟加载。<br>延迟加载可分为两种方式进行加载：懒加载和预加载。因此，资源懒加载和预加载也是加载流程中很重要的一部分。</p><h4 id="资源懒加载"><a href="#资源懒加载" class="headerlink" title="资源懒加载"></a>资源懒加载</h4><p>&emsp;&emsp; 我们常说的懒加载其实又被称为按需加载，顾名思义就是需要用到的时候才会进行加载。通过将非必要功能进行懒加载的方式，可以有效地减少页面的初始加载速度，提升页面加载的性能。</p><p>&emsp;&emsp;常见的场景比如某些组件在渲染时不具备完整的功能，当用户点击的时候，才进行对应逻辑的获取和加载。遇到点击时未加载完成的情况下，可以通过适当的方式提示用户功能正在加载中。资源懒加载常常也是跟资源分包一起进行，大多数前端框架（比如 Vue、React、Angular）也都提供了懒加载的能力，也可以配合 Webpack 打包 做处理。</p><h4 id="资源预加载"><a href="#资源预加载" class="headerlink" title="资源预加载"></a>资源预加载</h4><p>&emsp;&emsp;资源预加载也称为闲时加载，很多时候我们可以在页面空闲的时候，对一些用户可能会用到的资源做提前加载，以加快后续渲染或者操作的时间。</p><p>&emsp;&emsp;仔细一看，资源预加载和资源懒加载都比较相似，都会通过将资源拆离的方式做成异步延迟的方式加载。两者的区别在于：</p><ul><li>懒加载的功能只会在需要的时候才进行加载，因为一些功能用户可能不会使用到，比如帮助中心、反馈功能等等</li><li>预加载的功能则是在不阻塞核心功能的时候，尽可能利用空闲的资源提前加载，这部分的功能则是用户很可能会使用到，比如获取下一屏页面的内容数据</li></ul><h2 id="复杂场景下的加载流程"><a href="#复杂场景下的加载流程" class="headerlink" title="复杂场景下的加载流程"></a>复杂场景下的加载流程</h2><h4 id="复杂加载流程管理"><a href="#复杂加载流程管理" class="headerlink" title="复杂加载流程管理"></a>复杂加载流程管理</h4><p>&emsp;&emsp;对于页面初始化流程过于复杂的应用来说，我们可以对加载流程做任务的拆分，分阶段地进行加载。</p><p>&emsp;&emsp;举个例子，假设我们需要在 Web 端加载 VsCode，那么我们可能需要考虑以下各个功能的加载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">- 整体页面框架<br>- 顶部菜单栏<br>- 左侧工具栏<br>- 底部状态栏<br>- 文件目录栏<br>- 文件详情<br>  - 内容展示<br>  - 编辑功能<br>  - 菜单功能<br>- 搜索功能<br>- 插件功能<br></code></pre></td></tr></table></figure><p>以上只是我按照自己想法粗略拆分的功能，我们可以简单分成几个加载阶段:</p><p>a. 页面整体框架加载完成。此时可以看到各个功能区域的分布，包括顶部菜单栏、左侧工具栏、底部状态栏、项目内容区域等等，但这些区域的内容未必都完全加载完成。</p><p>b. 通用功能加载完成。比如顶部菜单栏、左侧工具栏、底部状态栏等等，一些具体的菜单或是工具的功能可以做按需加载和预加载，比如搜索功能。</p><p>c. 项目内容相关框架加载完成。此时可以看到项目相关的内容区域，比如文件目录、当前文件的内容详情等等。</p><p>d. 插件功能。用户安装的插件，在核心功能都加载完成之后再获取和加载。</p><p>&emsp;&emsp;当我们根据项目的具体加载过程做了阶段划分之后，则可以将我们的代码做任务拆分，可以拆分成串行和并行的任务。串行的任务比如按照阶段划分的大任务，并行的任务则可以是某个阶段内的小任务，其中也可以包括一些异步执行的任务，或是延迟加载的任务。</p><h4 id="长耗时任务的拆离"><a href="#长耗时任务的拆离" class="headerlink" title="长耗时任务的拆离"></a>长耗时任务的拆离</h4><p>&emsp;&emsp;如果我们的应用中会有耗时较长的计算任务，比如拉取回来的数据需要计算处理后才能渲染，那么我们可以对这些耗时较长的任务做任务拆分。</p><p>&emsp;&emsp;同样的，我们还是回到 Web 端加载 VsCode 的场景。假设我们在加载某个特别大的文件，则可以考虑分别对该文件的内容获取、数据转换做任务拆分，比如分片获取该文件的内容，根据分片的内容做渲染的计算，计算过程如果耗时较长，也可以做异步任务的拆分，甚至可以结合 Web Worker 和 WebAssembly 等技术做更多的优化。</p><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><p>&emsp;&emsp;对于复杂交互场景，需要加载的资源较更多情况下，如果用户的权限只是可读，那么对于编辑相关的功能可以做资源拆分，队友有权限的用户才能进行编辑能力的记载。</p><p>&emsp;&emsp; 读写分离其实属于资源拆分的一种具体场景，我们结合业务的具体场景做具体的功能拆分，如果管理权限和只读权限。</p>]]></content>
    
    
    <categories>
      
      <category>前端性能优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nextjs 配置 progress 查询数据</title>
    <link href="/nextjs%20%E9%85%8D%E7%BD%AE%20progress%20%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/"/>
    <url>/nextjs%20%E9%85%8D%E7%BD%AE%20progress%20%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>首先我们在项目里新建 src&#x2F;lib&#x2F;data.ts 文件，这里的是我们的业务逻辑，直接操作我们的数据 porgress数据库。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 引入 sql 查询方法</span><br><span class="hljs-keyword">import</span> &#123; sql &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vercel/postgres&#x27;</span><br></code></pre></td></tr></table></figure><p>比如，查询一条数据，我们可以这样编写:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs ts"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchRevenue</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Add noStore() here to prevent the response from being cached.</span><br>  <span class="hljs-comment">// This is equivalent to in fetch(..., &#123;cache: &#x27;no-store&#x27;&#125;).</span><br><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// Artificially delay a response for demo purposes.</span><br>    <span class="hljs-comment">// Don&#x27;t do this in production :)</span><br><br>    <span class="hljs-comment">// console.log(&#x27;Fetching revenue data...&#x27;);</span><br>    <span class="hljs-comment">// await new Promise((resolve) =&gt; setTimeout(resolve, 3000));</span><br><br>    <span class="hljs-comment">// 查询语句</span><br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> sql&lt;<span class="hljs-title class_">Revenue</span>&gt;<span class="hljs-string">`SELECT * FROM revenue`</span>;<br><br>    <span class="hljs-comment">// console.log(&#x27;Data fetch completed after 3 seconds.&#x27;);</span><br><br>    <span class="hljs-comment">// 返回查询结果</span><br>    <span class="hljs-keyword">return</span> data.<span class="hljs-property">rows</span>;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Database Error:&#x27;</span>, error);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Failed to fetch revenue data.&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们还可以对查询到的rows数据进行我们需要格式上的处理，例如下面的代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchLatestInvoices</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> sql&lt;<span class="hljs-title class_">LatestInvoiceRaw</span>&gt;<span class="hljs-string">`</span><br><span class="hljs-string">      SELECT invoices.amount, customers.name, customers.image_url, customers.email, invoices.id</span><br><span class="hljs-string">      FROM invoices</span><br><span class="hljs-string">      JOIN customers ON invoices.customer_id = customers.id</span><br><span class="hljs-string">      ORDER BY invoices.date DESC</span><br><span class="hljs-string">      LIMIT 5`</span>;<br><br>    <span class="hljs-keyword">const</span> latestInvoices = data.<span class="hljs-property">rows</span>.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">invoice</span>) =&gt;</span> (&#123;<br>      ...invoice,<br>      <span class="hljs-attr">amount</span>: <span class="hljs-title function_">formatCurrency</span>(invoice.<span class="hljs-property">amount</span>),<br>    &#125;));<br>    <span class="hljs-keyword">return</span> latestInvoices;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Database Error:&#x27;</span>, error);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Failed to fetch the latest invoices.&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同时我们还可以对若干集合的数据进行处理，例如我们展示一个统计，代码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchCardData</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// You can probably combine these into a single SQL query</span><br>    <span class="hljs-comment">// However, we are intentionally splitting them to demonstrate</span><br>    <span class="hljs-comment">// how to initialize multiple queries in parallel with JS.</span><br>    <span class="hljs-keyword">const</span> invoiceCountPromise = sql<span class="hljs-string">`SELECT COUNT(*) FROM invoices`</span>;<br>    <span class="hljs-keyword">const</span> customerCountPromise = sql<span class="hljs-string">`SELECT COUNT(*) FROM customers`</span>;<br>    <span class="hljs-keyword">const</span> invoiceStatusPromise = sql<span class="hljs-string">`SELECT</span><br><span class="hljs-string">         SUM(CASE WHEN status = &#x27;paid&#x27; THEN amount ELSE 0 END) AS &quot;paid&quot;,</span><br><span class="hljs-string">         SUM(CASE WHEN status = &#x27;pending&#x27; THEN amount ELSE 0 END) AS &quot;pending&quot;</span><br><span class="hljs-string">         FROM invoices`</span>;<br><br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>      invoiceCountPromise,<br>      customerCountPromise,<br>      invoiceStatusPromise,<br>    ]);<br><br>    <span class="hljs-keyword">const</span> numberOfInvoices = <span class="hljs-title class_">Number</span>(data[<span class="hljs-number">0</span>].<span class="hljs-property">rows</span>[<span class="hljs-number">0</span>].<span class="hljs-property">count</span> ?? <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">const</span> numberOfCustomers = <span class="hljs-title class_">Number</span>(data[<span class="hljs-number">1</span>].<span class="hljs-property">rows</span>[<span class="hljs-number">0</span>].<span class="hljs-property">count</span> ?? <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">const</span> totalPaidInvoices = <span class="hljs-title function_">formatCurrency</span>(data[<span class="hljs-number">2</span>].<span class="hljs-property">rows</span>[<span class="hljs-number">0</span>].<span class="hljs-property">paid</span> ?? <span class="hljs-string">&#x27;0&#x27;</span>);<br>    <span class="hljs-keyword">const</span> totalPendingInvoices = <span class="hljs-title function_">formatCurrency</span>(data[<span class="hljs-number">2</span>].<span class="hljs-property">rows</span>[<span class="hljs-number">0</span>].<span class="hljs-property">pending</span> ?? <span class="hljs-string">&#x27;0&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      numberOfCustomers,<br>      numberOfInvoices,<br>      totalPaidInvoices,<br>      totalPendingInvoices,<br>    &#125;;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Database Error:&#x27;</span>, error);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Failed to fetch card data.&#x27;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们一点需要注意📢，我们再调用 <code>sql</code> 这个方法查询数据的时候，记得他是一个异步的动作。我们需要配置使用 <code>async/await</code> 这样的语法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">getTipsList</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> result  = <span class="hljs-keyword">await</span> sql<span class="hljs-string">`SELECT * FROM revenue`</span>;<br>  <span class="hljs-keyword">return</span> result.<span class="hljs-property">rows</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>工具方法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// util.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">formatCurrency</span> = (<span class="hljs-params">amount: <span class="hljs-built_in">number</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> (amount / <span class="hljs-number">100</span>).<span class="hljs-title function_">toLocaleString</span>(<span class="hljs-string">&#x27;en-US&#x27;</span>, &#123;<br>    <span class="hljs-attr">style</span>: <span class="hljs-string">&#x27;currency&#x27;</span>,<br>    <span class="hljs-attr">currency</span>: <span class="hljs-string">&#x27;USD&#x27;</span>,<br>  &#125;);<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>在查询函数使用 <code>unstable_noStore</code>, 我们在 <code>src/app/lib/data.ts</code> 中，每一个函数最顶部新增 <code>noStore</code> 如下面所示：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// 导入所需包</span><br><span class="hljs-keyword">import</span> &#123; unstable_noStore <span class="hljs-keyword">as</span> noStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;next/cache&#x27;</span>;<br><br><span class="hljs-comment">// 如下示例</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchRevenue</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// add lines</span><br>  <span class="hljs-title function_">noStore</span>()<br>  <br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 查询语句</span><br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> sql&lt;<span class="hljs-title class_">Revenue</span>&gt;<span class="hljs-string">`SELECT * FROM revenue`</span>;<br><br>    <span class="hljs-comment">// 返回查询结果</span><br>    <span class="hljs-keyword">return</span> data.<span class="hljs-property">rows</span>;<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Failed to fetch revenue data.&#x27;</span>);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>查询显示效果如下图：</p><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/12121-rc-upload-1712392283791-27.png"></p>]]></content>
    
    
    <categories>
      
      <category>nextjs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nextjs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>electron 打包出现的问题</title>
    <link href="/electron%20%E6%89%93%E5%8C%85%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/electron%20%E6%89%93%E5%8C%85%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<ol><li>mac打包签名错误</li></ol><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/error-rc-upload-1712392283791-17.png"></p><blockquote><p>解决方案： 打开本机器的 .base_profile 或者 ~&#x2F;.zshrc 文件， 在下面加入一句 export CSC_IDENTITY_AUTO_DISCOVERY&#x3D;false 在终端中 socure ~&#x2F;.base_profile  或者 socure ~&#x2F;.zshrc ，重新运行打包命令即可。</p></blockquote><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/base-rc-upload-1712392283791-19.png"><br><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/builder-rc-upload-1712392283791-21.png"></p>]]></content>
    
    
    <categories>
      
      <category>electron</category>
      
    </categories>
    
    
    <tags>
      
      <tag>electron</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>electron builder 打包</title>
    <link href="/electron%20builder%20%E6%89%93%E5%8C%85/"/>
    <url>/electron%20builder%20%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h3 id="打包环境"><a href="#打包环境" class="headerlink" title="打包环境"></a>打包环境</h3><ul><li>Mac Apple M2 Pro</li><li>Node 18.17.0</li><li>React 18.2.64</li></ul><h3 id="配置打包环境"><a href="#配置打包环境" class="headerlink" title="配置打包环境"></a>配置打包环境</h3><ol><li>安装 <code>electron-builder</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i electron-builder --save-dev<br></code></pre></td></tr></table></figure><ol start="2"><li>在 <code>package.json</code> 中配置如下</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-string">&quot;build&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;extends&quot;</span>: <span class="hljs-literal">null</span>,<br>  <span class="hljs-string">&quot;productName&quot;</span>: <span class="hljs-string">&quot;upload-go&quot;</span>,<br>  <span class="hljs-string">&quot;copyright&quot;</span>: <span class="hljs-string">&quot;©Copyright 2023-2024 数字化工作室.&quot;</span>,<br>  <span class="hljs-string">&quot;appId&quot;</span>: <span class="hljs-string">&quot;com.upload.team&quot;</span>,<br>  <span class="hljs-string">&quot;directories&quot;</span>: &#123; <br>    <span class="hljs-string">&quot;buildResources&quot;</span>: <span class="hljs-string">&quot;build&quot;</span>,<br>    <span class="hljs-string">&quot;output&quot;</span>: <span class="hljs-string">&quot;dist&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;files&quot;</span>: [<br>    <span class="hljs-string">&quot;build/**/*&quot;</span>,<br>    <span class="hljs-string">&quot;./main.js&quot;</span>,<br>    <span class="hljs-string">&quot;package.json&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;win&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;target&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;nsis&quot;</span>,<br>        <span class="hljs-string">&quot;arch&quot;</span>: [<br>          <span class="hljs-string">&quot;ia32&quot;</span><br>        ]<br>      &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-string">&quot;nsis&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;oneClick&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;allowElevation&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;allowToChangeInstallationDirectory&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;installerIcon&quot;</span>: <span class="hljs-string">&quot;./build/favicon.ico&quot;</span>,<br>    <span class="hljs-string">&quot;uninstallerIcon&quot;</span>: <span class="hljs-string">&quot;./build/favicon.ico&quot;</span>,<br>    <span class="hljs-string">&quot;installerHeaderIcon&quot;</span>: <span class="hljs-string">&quot;./build/favicon.ico&quot;</span>,<br>    <span class="hljs-string">&quot;createDesktopShortcut&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;createStartMenuShortcut&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;shortcutName&quot;</span>: <span class="hljs-string">&quot;upload-go&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;mac&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;category&quot;</span>: <span class="hljs-string">&quot;public.app-category.productivity&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;dmg&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;background&quot;</span>: <span class="hljs-string">&quot;./appdmg.png&quot;</span>,  <span class="hljs-comment">// 安装背景图</span><br>    <span class="hljs-string">&quot;icon&quot;</span>: <span class="hljs-string">&quot;./icon.icns&quot;</span>, <span class="hljs-comment">// 安装icon</span><br>    <span class="hljs-string">&quot;iconSize&quot;</span>: <span class="hljs-number">100</span>,<br>    <span class="hljs-string">&quot;contents&quot;</span>: [<br>      &#123;<br>        <span class="hljs-string">&quot;x&quot;</span>: <span class="hljs-number">320</span>,<br>        <span class="hljs-string">&quot;y&quot;</span>: <span class="hljs-number">280</span>,<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;link&quot;</span>,<br>        <span class="hljs-string">&quot;path&quot;</span>: <span class="hljs-string">&quot;/Applications&quot;</span><br>      &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;x&quot;</span>: <span class="hljs-number">110</span>,<br>        <span class="hljs-string">&quot;y&quot;</span>: <span class="hljs-number">280</span>,<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;file&quot;</span><br>      &#125;<br>    ],<br>    <span class="hljs-string">&quot;window&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-number">500</span>,<br>      <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-number">500</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>productName 打包应用名称</li><li>copyright 应用版权信息</li><li>appId 针对于mac, 应用签名</li><li>directories 打包依赖资源</li><li>files 打包依赖文件</li><li>win 针对于 windows 打包配置</li><li>nsis 安装包生成程序 NSIS 的配置</li><li>mac mac 配置</li><li>dmg 用于打包 mac 通用配置</li></ul><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run builder:mac<br></code></pre></td></tr></table></figure><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/12121-rc-upload-1712392283791-25.png"></p>]]></content>
    
    
    <categories>
      
      <category>electron</category>
      
    </categories>
    
    
    <tags>
      
      <tag>electron</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>electron 基于 create-react-app 项目架构配置</title>
    <link href="/electron%20%E5%9F%BA%E4%BA%8E%20create-react-app%20%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E9%85%8D%E7%BD%AE/"/>
    <url>/electron%20%E5%9F%BA%E4%BA%8E%20create-react-app%20%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><ol><li>使用<code>react</code>脚手架创建基础项目</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npx create-react-app my-electron-app --template typescript<br></code></pre></td></tr></table></figure><ol start="2"><li>安装 <code>electron</code></li></ol><blockquote><p>📢 在安装 <code>electron</code> 需要科学上网，这样拉的依赖会快些</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i electron --save-dev<br></code></pre></td></tr></table></figure><ol start="3"><li>暴露项目的<code>webpack</code>配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm run eject<br></code></pre></td></tr></table></figure><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/config-rc-upload-1712392283791-23.png"></p><ol start="4"><li>安装 <code>sass</code> &amp; <code>node-sass</code></li></ol><blockquote><p>📢 注意这里需要查看本机电脑安装的 node版本，安装对应的 sass-loader版本，我这里机器的node版本为 v18.17.0 </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i sass-loader --save-dev<br></code></pre></td></tr></table></figure><ol start="5"><li>配置 <code>electron</code> 环境</li></ol><blockquote><p>在根目录新建 <code>main.js</code> 内容如下：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; app, <span class="hljs-title class_">BrowserWindow</span>, <span class="hljs-title class_">Menu</span>, ipcRenderer &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><span class="hljs-comment">// const path = require(&#x27;path&#x27;)</span><br><span class="hljs-comment">// const isDev = require(&quot;electron-is-dev&quot;);</span><br><span class="hljs-comment">// const path = require(&quot;path&quot;);</span><br><br><span class="hljs-comment">// const &#123; notification &#125; = require(&quot;./config&quot;);</span><br><br><span class="hljs-keyword">let</span> mainWindow<br><br><span class="hljs-comment">// 创建窗体</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createWindow</span>(<span class="hljs-params"></span>) &#123;<br>  mainWindow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>(&#123;<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">760</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">460</span>,<br>    <span class="hljs-attr">titleBarStyle</span>: <span class="hljs-string">&#x27;hiddenInset&#x27;</span>,<br>    <span class="hljs-attr">trafficLightPosition</span>: &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">10</span> &#125;,<br>    <span class="hljs-attr">titleBarOverlay</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">webPreferences</span>: &#123;<br>      <span class="hljs-attr">nodeIntegration</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-comment">// preload: path.join(__dirname, &#x27;preload.js&#x27;)</span><br>    &#125;,<br>    <span class="hljs-attr">frame</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">resizable</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">useContentSize</span>: <span class="hljs-literal">false</span><br>  &#125;)<br><br>  <span class="hljs-comment">// mainWindow.loadURL(</span><br>  <span class="hljs-comment">//   isDev</span><br>  <span class="hljs-comment">//     ? &quot;http://localhost:3890/&quot;</span><br>  <span class="hljs-comment">//     : `file://$&#123;path.join(__dirname, &quot;./public/index.html&quot;)&#125;`</span><br>  <span class="hljs-comment">// );</span><br><br>  mainWindow.<span class="hljs-title function_">loadURL</span>(<span class="hljs-string">&#x27;http://localhost:3890/&#x27;</span>)<br>  <span class="hljs-comment">// mainWindow.loadFile(`build/index.html`)</span><br>  <span class="hljs-comment">// mainWindow.on(&quot;closed&quot;, () =&gt; &#123;</span><br>  <span class="hljs-comment">//   mainWindow = null;</span><br>  <span class="hljs-comment">// &#125;);</span><br><br>  mainWindow.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;closed&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    mainWindow = <span class="hljs-literal">null</span><br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// app.on(&#x27;activate&#x27;, () =&gt; &#123;</span><br><span class="hljs-comment">//   ipcRenderer.on(&#x27;move&#x27;, (event, x, y) =&gt; &#123;</span><br><span class="hljs-comment">//     ubWindow.setPosition(x, y)</span><br><span class="hljs-comment">//   &#125;)</span><br><span class="hljs-comment">//   // 初始化</span><br><span class="hljs-comment">//   ipcRenderer.sendTo(ubWindow.webContents.id, &#x27;init&#x27;)</span><br><span class="hljs-comment">// &#125;)</span><br><br><span class="hljs-comment">// 新建窗口</span><br><span class="hljs-keyword">const</span> dockMenu = <span class="hljs-title class_">Menu</span>.<span class="hljs-title function_">buildFromTemplate</span>([<br>  &#123;<br>    <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;新建窗口&#x27;</span>,<br>    <span class="hljs-title function_">click</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  &#125;<br>])<br><br><span class="hljs-comment">// 通知窗体</span><br><span class="hljs-comment">// function showNotification() &#123;</span><br><span class="hljs-comment">//   new Notification(&#123;</span><br><span class="hljs-comment">//     title: notification.title,</span><br><span class="hljs-comment">//     body: notification.content,</span><br><span class="hljs-comment">//   &#125;).show();</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// app.on(&quot;ready&quot;, showNotification);</span><br><br><span class="hljs-comment">// app.on(&quot;ready&quot;, createWindow);</span><br><br><span class="hljs-comment">// app.on(&quot;window-all-closed&quot;, () =&gt; &#123;</span><br><span class="hljs-comment">//   if (process.platform != &quot;darwin&quot;) &#123;</span><br><span class="hljs-comment">//     app.quit();</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br><span class="hljs-comment">// app.on(&quot;activate&quot;, () =&gt; &#123;</span><br><span class="hljs-comment">//   if (mainWindow == null) &#123;</span><br><span class="hljs-comment">//     createWindow();</span><br><span class="hljs-comment">//   &#125;</span><br><span class="hljs-comment">// &#125;);</span><br><br>app.<span class="hljs-title function_">whenReady</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">createWindow</span>()<br><br>  <span class="hljs-keyword">if</span> (process.<span class="hljs-property">platform</span> === <span class="hljs-string">&#x27;darwin&#x27;</span>) &#123;<br>    app.<span class="hljs-property">dock</span>.<span class="hljs-title function_">setMenu</span>(dockMenu)<br>  &#125;<br><br>  app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;activate&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">BrowserWindow</span>.<span class="hljs-title function_">getAllWindows</span>().<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) <span class="hljs-title function_">createWindow</span>()<br>  &#125;)<br>&#125;)<br><br>app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;window-all-closed&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (process.<span class="hljs-property">platform</span> !== <span class="hljs-string">&#x27;darwin&#x27;</span>) app.<span class="hljs-title function_">quit</span>()<br>&#125;)<br><br></code></pre></td></tr></table></figure><ol start="6"><li>配置启动脚本</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;PORT=3890 react-app-rewired start&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;react-app-rewired build&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;react-app-rewired test&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;eject&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;react-scripts eject&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;electron&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;electron .&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;concurrently \&quot;wait-on http://localhost:3890 &amp;&amp; npm run electron\&quot; \&quot;cross-env BROWSER=none npm start\&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;pack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;electron-builder&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;builder:mac&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rimraf dist &amp;&amp; electron-builder build --mac --x64 --arm64&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;builder:win&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rimraf dist &amp;&amp; electron-builder build --win --x64&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;pack:dir&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;electron-builder --dir&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>electron</category>
      
    </categories>
    
    
    <tags>
      
      <tag>electron</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>electron 窗口拖拽</title>
    <link href="/elctron%20%E7%AA%97%E5%8F%A3%E6%8B%96%E6%8B%BD/"/>
    <url>/elctron%20%E7%AA%97%E5%8F%A3%E6%8B%96%E6%8B%BD/</url>
    
    <content type="html"><![CDATA[<blockquote><p>实践背景，当我们开发 <code>Electron</code> 客户端时，为了兼容某些场景。影藏顶部状态栏，隐藏后我们发现之前定义的点击事件不可以点击了，我们则需要做如下修改。</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tsx">mainWindow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>(&#123;<br>  <span class="hljs-attr">width</span>: <span class="hljs-number">760</span>,<br>  <span class="hljs-attr">height</span>: <span class="hljs-number">460</span>,<br>  <span class="hljs-attr">titleBarStyle</span>: <span class="hljs-string">&#x27;hiddenInset&#x27;</span>, <span class="hljs-comment">// 隐藏顶部状态栏</span><br>  <span class="hljs-attr">trafficLightPosition</span>: &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">10</span> &#125;,<br>  <span class="hljs-attr">titleBarOverlay</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">webPreferences</span>: &#123;<br>    <span class="hljs-attr">nodeIntegration</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// preload: path.join(__dirname, &#x27;preload.js&#x27;)</span><br>  &#125;,<br>  <span class="hljs-attr">frame</span>: <span class="hljs-literal">false</span>, <br>  <span class="hljs-attr">resizable</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">useContentSize</span>: <span class="hljs-literal">false</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/111-rc-upload-1712392283791-15.png"></p><p>我们设置这个应用可以自由拖动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>, <span class="hljs-selector-tag">html</span> &#123;<br>-webkit-app-region: drag; <span class="hljs-comment">/* 整个应用可以拖拽 移动 */</span><br><span class="hljs-attribute">cursor</span>: move;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们应用上点击事件就不可使用了，接下来我们会给需要点击的设置如下属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.ant-menu-submenu</span> &#123;<br>  -webkit-app-region: no-drag;  <span class="hljs-comment">/* 可以点击事件 */</span><br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>electron</category>
      
    </categories>
    
    
    <tags>
      
      <tag>electron</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react 客户端直传 阿里云OSS</title>
    <link href="/react%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9B%B4%E4%BC%A0%20%E9%98%BF%E9%87%8C%E4%BA%91OSS/"/>
    <url>/react%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9B%B4%E4%BC%A0%20%E9%98%BF%E9%87%8C%E4%BA%91OSS/</url>
    
    <content type="html"><![CDATA[<h3 id="安装-OSS-依赖模块"><a href="#安装-OSS-依赖模块" class="headerlink" title="安装 OSS 依赖模块"></a>安装 <code>OSS</code> 依赖模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i ali-oss --save<br></code></pre></td></tr></table></figure><h3 id="上传逻辑"><a href="#上传逻辑" class="headerlink" title="上传逻辑"></a>上传逻辑</h3><ul><li><p>初始化 <code>State</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> [client, setClient] = useState&lt;<span class="hljs-built_in">any</span>&gt;(<span class="hljs-literal">null</span>) <span class="hljs-comment">/// 阿里云OSS实例</span><br><span class="hljs-keyword">const</span> [percent, setPercent] = useState&lt;<span class="hljs-built_in">any</span>&gt;(<span class="hljs-number">0</span>) <span class="hljs-comment">/// 上传进度条</span><br><span class="hljs-keyword">const</span> [flag, setFlag] = useState&lt;<span class="hljs-built_in">boolean</span>&gt;(<span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure></li><li><p>实例化 <code>OSS</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> <span class="hljs-title function_">OSS</span>(&#123;<br>  <span class="hljs-attr">region</span>: data.<span class="hljs-property">region</span>, <span class="hljs-comment">/// 地区</span><br>  <span class="hljs-attr">accessKeyId</span>: data.<span class="hljs-property">accessKeyId</span>, <span class="hljs-comment">// accessKeyId</span><br>  <span class="hljs-attr">accessKeySecret</span>: data.<span class="hljs-property">accessKeySecret</span>, <span class="hljs-comment">// accessKeySecret</span><br>  <span class="hljs-attr">bucket</span>: data.<span class="hljs-property">bucket</span> <span class="hljs-comment">/// bucket 桶</span><br>&#125;)<br><span class="hljs-title function_">setClient</span>(client)<br></code></pre></td></tr></table></figure></li><li><p>上传逻辑</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 阿里云上传文件 - 方法</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">AliyunOssUploadFn</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">url: <span class="hljs-built_in">string</span>, file: <span class="hljs-built_in">any</span>, onSuccess: (uploadResult: <span class="hljs-built_in">any</span>, file: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">void</span>, onError: (error: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">void</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> uploadResult = <span class="hljs-keyword">await</span> client.<span class="hljs-title function_">multipartUpload</span>(url, file, &#123;<br>      <span class="hljs-attr">progress</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">p: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-comment">// console.log(&#x27;获取进度条的值==&gt;&#x27;, (p * 100).toFixed(2))</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-attr">perNum</span>: <span class="hljs-built_in">any</span> = (p * <span class="hljs-number">100</span>).<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span> (perNum &gt; <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-title function_">setFlag</span>(<span class="hljs-literal">true</span>)<br>        &#125;<br>        <span class="hljs-keyword">if</span> (perNum == <span class="hljs-number">100</span>) &#123;<br>          <span class="hljs-title function_">setFlag</span>(<span class="hljs-literal">false</span>)<br>        &#125;<br>        <span class="hljs-title function_">setPercent</span>(<span class="hljs-title class_">Number</span>(perNum))<br>      &#125;<br>    &#125;)<br>    <span class="hljs-comment">// 拼接图片路径</span><br>    <span class="hljs-comment">// https://upload-go.oss-cn-hangzhou.aliyuncs.com/temp/WX20240311-191010%402x-rc-upload-1710156464135-3.png</span><br>    <span class="hljs-comment">// https://upload-go.</span><br>    <span class="hljs-keyword">const</span> path = <span class="hljs-string">&#x27;https://upload-go.&#x27;</span> + aliyunConfig.<span class="hljs-property">region</span> + <span class="hljs-string">&#x27;.aliyuncs.com/&#x27;</span> + url<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">saveUploadUrl</span>(path)<br>    <span class="hljs-comment">// console.log(&#x27;上传图片===&gt;&gt;&gt;&#x27;, uploadResult, url, path)</span><br>    <span class="hljs-title function_">onSuccess</span>(uploadResult, file)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-comment">// console.log(&#x27;上传异常&#x27;, err)</span><br>    <span class="hljs-title function_">onError</span>(err)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 自定义上传</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">uploadProps</span>: <span class="hljs-title class_">UploadProps</span> = &#123;<br>  <span class="hljs-attr">beforeUpload</span>: beforeUpload,<br>  <span class="hljs-attr">showUploadList</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">customRequest</span>: <span class="hljs-title class_">OssUpload</span>,<br>  <span class="hljs-attr">listType</span>: <span class="hljs-string">&#x27;picture-card&#x27;</span>,<br>  <span class="hljs-title function_">onChange</span>(<span class="hljs-params">info</span>) &#123;<br>    <span class="hljs-comment">// console.log(&#x27;onChange😊===&gt;&#x27;, info)</span><br>    <span class="hljs-keyword">if</span> (info.<span class="hljs-property">file</span>.<span class="hljs-property">status</span> !== <span class="hljs-string">&#x27;uploading&#x27;</span>) &#123;<br>      <span class="hljs-comment">// console.log(info.file, info.fileList)</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (info.<span class="hljs-property">file</span>.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;done&#x27;</span>) &#123;<br>      <span class="hljs-comment">// console.log(`$&#123;info.file.name&#125; 文件上传成功`)</span><br>      message.<span class="hljs-title function_">success</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;info.file.name&#125;</span> 文件上传成功`</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (info.<span class="hljs-property">file</span>.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;error&#x27;</span>) &#123;<br>      info.<span class="hljs-property">fileList</span> = info.<span class="hljs-property">fileList</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">uid</span> !== info.<span class="hljs-property">file</span>.<span class="hljs-property">uid</span>)<br>      message.<span class="hljs-title function_">error</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;info.file.name&#125;</span> 文件上传失败`</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Space</span> direction=<span class="hljs-string">&#x27;vertical&#x27;</span> style=&#123;&#123; <span class="hljs-attr">display</span>: <span class="hljs-string">&#x27;flex&#x27;</span> &#125;&#125;&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;uploadTitleBox&#x27;</span>&gt;</span>&#123;getUploadTitle()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Dragger</span> &#123;<span class="hljs-attr">...uploadProps</span>&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;ant-upload-drag-icon&#x27;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">CloudUploadOutlined</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;ant-upload-text&#x27;</span>&gt;</span>将文件拖拽至此，或者点击上传<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Dragger</span>&gt;</span></span><br>    &#123;flag &amp;&amp; (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Space.Compact</span> <span class="hljs-attr">block</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Progress</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">color:</span> &#x27;#<span class="hljs-attr">fff</span>&#x27; &#125;&#125; <span class="hljs-attr">percent</span>=<span class="hljs-string">&#123;percent&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Space.Compact</span>&gt;</span></span><br>    )&#125;<br>&lt;/<span class="hljs-title class_">Space</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240406-170423@2x-rc-upload-1712392283791-13.png"></p>]]></content>
    
    
    <categories>
      
      <category>云存储篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react 客户端直传 腾讯云 COS</title>
    <link href="/react%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9B%B4%E4%BC%A0%20%E8%85%BE%E8%AE%AF%E4%BA%91%20COS/"/>
    <url>/react%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9B%B4%E4%BC%A0%20%E8%85%BE%E8%AE%AF%E4%BA%91%20COS/</url>
    
    <content type="html"><![CDATA[<h3 id="安装-COS-依赖模块"><a href="#安装-COS-依赖模块" class="headerlink" title="安装 COS 依赖模块"></a>安装 <code>COS</code> 依赖模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i cos-js-sdk-v5 --save<br></code></pre></td></tr></table></figure><h3 id="上传逻辑"><a href="#上传逻辑" class="headerlink" title="上传逻辑"></a>上传逻辑</h3><ul><li><p>初始化</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> [tencentClient, setTencentClient] = useState&lt;<span class="hljs-built_in">any</span>&gt;(<span class="hljs-literal">null</span>) <span class="hljs-comment">/// 腾讯云云OSS实例</span><br><span class="hljs-keyword">const</span> [percent, setPercent] = useState&lt;<span class="hljs-built_in">any</span>&gt;(<span class="hljs-number">0</span>) <span class="hljs-comment">/// 上传进度条</span><br><span class="hljs-keyword">const</span> [flag, setFlag] = useState&lt;<span class="hljs-built_in">boolean</span>&gt;(<span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure></li><li><p>实例化</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">const</span> client = <span class="hljs-keyword">new</span> <span class="hljs-title function_">COS</span>(&#123;<br>  <span class="hljs-title class_">SecretId</span>: data.<span class="hljs-property">secretId</span>, <span class="hljs-comment">/// SecretId</span><br>  <span class="hljs-title class_">SecretKey</span>: data.<span class="hljs-property">secretKey</span> <span class="hljs-comment">/// secretKey</span><br>&#125;)<br><span class="hljs-title function_">setTencentClient</span>(client)<br></code></pre></td></tr></table></figure></li><li><p>上传逻辑</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 腾讯云上传文件 - 方法</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">TencentCosUploadFn</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">url: <span class="hljs-built_in">string</span>, file: <span class="hljs-built_in">any</span>, onSuccess: (uploadResult: <span class="hljs-built_in">any</span>, file: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">void</span>, onError: (error: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">void</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> uploadResult = <span class="hljs-keyword">await</span> tencentClient.<span class="hljs-title function_">putObject</span>(&#123;<br>      <span class="hljs-title class_">Bucket</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;tencentConfig.bucket&#125;</span>-<span class="hljs-subst">$&#123;tencentConfig.appid&#125;</span>`</span> <span class="hljs-comment">/* 存储桶 */</span>,<br>      <span class="hljs-title class_">Region</span>: tencentConfig.<span class="hljs-property">region</span> <span class="hljs-comment">/* 存储桶所在地域，必须字段 */</span>,<br>      <span class="hljs-title class_">Key</span>: url <span class="hljs-comment">/* 文件名 */</span>,<br>      <span class="hljs-title class_">StorageClass</span>: <span class="hljs-string">&#x27;STANDARD&#x27;</span>, <span class="hljs-comment">// 上传模式, 标准模式</span><br>      <span class="hljs-title class_">Body</span>: file, <span class="hljs-comment">// 上传文件对象</span><br>      <span class="hljs-attr">onProgress</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">p: <span class="hljs-built_in">any</span></span>) &#123;<br>        <span class="hljs-comment">// console.log(&#x27;获取进度条的值==&gt;&#x27;, )</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-attr">perNum</span>: <span class="hljs-built_in">any</span> = (p * <span class="hljs-number">100</span>).<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span> (perNum &gt; <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-title function_">setFlag</span>(<span class="hljs-literal">true</span>)<br>        &#125;<br>        <span class="hljs-keyword">if</span> (perNum == <span class="hljs-number">100</span>) &#123;<br>          <span class="hljs-title function_">setFlag</span>(<span class="hljs-literal">false</span>)<br>        &#125;<br>        <span class="hljs-title function_">setPercent</span>(<span class="hljs-title class_">Number</span>(perNum))<br>        <span class="hljs-comment">// console.log(&quot;[cos.postObject-seccess]&quot;, JSON.stringify(info));</span><br>      &#125;<br>    &#125;)<br>    <span class="hljs-comment">// path https://upload-go-1257815509.cos.ap-shanghai.myqcloud.com/WX20240311-191010%402x.png</span><br>    <span class="hljs-comment">// https://upload-go-1257815509.cos.ap-shanghai.myqcloud.com/app/ip-rc-upload-1710236957380-3.png</span><br>    <span class="hljs-keyword">const</span> path = <span class="hljs-string">&#x27;https://&#x27;</span> + <span class="hljs-string">`<span class="hljs-subst">$&#123;tencentConfig.bucket&#125;</span>-<span class="hljs-subst">$&#123;tencentConfig.appid&#125;</span>.`</span> + <span class="hljs-string">&#x27;cos.&#x27;</span> + tencentConfig.<span class="hljs-property">region</span> + <span class="hljs-string">&#x27;.&#x27;</span> + <span class="hljs-string">&#x27;myqcloud.com/&#x27;</span> + url<br>    <span class="hljs-comment">// console.log(&#x27;uploadResult&#x27;, path)</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">saveUploadUrl</span>(path)<br>    <span class="hljs-title function_">onSuccess</span>(uploadResult, file)<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-title function_">onError</span>(err)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>自定义上传</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-comment">// 自定义上传</span><br><span class="hljs-keyword">const</span> <span class="hljs-attr">uploadProps</span>: <span class="hljs-title class_">UploadProps</span> = &#123;<br>  <span class="hljs-attr">beforeUpload</span>: beforeUpload,<br>  <span class="hljs-attr">showUploadList</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">customRequest</span>: <span class="hljs-title class_">OssUpload</span>,<br>  <span class="hljs-attr">listType</span>: <span class="hljs-string">&#x27;picture-card&#x27;</span>,<br>  <span class="hljs-title function_">onChange</span>(<span class="hljs-params">info</span>) &#123;<br>    <span class="hljs-comment">// console.log(&#x27;onChange😊===&gt;&#x27;, info)</span><br>    <span class="hljs-keyword">if</span> (info.<span class="hljs-property">file</span>.<span class="hljs-property">status</span> !== <span class="hljs-string">&#x27;uploading&#x27;</span>) &#123;<br>      <span class="hljs-comment">// console.log(info.file, info.fileList)</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (info.<span class="hljs-property">file</span>.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;done&#x27;</span>) &#123;<br>      <span class="hljs-comment">// console.log(`$&#123;info.file.name&#125; 文件上传成功`)</span><br>      message.<span class="hljs-title function_">success</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;info.file.name&#125;</span> 文件上传成功`</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (info.<span class="hljs-property">file</span>.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;error&#x27;</span>) &#123;<br>      info.<span class="hljs-property">fileList</span> = info.<span class="hljs-property">fileList</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">uid</span> !== info.<span class="hljs-property">file</span>.<span class="hljs-property">uid</span>)<br>      message.<span class="hljs-title function_">error</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;info.file.name&#125;</span> 文件上传失败`</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tsx">&lt;<span class="hljs-title class_">Space</span> direction=<span class="hljs-string">&#x27;vertical&#x27;</span> style=&#123;&#123; <span class="hljs-attr">display</span>: <span class="hljs-string">&#x27;flex&#x27;</span> &#125;&#125;&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;uploadTitleBox&#x27;</span>&gt;</span>&#123;getUploadTitle()&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Dragger</span> &#123;<span class="hljs-attr">...uploadProps</span>&#125;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;ant-upload-drag-icon&#x27;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">CloudUploadOutlined</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;ant-upload-text&#x27;</span>&gt;</span>将文件拖拽至此，或者点击上传<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Dragger</span>&gt;</span></span><br>    &#123;flag &amp;&amp; (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Space.Compact</span> <span class="hljs-attr">block</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Progress</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">color:</span> &#x27;#<span class="hljs-attr">fff</span>&#x27; &#125;&#125; <span class="hljs-attr">percent</span>=<span class="hljs-string">&#123;percent&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Space.Compact</span>&gt;</span></span><br>    )&#125;<br>&lt;/<span class="hljs-title class_">Space</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/WX20240406-170423@2x-rc-upload-1712392283791-13.png"></p>]]></content>
    
    
    <categories>
      
      <category>云存储篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>腾讯云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云OSS配置自定义域名，实现预览图片，而非下载</title>
    <link href="/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%EF%BC%8C%E5%AE%9E%E7%8E%B0%E9%A2%84%E8%A7%88%E5%9B%BE%E7%89%87%EF%BC%8C%E8%80%8C%E9%9D%9E%E4%B8%8B%E8%BD%BD/"/>
    <url>/%E9%98%BF%E9%87%8C%E4%BA%91OSS%E9%85%8D%E7%BD%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%EF%BC%8C%E5%AE%9E%E7%8E%B0%E9%A2%84%E8%A7%88%E5%9B%BE%E7%89%87%EF%BC%8C%E8%80%8C%E9%9D%9E%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p><a href="https://help.aliyun.com/zh/oss/user-guide/map-an-acceleration-endpoint"></a></p><ol><li>在购买域名的地方按照如下图添加CNAME记录</li></ol><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/aliyun-rc-upload-1712392283791-9.png"></p><ol start="2"><li>这里以腾讯云域名为例</li></ol><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/tenxun-rc-upload-1712392283791-11.png"></p><ul><li>主机记录： 你可以自定义 free</li><li>记录类型：设置为 CNAME</li><li>线路类型：选择默认即可</li><li>记录值：设置为 bunckt名称 + .oss-accelerate.aliyuncs.com 如：examplebucket.oss-accelerate.aliyuncs.com</li></ul>]]></content>
    
    
    <categories>
      
      <category>云存储篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端gitlab自动化部署，版本控制</title>
    <link href="/%E5%89%8D%E7%AB%AFgitlab%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%EF%BC%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    <url>/%E5%89%8D%E7%AB%AFgitlab%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%EF%BC%8C%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h4 id="gitlab-create-tag"><a href="#gitlab-create-tag" class="headerlink" title="gitlab create tag"></a>gitlab create tag</h4><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/yuque_diagram-rc-upload-1712392283791-7.jpg"></p><blockquote><p>在项目里面创建 tag git tag -a v1.0.8 -m “Update Release 1.0.8” ，新建一个tag并且名称当前tag版本为1.0.8</p></blockquote><p><img src="https://gmw-blogs.oss-cn-hangzhou.aliyuncs.com/assets/image-rc-upload-1712392283791-4.png"></p>]]></content>
    
    
    <categories>
      
      <category>前端自动化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
